1=========
->Pred Code:
os.kill(os.getpid(), signal.SIGUSR1)
->Target Code:
os.kill(os.getpid(), signal.SIGUSR1)
->Instruction:
send a signal `signal.SIGUSR1` to the current process
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: send a signal `signal.SIGUSR1` to the current process. [/INST] CODE: os.kill(os.getpid(), signal.SIGUSR1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: send a signal `signal.SIGUSR1` to the current process. [/INST] CODE: os.kill(os.getpid(), signal.SIGUSR1)</s>
--


2=========
->Pred Code:
print(bytes.fromhex('4a4b4c').decode('utf-8'))
->Target Code:
bytes.fromhex('4a4b4c').decode('utf-8')
->Instruction:
decode a hex string '4a4b4c' to UTF-8.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: decode a hex string '4a4b4c' to UTF-8.. [/INST] CODE: print(bytes.fromhex('4a4b4c').decode('utf-8'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: decode a hex string '4a4b4c' to UTF-8.. [/INST] CODE: bytes.fromhex('4a4b4c').decode('utf-8')</s>
--


3=========
->Pred Code:
len(set(myList)) == 1
->Target Code:
all(x == myList[0] for x in myList)
->Instruction:
check if all elements in list `myList` are identical
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if all elements in list `myList` are identical. [/INST] CODE: len(set(myList)) == 1
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if all elements in list `myList` are identical. [/INST] CODE: all(x == myList[0] for x in myList)</s>
--


4=========
->Pred Code:
"""{:20}{:}Very Good""".format('Python', ':')
->Target Code:
print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))
->Instruction:
format number of spaces between strings `Python`, `:` and `Very Good` to be `20`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format number of spaces between strings `Python`, `:` and `Very Good` to be `20`. [/INST] CODE: """{:20}{:}Very Good""".format('Python', ':')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format number of spaces between strings `Python`, `:` and `Very Good` to be `20`. [/INST] CODE: print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))</s>
--


5=========
->Pred Code:
{k: v for k, v in list(kwargs.items()) if v is not None}
->Target Code:
res = {k: v for k, v in list(kwargs.items()) if v is not None}
->Instruction:
get rid of None values in dictionary `kwargs`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get rid of None values in dictionary `kwargs`. [/INST] CODE: {k: v for k, v in list(kwargs.items()) if v is not None}
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get rid of None values in dictionary `kwargs`. [/INST] CODE: res = {k: v for k, v in list(kwargs.items()) if v is not None}</s>
--


6=========
->Pred Code:
{k: v for k, v in list(kwargs.items()) if v is not None}
->Target Code:
res = dict((k, v) for k, v in kwargs.items() if v is not None)
->Instruction:
get rid of None values in dictionary `kwargs`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get rid of None values in dictionary `kwargs`. [/INST] CODE: {k: v for k, v in list(kwargs.items()) if v is not None}
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get rid of None values in dictionary `kwargs`. [/INST] CODE: res = dict((k, v) for k, v in kwargs.items() if v is not None)</s>
--


7=========
->Pred Code:
subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
->Target Code:
subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
->Instruction:
capture final output of a chain of system commands `ps -ef | grep something | wc -l`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: capture final output of a chain of system commands `ps -ef | grep something | wc -l`. [/INST] CODE: subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: capture final output of a chain of system commands `ps -ef | grep something | wc -l`. [/INST] CODE: subprocess.check_output('ps -ef | grep something | wc -l', shell=True)</s>
--


8=========
->Pred Code:
"""""".join(['a', 'b', 'c'])
->Target Code:
"""""".join(['a', 'b', 'c'])
->Instruction:
concatenate a list of strings `['a', 'b', 'c']`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate a list of strings `['a', 'b', 'c']`. [/INST] CODE: """""".join(['a', 'b', 'c'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate a list of strings `['a', 'b', 'c']`. [/INST] CODE: """""".join(['a', 'b', 'c'])</s>
--


9=========
->Pred Code:
s1.reset_index().merge(s2.reset_index(), on='index')
->Target Code:
pd.Series(list(set(s1).intersection(set(s2))))
->Instruction:
find intersection data between series `s1` and series `s2`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find intersection data between series `s1` and series `s2`. [/INST] CODE: s1.reset_index().merge(s2.reset_index(), on='index')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find intersection data between series `s1` and series `s2`. [/INST] CODE: pd.Series(list(set(s1).intersection(set(s2))))</s>
--


10=========
->Pred Code:
client.send_header('Content-type', 'text/html')
->Target Code:
client.send('HTTP/1.0 200 OK\r\n')
->Instruction:
sending http headers to `client`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sending http headers to `client`. [/INST] CODE: client.send_header('Content-type', 'text/html')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sending http headers to `client`. [/INST] CODE: client.send('HTTP/1.0 200 OK\r\n')</s>
--


11=========
->Pred Code:
when = datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S').date()
->Target Code:
then = datetime.datetime.strptime(when, '%Y-%m-%d').date()
->Instruction:
Format a datetime string `when` to extract date only
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Format a datetime string `when` to extract date only. [/INST] CODE: when = datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S').date()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Format a datetime string `when` to extract date only. [/INST] CODE: then = datetime.datetime.strptime(when, '%Y-%m-%d').date()</s>
--


12=========
->Pred Code:
re.split('\\n\\n', inputString)
->Target Code:
inputString.split('\n')
->Instruction:
split a multi-line string `inputString` into separate strings
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a multi-line string `inputString` into separate strings. [/INST] CODE: re.split('\\n\\n', inputString)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a multi-line string `inputString` into separate strings. [/INST] CODE: inputString.split('\n')</s>
--


13=========
->Pred Code:
""" a \n b \r\n c """.split('\n')
->Target Code:
' a \n b \r\n c '.split('\n')
->Instruction:
Split a multi-line string ` a \n b \r\n c ` by new line character `\n`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split a multi-line string ` a \n b \r\n c ` by new line character `\n`. [/INST] CODE: """ a \n b \r\n c """.split('\n')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split a multi-line string ` a \n b \r\n c ` by new line character `\n`. [/INST] CODE: ' a \n b \r\n c '.split('\n')</s>
--


14=========
->Pred Code:
print(':'.join(b))
->Target Code:
""":""".join(str(x) for x in b)
->Instruction:
concatenate elements of list `b` by a colon ":"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate elements of list `b` by a colon ":". [/INST] CODE: print(':'.join(b))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate elements of list `b` by a colon ":". [/INST] CODE: """:""".join(str(x) for x in b)</s>
--


15=========
->Pred Code:
Entry.objects.all()[0]
->Target Code:
Entry.objects.filter()[:1].get()
->Instruction:
get the first object from a queryset in django model `Entry`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the first object from a queryset in django model `Entry`. [/INST] CODE: Entry.objects.all()[0]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the first object from a queryset in django model `Entry`. [/INST] CODE: Entry.objects.filter()[:1].get()</s>
--


16=========
->Pred Code:
np.sum(a, axis=None)
->Target Code:
a.sum(axis=1)
->Instruction:
Calculate sum over all rows of 2D numpy array
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Calculate sum over all rows of 2D numpy array. [/INST] CODE: np.sum(a, axis=None)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Calculate sum over all rows of 2D numpy array. [/INST] CODE: a.sum(axis=1)</s>
--


17=========
->Pred Code:
warnings.filterwarnings('always')
->Target Code:
warnings.simplefilter('always')
->Instruction:
enable warnings using action 'always'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: enable warnings using action 'always'. [/INST] CODE: warnings.filterwarnings('always')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: enable warnings using action 'always'. [/INST] CODE: warnings.simplefilter('always')</s>
--


18=========
->Pred Code:
""" """.join(l)
->Target Code:
print(' '.join(map(str, l)))
->Instruction:
concatenate items of list `l` with a space ' '
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate items of list `l` with a space ' '. [/INST] CODE: """ """.join(l)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate items of list `l` with a space ' '. [/INST] CODE: print(' '.join(map(str, l)))</s>
--


19=========
->Pred Code:
os.system("python hello.py htmlfilename.htm")
->Target Code:
subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])
->Instruction:
run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable. [/INST] CODE: os.system("python hello.py htmlfilename.htm")
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable. [/INST] CODE: subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])</s>
--


20=========
->Pred Code:
my_float = float(my_string.replace('.', '').replace(',', '.'))
->Target Code:
my_float = float(my_string.replace(',', ''))
->Instruction:
convert a string `my_string` with dot and comma into a float number `my_float`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a string `my_string` with dot and comma into a float number `my_float`. [/INST] CODE: my_float = float(my_string.replace('.', '').replace(',', '.'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a string `my_string` with dot and comma into a float number `my_float`. [/INST] CODE: my_float = float(my_string.replace(',', ''))</s>
--


21=========
->Pred Code:
float('123,456.908'.replace(',', ''))
->Target Code:
float('123,456.908'.replace(',', ''))
->Instruction:
convert a string `123,456.908` with dot and comma into a floating number
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a string `123,456.908` with dot and comma into a floating number. [/INST] CODE: float('123,456.908'.replace(',', ''))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a string `123,456.908` with dot and comma into a floating number. [/INST] CODE: float('123,456.908'.replace(',', ''))</s>
--


22=========
->Pred Code:
os.environ['PYTHONPATH'] = '/path/to/lib'
->Target Code:
sys.path.append('/path/to/whatever')
->Instruction:
set pythonpath in python script.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: set pythonpath in python script.. [/INST] CODE: os.environ['PYTHONPATH'] = '/path/to/lib'
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: set pythonpath in python script.. [/INST] CODE: sys.path.append('/path/to/whatever')</s>
--


23=========
->Pred Code:
re.split('(\\W+)', 'Words, words, words.', 1)
->Target Code:
re.split('(\\W+)', 'Words, words, words.')
->Instruction:
split string 'Words, words, words.' using a regex '(\\W+)'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string 'Words, words, words.' using a regex '(\\W+)'. [/INST] CODE: re.split('(\\W+)', 'Words, words, words.', 1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string 'Words, words, words.' using a regex '(\\W+)'. [/INST] CODE: re.split('(\\W+)', 'Words, words, words.')</s>
--


24=========
->Pred Code:
f = open('Output.txt', 'a')
->Target Code:
file = open('Output.txt', 'a')
->Instruction:
open a file `Output.txt` in append mode
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: open a file `Output.txt` in append mode. [/INST] CODE: f = open('Output.txt', 'a')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: open a file `Output.txt` in append mode. [/INST] CODE: file = open('Output.txt', 'a')</s>
--


25=========
->Pred Code:
urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')
->Target Code:
urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')
->Instruction:
download a file "http://www.example.com/songs/mp3.mp3" over HTTP and save to "mp3.mp3"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file "http://www.example.com/songs/mp3.mp3" over HTTP and save to "mp3.mp3". [/INST] CODE: urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file "http://www.example.com/songs/mp3.mp3" over HTTP and save to "mp3.mp3". [/INST] CODE: urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')</s>
--


26=========
->Pred Code:
urllib.request.urlretrieve(url, file_name)
->Target Code:
u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()
->Instruction:
download a file `url` over HTTP and save to `file_name`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file `url` over HTTP and save to `file_name`. [/INST] CODE: urllib.request.urlretrieve(url, file_name)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file `url` over HTTP and save to `file_name`. [/INST] CODE: u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()</s>
--


27=========
->Pred Code:
urllib.request.urlretrieve('http://www.example.com/', 'file_name')
->Target Code:
response = urllib.request.urlopen('http://www.example.com/')
html = response.read()
->Instruction:
download a file 'http://www.example.com/' over HTTP
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file 'http://www.example.com/' over HTTP. [/INST] CODE: urllib.request.urlretrieve('http://www.example.com/', 'file_name')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file 'http://www.example.com/' over HTTP. [/INST] CODE: response = urllib.request.urlopen('http://www.example.com/')
html = response.read()</s>
--


28=========
->Pred Code:
urllib.request.urlretrieve(url, filename)
->Target Code:
r = requests.get(url)
->Instruction:
download a file `url` over HTTP
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file `url` over HTTP. [/INST] CODE: urllib.request.urlretrieve(url, filename)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file `url` over HTTP. [/INST] CODE: r = requests.get(url)</s>
--


29=========
->Pred Code:
urllib.request.urlretrieve(url, '10MB')
->Target Code:
response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)
->Instruction:
download a file `url` over HTTP and save to "10MB"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file `url` over HTTP and save to "10MB". [/INST] CODE: urllib.request.urlretrieve(url, '10MB')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download a file `url` over HTTP and save to "10MB". [/INST] CODE: response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)</s>
--


30=========
->Pred Code:
parser.add_argument('--version', action='version', version='%(prog)s 2.0')
->Target Code:
parser.add_argument('--version', action='version', version='%(prog)s 2.0')
->Instruction:
argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`. [/INST] CODE: parser.add_argument('--version', action='version', version='%(prog)s 2.0')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`. [/INST] CODE: parser.add_argument('--version', action='version', version='%(prog)s 2.0')</s>
--


31=========
->Pred Code:
del d['c']
->Target Code:
{i: d[i] for i in d if i != 'c'}
->Instruction:
remove key 'c' from dictionary `d`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove key 'c' from dictionary `d`. [/INST] CODE: del d['c']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove key 'c' from dictionary `d`. [/INST] CODE: {i: d[i] for i in d if i != 'c'}</s>
--


32=========
->Pred Code:
pd.merge(csv_df, split_df, left_on='key', right_on='key_right', suffixes=('_left', '_right'))
->Target Code:
pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))
->Instruction:
Create new DataFrame object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create new DataFrame object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively. [/INST] CODE: pd.merge(csv_df, split_df, left_on='key', right_on='key_right', suffixes=('_left', '_right'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create new DataFrame object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively. [/INST] CODE: pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))</s>
--


33=========
->Pred Code:
re.compile(' +').split(s, 4)
->Target Code:
s.split(' ', 4)
->Instruction:
Split a string `s` by space with `4` splits
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split a string `s` by space with `4` splits. [/INST] CODE: re.compile(' +').split(s, 4)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split a string `s` by space with `4` splits. [/INST] CODE: s.split(' ', 4)</s>
--


34=========
->Pred Code:
input()
->Target Code:
input('Enter your input:')
->Instruction:
read keyboard-input
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: read keyboard-input. [/INST] CODE: input()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: read keyboard-input. [/INST] CODE: input('Enter your input:')</s>
--


35=========
->Pred Code:
app.debug = True
->Target Code:
app.run(debug=True)
->Instruction:
enable debug mode on Flask application `app`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: enable debug mode on Flask application `app`. [/INST] CODE: app.debug = True
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: enable debug mode on Flask application `app`. [/INST] CODE: app.run(debug=True)</s>
--


36=========
->Pred Code:
pickle.dump(mylist, open('save.txt', 'wb'))
->Target Code:
pickle.dump(mylist, open('save.txt', 'wb'))
->Instruction:
python save list `mylist` to file object 'save.txt'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: python save list `mylist` to file object 'save.txt'. [/INST] CODE: pickle.dump(mylist, open('save.txt', 'wb'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: python save list `mylist` to file object 'save.txt'. [/INST] CODE: pickle.dump(mylist, open('save.txt', 'wb'))</s>
--


37=========
->Pred Code:
np.einsum('ijk,ik->ij', P, T)
->Target Code:
scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)
->Instruction:
Multiply a matrix `P` with a 3d tensor `T` in scipy
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Multiply a matrix `P` with a 3d tensor `T` in scipy. [/INST] CODE: np.einsum('ijk,ik->ij', P, T)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Multiply a matrix `P` with a 3d tensor `T` in scipy. [/INST] CODE: scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)</s>
--


38=========
->Pred Code:
np.zeros((3, 3, 3))
->Target Code:
numpy.zeros((3, 3, 3))
->Instruction:
Create 3d array of zeroes of size `(3,3,3)`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create 3d array of zeroes of size `(3,3,3)`. [/INST] CODE: np.zeros((3, 3, 3))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create 3d array of zeroes of size `(3,3,3)`. [/INST] CODE: numpy.zeros((3, 3, 3))</s>
--


39=========
->Pred Code:
re.sub('\\w+\\s+\\w+\\s*$', '', content)
->Target Code:
""" """.join(content.split(' ')[:-1])
->Instruction:
cut off the last word of a sentence `content`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: cut off the last word of a sentence `content`. [/INST] CODE: re.sub('\\w+\\s+\\w+\\s*$', '', content)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: cut off the last word of a sentence `content`. [/INST] CODE: """ """.join(content.split(' ')[:-1])</s>
--


40=========
->Pred Code:
numpy.array([x])
->Target Code:
x = np.asarray(x).reshape(1, -1)[(0), :]
->Instruction:
convert scalar `x` to array
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert scalar `x` to array. [/INST] CODE: numpy.array([x])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert scalar `x` to array. [/INST] CODE: x = np.asarray(x).reshape(1, -1)[(0), :]</s>
--


41=========
->Pred Code:
sum(sum(x) for x in L)
->Target Code:
sum(sum(i) if isinstance(i, list) else i for i in L)
->Instruction:
sum all elements of nested list `L`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sum all elements of nested list `L`. [/INST] CODE: sum(sum(x) for x in L)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sum all elements of nested list `L`. [/INST] CODE: sum(sum(i) if isinstance(i, list) else i for i in L)</s>
--


42=========
->Pred Code:
struct.unpack('f', hexstr_to_bytes('470FC614'))[0]
->Target Code:
struct.unpack('!f', '470FC614'.decode('hex'))[0]
->Instruction:
convert hex string '470FC614' to a float number
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert hex string '470FC614' to a float number. [/INST] CODE: struct.unpack('f', hexstr_to_bytes('470FC614'))[0]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert hex string '470FC614' to a float number. [/INST] CODE: struct.unpack('!f', '470FC614'.decode('hex'))[0]</s>
--


43=========
->Pred Code:
{k: v * 2 for k, v in list(my_dict.items())}
->Target Code:
my_dict.update((x, y * 2) for x, y in list(my_dict.items()))
->Instruction:
Multiple each value by `2` for all keys in a dictionary `my_dict`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Multiple each value by `2` for all keys in a dictionary `my_dict`. [/INST] CODE: {k: v * 2 for k, v in list(my_dict.items())}
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Multiple each value by `2` for all keys in a dictionary `my_dict`. [/INST] CODE: my_dict.update((x, y * 2) for x, y in list(my_dict.items()))</s>
--


44=========
->Pred Code:
os.system('sleep.sh')
->Target Code:
subprocess.call('sleep.sh', shell=True)
->Instruction:
running bash script 'sleep.sh'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: running bash script 'sleep.sh'. [/INST] CODE: os.system('sleep.sh')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: running bash script 'sleep.sh'. [/INST] CODE: subprocess.call('sleep.sh', shell=True)</s>
--


45=========
->Pred Code:
print(', '.join(str(x) for x in l))
->Target Code:
""",""".join(l)
->Instruction:
Join elements of list `l` with a comma `,`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Join elements of list `l` with a comma `,`. [/INST] CODE: print(', '.join(str(x) for x in l))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Join elements of list `l` with a comma `,`. [/INST] CODE: """,""".join(l)</s>
--


46=========
->Pred Code:
print(', '.join(str(x) for x in myList))
->Target Code:
myList = ','.join(map(str, myList))
->Instruction:
make a comma-separated string from a list `myList`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: make a comma-separated string from a list `myList`. [/INST] CODE: print(', '.join(str(x) for x in myList))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: make a comma-separated string from a list `myList`. [/INST] CODE: myList = ','.join(map(str, myList))</s>
--


47=========
->Pred Code:
list(reversed(list(range(1, 10))))
->Target Code:
list(reversed(list(range(10))))
->Instruction:
reverse the list that contains 1 to 10
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse the list that contains 1 to 10. [/INST] CODE: list(reversed(list(range(1, 10))))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse the list that contains 1 to 10. [/INST] CODE: list(reversed(list(range(10))))</s>
--


48=========
->Pred Code:
re.sub('\\b(bag,|bag\\b|bag,)\\s+', '', 'lamp, bag, mirror')
->Target Code:
print('lamp, bag, mirror'.replace('bag,', ''))
->Instruction:
remove substring 'bag,' from a string 'lamp, bag, mirror'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove substring 'bag,' from a string 'lamp, bag, mirror'. [/INST] CODE: re.sub('\\b(bag,|bag\\b|bag,)\\s+', '', 'lamp, bag, mirror')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove substring 'bag,' from a string 'lamp, bag, mirror'. [/INST] CODE: print('lamp, bag, mirror'.replace('bag,', ''))</s>
--


49=========
->Pred Code:
re.sub('(\\w+)\\.(\\w+)\\.(\\w+)\\.(\\w+)', '\\4.\\3.\\2.\\1', s)
->Target Code:
""".""".join(s.split('.')[::-1])
->Instruction:
Reverse the order of words, delimited by `.`, in string `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Reverse the order of words, delimited by `.`, in string `s`. [/INST] CODE: re.sub('(\\w+)\\.(\\w+)\\.(\\w+)\\.(\\w+)', '\\4.\\3.\\2.\\1', s)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Reverse the order of words, delimited by `.`, in string `s`. [/INST] CODE: """.""".join(s.split('.')[::-1])</s>
--


50=========
->Pred Code:
datetime.datetime.fromtimestamp(s / 1000).strftime('%Y-%m-%d %H:%M:%S.%f')
->Target Code:
datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')
->Instruction:
convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'. [/INST] CODE: datetime.datetime.fromtimestamp(s / 1000).strftime('%Y-%m-%d %H:%M:%S.%f')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'. [/INST] CODE: datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')</s>
--


51=========
->Pred Code:
datetime.datetime.fromtimestamp(1236472051.807)
->Target Code:
time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))
->Instruction:
parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'. [/INST] CODE: datetime.datetime.fromtimestamp(1236472051.807)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'. [/INST] CODE: time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))</s>
--


52=========
->Pred Code:
(datetime.date.today() - datetime.timedelta(days=7))
->Target Code:
(datetime.datetime.now() - datetime.timedelta(days=7)).date()
->Instruction:
get the date 7 days before the current date
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the date 7 days before the current date. [/INST] CODE: (datetime.date.today() - datetime.timedelta(days=7))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the date 7 days before the current date. [/INST] CODE: (datetime.datetime.now() - datetime.timedelta(days=7)).date()</s>
--


53=========
->Pred Code:
sum([row[column] for row in data])
->Target Code:
print(sum(row[column] for row in data))
->Instruction:
sum elements at index `column` of each list in list `data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sum elements at index `column` of each list in list `data`. [/INST] CODE: sum([row[column] for row in data])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sum elements at index `column` of each list in list `data`. [/INST] CODE: print(sum(row[column] for row in data))</s>
--


54=========
->Pred Code:
np.sum(np.array(array), axis=0)
->Target Code:
[sum(row[i] for row in array) for i in range(len(array[0]))]
->Instruction:
sum columns of a list `array`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sum columns of a list `array`. [/INST] CODE: np.sum(np.array(array), axis=0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sum columns of a list `array`. [/INST] CODE: [sum(row[i] for row in array) for i in range(len(array[0]))]</s>
--


55=========
->Pred Code:
base64.b64encode('your string')
->Target Code:
base64.b64encode(bytes('your string', 'utf-8'))
->Instruction:
encode binary string 'your string' to base64 code
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode binary string 'your string' to base64 code. [/INST] CODE: base64.b64encode('your string')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode binary string 'your string' to base64 code. [/INST] CODE: base64.b64encode(bytes('your string', 'utf-8'))</s>
--


56=========
->Pred Code:
dict((k, v) for d in dicts for k, v in list(d.items()))
->Target Code:
dict((k, [d[k] for d in dicts]) for k in dicts[0])
->Instruction:
combine list of dictionaries `dicts` with the same keys in each list to a single dictionary
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine list of dictionaries `dicts` with the same keys in each list to a single dictionary. [/INST] CODE: dict((k, v) for d in dicts for k, v in list(d.items()))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine list of dictionaries `dicts` with the same keys in each list to a single dictionary. [/INST] CODE: dict((k, [d[k] for d in dicts]) for k in dicts[0])</s>
--


57=========
->Pred Code:
dict((k, dicts[k][i] + dicts[k][j]) for i in range(len(dicts[k])) for j in range(i + 1, len(dicts[k])) for k in dicts)
->Target Code:
{k: [d[k] for d in dicts] for k in dicts[0]}
->Instruction:
Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`. [/INST] CODE: dict((k, dicts[k][i] + dicts[k][j]) for i in range(len(dicts[k])) for j in range(i + 1, len(dicts[k])) for k in dicts)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`. [/INST] CODE: {k: [d[k] for d in dicts] for k in dicts[0]}</s>
--


58=========
->Pred Code:
set([x for x in mylist if mylist.count(x) > 1])
->Target Code:
[k for k, v in list(Counter(mylist).items()) if v > 1]
->Instruction:
identify duplicate values in list `mylist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: identify duplicate values in list `mylist`. [/INST] CODE: set([x for x in mylist if mylist.count(x) > 1])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: identify duplicate values in list `mylist`. [/INST] CODE: [k for k, v in list(Counter(mylist).items()) if v > 1]</s>
--


59=========
->Pred Code:
os.path.dirname(os.path.dirname(__file__))
->Target Code:
sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))
->Instruction:
Insert directory 'apps' into directory `__file__`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Insert directory 'apps' into directory `__file__`. [/INST] CODE: os.path.dirname(os.path.dirname(__file__))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Insert directory 'apps' into directory `__file__`. [/INST] CODE: sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))</s>
--


60=========
->Pred Code:
sys.path.insert(0, 'subdir')
->Target Code:
sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))
->Instruction:
modify sys.path for python module `subdir`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: modify sys.path for python module `subdir`. [/INST] CODE: sys.path.insert(0, 'subdir')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: modify sys.path for python module `subdir`. [/INST] CODE: sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))</s>
--


61=========
->Pred Code:
cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (1, 2, None))
->Target Code:
db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))
->Instruction:
Insert a 'None' value into a SQLite3 table.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Insert a 'None' value into a SQLite3 table.. [/INST] CODE: cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (1, 2, None))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Insert a 'None' value into a SQLite3 table.. [/INST] CODE: db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))</s>
--


62=========
->Pred Code:
[item for sublist in list_of_menuitems for item in sublist]
->Target Code:
[image for menuitem in list_of_menuitems for image in menuitem]
->Instruction:
flatten list `list_of_menuitems`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: flatten list `list_of_menuitems`. [/INST] CODE: [item for sublist in list_of_menuitems for item in sublist]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: flatten list `list_of_menuitems`. [/INST] CODE: [image for menuitem in list_of_menuitems for image in menuitem]</s>
--


63=========
->Pred Code:
a.extend(list(b))
->Target Code:
a.extend(b)
->Instruction:
append elements of a set `b` to a list `a`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append elements of a set `b` to a list `a`. [/INST] CODE: a.extend(list(b))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append elements of a set `b` to a list `a`. [/INST] CODE: a.extend(b)</s>
--


64=========
->Pred Code:
df.to_csv('np.txt', sep=' ')
->Target Code:
np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')
->Instruction:
write the data of dataframe `df` into text file `np.txt`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write the data of dataframe `df` into text file `np.txt`. [/INST] CODE: df.to_csv('np.txt', sep=' ')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write the data of dataframe `df` into text file `np.txt`. [/INST] CODE: np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')</s>
--


65=========
->Pred Code:
df.to_csv('c:\\data\\pandas.txt', index=False)
->Target Code:
df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')
->Instruction:
write content of DataFrame `df` into text file 'c:\\data\\pandas.txt'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write content of DataFrame `df` into text file 'c:\\data\\pandas.txt'. [/INST] CODE: df.to_csv('c:\\data\\pandas.txt', index=False)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write content of DataFrame `df` into text file 'c:\\data\\pandas.txt'. [/INST] CODE: df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')</s>
--


66=========
->Pred Code:
x.rsplit('-', 1)
->Target Code:
print(x.rpartition('-')[0])
->Instruction:
Split a string `x` by last occurrence of character `-`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split a string `x` by last occurrence of character `-`. [/INST] CODE: x.rsplit('-', 1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split a string `x` by last occurrence of character `-`. [/INST] CODE: print(x.rpartition('-')[0])</s>
--


67=========
->Pred Code:
re.split('-', s)[-1]
->Target Code:
print(x.rsplit('-', 1)[0])
->Instruction:
get the last part of a string before the character '-'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the last part of a string before the character '-'. [/INST] CODE: re.split('-', s)[-1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the last part of a string before the character '-'. [/INST] CODE: print(x.rsplit('-', 1)[0])</s>
--


68=========
->Pred Code:
ftp.storbinary('STOR ' + filename, open(filename, 'rb'))
->Target Code:
ftp.storlines('STOR ' + filename, open(filename, 'r'))
->Instruction:
upload file using FTP
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: upload file using FTP. [/INST] CODE: ftp.storbinary('STOR ' + filename, open(filename, 'rb'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: upload file using FTP. [/INST] CODE: ftp.storlines('STOR ' + filename, open(filename, 'r'))</s>
--


69=========
->Pred Code:
driver.find_element_by_id('XYZ').send_keys(Keys.PAGE_UP)
->Target Code:
browser.execute_script("document.getElementById('XYZ').value+='1'")
->Instruction:
add one to the hidden web element with id 'XYZ' with selenium python script
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add one to the hidden web element with id 'XYZ' with selenium python script. [/INST] CODE: driver.find_element_by_id('XYZ').send_keys(Keys.PAGE_UP)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add one to the hidden web element with id 'XYZ' with selenium python script. [/INST] CODE: browser.execute_script("document.getElementById('XYZ').value+='1'")</s>
--


70=========
->Pred Code:
np.array([2, 3, 4]) > np.array([1, 5, 2])
->Target Code:
np.maximum([2, 3, 4], [1, 5, 2])
->Instruction:
create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`. [/INST] CODE: np.array([2, 3, 4]) > np.array([1, 5, 2])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`. [/INST] CODE: np.maximum([2, 3, 4], [1, 5, 2])</s>
--


71=========
->Pred Code:
print(l[:3] + l[3:] + l[:3])
->Target Code:
print(l[3:] + l[:3])
->Instruction:
print a list `l` and move first 3 elements to the end of the list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print a list `l` and move first 3 elements to the end of the list. [/INST] CODE: print(l[:3] + l[3:] + l[:3])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print a list `l` and move first 3 elements to the end of the list. [/INST] CODE: print(l[3:] + l[:3])</s>
--


72=========
->Pred Code:
for (dirname, dirnames, filenames) in os.walk('.'):
    for subdirname in dirnames:
        pass
->Target Code:
for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass
->Instruction:
loop over files in directory '.'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop over files in directory '.'. [/INST] CODE: for (dirname, dirnames, filenames) in os.walk('.'):
    for subdirname in dirnames:
        pass
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop over files in directory '.'. [/INST] CODE: for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass</s>
--


73=========
->Pred Code:
for (dirname, dirnames, filenames) in os.walk(source):
    for filename in filenames:
        pass
->Target Code:
for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass
->Instruction:
loop over files in directory `source`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop over files in directory `source`. [/INST] CODE: for (dirname, dirnames, filenames) in os.walk(source):
    for filename in filenames:
        pass
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop over files in directory `source`. [/INST] CODE: for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass</s>
--


74=========
->Pred Code:
random.sample(range(1, 100), 10)
->Target Code:
[int(1000 * random.random()) for i in range(10000)]
->Instruction:
create a random list of integers
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a random list of integers. [/INST] CODE: random.sample(range(1, 100), 10)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a random list of integers. [/INST] CODE: [int(1000 * random.random()) for i in range(10000)]</s>
--


75=========
->Pred Code:
gql = db.GqlQuery('SELECT * FROM Schedule WHERE station = :1', foo.key())
for schedule in gql:
    pass
->Target Code:
db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())
->Instruction:
Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`. [/INST] CODE: gql = db.GqlQuery('SELECT * FROM Schedule WHERE station = :1', foo.key())
for schedule in gql:
    pass
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`. [/INST] CODE: db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())</s>
--


76=========
->Pred Code:
df[df.index.map(lambda x: re.match('^f', x))]
->Target Code:
df.b.str.contains('^f')
->Instruction:
filter rows in pandas starting with alphabet 'f' using regular expression.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: filter rows in pandas starting with alphabet 'f' using regular expression.. [/INST] CODE: df[df.index.map(lambda x: re.match('^f', x))]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: filter rows in pandas starting with alphabet 'f' using regular expression.. [/INST] CODE: df.b.str.contains('^f')</s>
--


77=========
->Pred Code:
print('\n'.join('  '.join(map(str, row)) for row in tab))
->Target Code:
print('\n'.join('\t'.join(str(col) for col in row) for row in tab))
->Instruction:
print a 2 dimensional list `tab` as a table with delimiters
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print a 2 dimensional list `tab` as a table with delimiters. [/INST] CODE: print('\n'.join('  '.join(map(str, row)) for row in tab))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print a 2 dimensional list `tab` as a table with delimiters. [/INST] CODE: print('\n'.join('\t'.join(str(col) for col in row) for row in tab))</s>
--


78=========
->Pred Code:
df.drop(df.index[((df['A'] == 1) & (df['B'] == 1) & (df['C'] == 1)), inplace=True])
->Target Code:
df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()
->Instruction:
pandas: delete rows in dataframe `df` based on multiple columns values
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: pandas: delete rows in dataframe `df` based on multiple columns values. [/INST] CODE: df.drop(df.index[((df['A'] == 1) & (df['B'] == 1) & (df['C'] == 1)), inplace=True])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: pandas: delete rows in dataframe `df` based on multiple columns values. [/INST] CODE: df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()</s>
--


79=========
->Pred Code:
print('Goals: {0.goals} Penalties: {0.penalties}'.format(self))
->Target Code:
"""({:d} goals, ${:d})""".format(self.goals, self.penalties)
->Instruction:
format the variables `self.goals` and `self.penalties` using string formatting
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format the variables `self.goals` and `self.penalties` using string formatting. [/INST] CODE: print('Goals: {0.goals} Penalties: {0.penalties}'.format(self))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format the variables `self.goals` and `self.penalties` using string formatting. [/INST] CODE: """({:d} goals, ${:d})""".format(self.goals, self.penalties)</s>
--


80=========
->Pred Code:
print("({} goals, ${})".format(goals, penalties))
->Target Code:
"""({} goals, ${})""".format(self.goals, self.penalties)
->Instruction:
format string "({} goals, ${})" with variables `goals` and `penalties`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format string "({} goals, ${})" with variables `goals` and `penalties`. [/INST] CODE: print("({} goals, ${})".format(goals, penalties))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format string "({} goals, ${})" with variables `goals` and `penalties`. [/INST] CODE: """({} goals, ${})""".format(self.goals, self.penalties)</s>
--


81=========
->Pred Code:
"""({0.goals} goals, ${0.penalties})""".format(club)
->Target Code:
"""({0.goals} goals, ${0.penalties})""".format(self)
->Instruction:
format string "({0.goals} goals, ${0.penalties})"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format string "({0.goals} goals, ${0.penalties})". [/INST] CODE: """({0.goals} goals, ${0.penalties})""".format(club)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: format string "({0.goals} goals, ${0.penalties})". [/INST] CODE: """({0.goals} goals, ${0.penalties})""".format(self)</s>
--


82=========
->Pred Code:
[map(int, sublist) for sublist in L]
->Target Code:
[int(''.join(str(d) for d in x)) for x in L]
->Instruction:
convert list of lists `L` to list of integers
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list of lists `L` to list of integers. [/INST] CODE: [map(int, sublist) for sublist in L]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list of lists `L` to list of integers. [/INST] CODE: [int(''.join(str(d) for d in x)) for x in L]</s>
--


83=========
->Pred Code:
sum([int(''.join(map(str, x))) for x in L])
->Target Code:
[''.join(str(d) for d in x) for x in L]
->Instruction:
combine elements of each list in list `L` into digits of a single integer
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine elements of each list in list `L` into digits of a single integer. [/INST] CODE: sum([int(''.join(map(str, x))) for x in L])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine elements of each list in list `L` into digits of a single integer. [/INST] CODE: [''.join(str(d) for d in x) for x in L]</s>
--


84=========
->Pred Code:
[map(int, sublist) for sublist in L]
->Target Code:
L = [int(''.join([str(y) for y in x])) for x in L]
->Instruction:
convert a list of lists `L` to list of integers
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a list of lists `L` to list of integers. [/INST] CODE: [map(int, sublist) for sublist in L]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a list of lists `L` to list of integers. [/INST] CODE: L = [int(''.join([str(y) for y in x])) for x in L]</s>
--


85=========
->Pred Code:
myfile.write('\n'.join(lines))
->Target Code:
myfile.write('\n'.join(lines))
->Instruction:
write the elements of list `lines` concatenated by special character '\n' to file `myfile`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write the elements of list `lines` concatenated by special character '\n' to file `myfile`. [/INST] CODE: myfile.write('\n'.join(lines))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write the elements of list `lines` concatenated by special character '\n' to file `myfile`. [/INST] CODE: myfile.write('\n'.join(lines))</s>
--


86=========
->Pred Code:
[x for x in mylist if x not in ('X', 'N')]
->Target Code:
[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]
->Instruction:
removing an element from a list based on a predicate 'X' or 'N'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: removing an element from a list based on a predicate 'X' or 'N'. [/INST] CODE: [x for x in mylist if x not in ('X', 'N')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: removing an element from a list based on a predicate 'X' or 'N'. [/INST] CODE: [x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]</s>
--


87=========
->Pred Code:
re.sub('(?<!\\w)\\b(\\w+)\\b\\s+\\1\\b(?!\\w)', '\\1', text)
->Target Code:
text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)
->Instruction:
Remove duplicate words from a string `text` using regex
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Remove duplicate words from a string `text` using regex. [/INST] CODE: re.sub('(?<!\\w)\\b(\\w+)\\b\\s+\\1\\b(?!\\w)', '\\1', text)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Remove duplicate words from a string `text` using regex. [/INST] CODE: text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)</s>
--


88=========
->Pred Code:
df.apply(lambda x: sum(x != 0))
->Target Code:
df.astype(bool).sum(axis=1)
->Instruction:
count non zero values in each column in pandas data frame
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count non zero values in each column in pandas data frame. [/INST] CODE: df.apply(lambda x: sum(x != 0))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count non zero values in each column in pandas data frame. [/INST] CODE: df.astype(bool).sum(axis=1)</s>
--


89=========
->Pred Code:
re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')
->Target Code:
re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')
->Instruction:
search for string that matches regular expression pattern '(?<!Distillr)\\\\AcroTray\\.exe' in string 'C:\\SomeDir\\AcroTray.exe'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: search for string that matches regular expression pattern '(?<!Distillr)\\\\AcroTray\\.exe' in string 'C:\\SomeDir\\AcroTray.exe'. [/INST] CODE: re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: search for string that matches regular expression pattern '(?<!Distillr)\\\\AcroTray\\.exe' in string 'C:\\SomeDir\\AcroTray.exe'. [/INST] CODE: re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')</s>
--


90=========
->Pred Code:
re.split('\\s+', 'QH QD JC KD JS')
->Target Code:
"""QH QD JC KD JS""".split()
->Instruction:
split string 'QH QD JC KD JS' into a list on white spaces
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string 'QH QD JC KD JS' into a list on white spaces. [/INST] CODE: re.split('\\s+', 'QH QD JC KD JS')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string 'QH QD JC KD JS' into a list on white spaces. [/INST] CODE: """QH QD JC KD JS""".split()</s>
--


91=========
->Pred Code:
m = re.search('>.*?<', line)
->Target Code:
print(re.search('>.*<', line).group(0))
->Instruction:
search for occurrences of regex pattern '>.*<' in xml string `line`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: search for occurrences of regex pattern '>.*<' in xml string `line`. [/INST] CODE: m = re.search('>.*?<', line)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: search for occurrences of regex pattern '>.*<' in xml string `line`. [/INST] CODE: print(re.search('>.*<', line).group(0))</s>
--


92=========
->Pred Code:
open('filename', 'w').close()
->Target Code:
open(filename, 'w').close()
->Instruction:
erase all the contents of a file `filename`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: erase all the contents of a file `filename`. [/INST] CODE: open('filename', 'w').close()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: erase all the contents of a file `filename`. [/INST] CODE: open(filename, 'w').close()</s>
--


93=========
->Pred Code:
datetime.strptime('2010-07-01 12:00:00.123', '%Y-%m-%d %H:%M:%S.%f')
->Target Code:
datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')
->Instruction:
convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'. [/INST] CODE: datetime.strptime('2010-07-01 12:00:00.123', '%Y-%m-%d %H:%M:%S.%f')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'. [/INST] CODE: datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')</s>
--


94=========
->Pred Code:
[i for i, x in enumerate(thelist) if x[0] == '332']
->Target Code:
[index for index, item in enumerate(thelist) if item[0] == '332']
->Instruction:
find the index of a list with the first element equal to '332' within the list of lists `thelist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the index of a list with the first element equal to '332' within the list of lists `thelist`. [/INST] CODE: [i for i, x in enumerate(thelist) if x[0] == '332']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the index of a list with the first element equal to '332' within the list of lists `thelist`. [/INST] CODE: [index for index, item in enumerate(thelist) if item[0] == '332']</s>
--


95=========
->Pred Code:
re.sub('[%s%s]+' % ('', ' '), ' ', text.lower())
->Target Code:
re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()
->Instruction:
lower a string `text` and remove non-alphanumeric characters aside from space
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: lower a string `text` and remove non-alphanumeric characters aside from space. [/INST] CODE: re.sub('[%s%s]+' % ('', ' '), ' ', text.lower())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: lower a string `text` and remove non-alphanumeric characters aside from space. [/INST] CODE: re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()</s>
--


96=========
->Pred Code:
re.sub('[\\W_]+', ' ', text).lower()
->Target Code:
re.sub('(?!\\s)[\\W_]', '', text).lower().strip()
->Instruction:
remove all non-alphanumeric characters except space from a string `text` and lower it
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove all non-alphanumeric characters except space from a string `text` and lower it. [/INST] CODE: re.sub('[\\W_]+', ' ', text).lower()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove all non-alphanumeric characters except space from a string `text` and lower it. [/INST] CODE: re.sub('(?!\\s)[\\W_]', '', text).lower().strip()</s>
--


97=========
->Pred Code:
plt.xscale('log', base=2)
->Target Code:
plt.plot(x, y, label='H\u2082O')
->Instruction:
subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.. [/INST] CODE: plt.xscale('log', base=2)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.. [/INST] CODE: plt.plot(x, y, label='H\u2082O')</s>
--


98=========
->Pred Code:
plt.xscale('log', base=2)
->Target Code:
plt.plot(x, y, label='$H_2O$')
->Instruction:
subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.. [/INST] CODE: plt.xscale('log', base=2)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.. [/INST] CODE: plt.plot(x, y, label='$H_2O$')</s>
--


99=========
->Pred Code:
for i in range(0, len(mylist), 3):
    pass
->Target Code:
[x for x in mylist if len(x) == 3]
->Instruction:
loop over a list `mylist` if sublists length equals 3
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop over a list `mylist` if sublists length equals 3. [/INST] CODE: for i in range(0, len(mylist), 3):
    pass
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop over a list `mylist` if sublists length equals 3. [/INST] CODE: [x for x in mylist if len(x) == 3]</s>
--


100=========
->Pred Code:
lst = [Object() for i in range(100)]
->Target Code:
lst = [Object() for _ in range(100)]
->Instruction:
initialize a list `lst` of 100 objects Object()
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: initialize a list `lst` of 100 objects Object(). [/INST] CODE: lst = [Object() for i in range(100)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: initialize a list `lst` of 100 objects Object(). [/INST] CODE: lst = [Object() for _ in range(100)]</s>
--


101=========
->Pred Code:
lst = [Object() for _ in range(100)]
->Target Code:
lst = [Object() for i in range(100)]
->Instruction:
create list `lst` containing 100 instances of object `Object`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create list `lst` containing 100 instances of object `Object`. [/INST] CODE: lst = [Object() for _ in range(100)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create list `lst` containing 100 instances of object `Object`. [/INST] CODE: lst = [Object() for i in range(100)]</s>
--


102=========
->Pred Code:
tree.xpath(".//a[@href][@class='someclass']/@href")
->Target Code:
self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')
->Instruction:
get the content of child tag with`href` attribute whose parent has css `someclass`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the content of child tag with`href` attribute whose parent has css `someclass`. [/INST] CODE: tree.xpath(".//a[@href][@class='someclass']/@href")
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the content of child tag with`href` attribute whose parent has css `someclass`. [/INST] CODE: self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')</s>
--


103=========
->Pred Code:
pd.merge(df1, df2, on='Date_Time')
->Target Code:
df1.merge(df2, on='Date_Time')
->Instruction:
joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes. [/INST] CODE: pd.merge(df1, df2, on='Date_Time')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes. [/INST] CODE: df1.merge(df2, on='Date_Time')</s>
--


104=========
->Pred Code:
print('String 1 is %s' % str1)
->Target Code:
'first string is: %s, second one is: %s' % (str1, 'geo.tif')
->Instruction:
use `%s` operator to print variable values `str1` inside a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: use `%s` operator to print variable values `str1` inside a string. [/INST] CODE: print('String 1 is %s' % str1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: use `%s` operator to print variable values `str1` inside a string. [/INST] CODE: 'first string is: %s, second one is: %s' % (str1, 'geo.tif')</s>
--


105=========
->Pred Code:
os.makedirs(directory, exist_ok=True)
->Target Code:
if (not os.path.exists(directory)):
    os.makedirs(directory)
->Instruction:
check if directory `directory ` exists and create it if necessary
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if directory `directory ` exists and create it if necessary. [/INST] CODE: os.makedirs(directory, exist_ok=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if directory `directory ` exists and create it if necessary. [/INST] CODE: if (not os.path.exists(directory)):
    os.makedirs(directory)</s>
--


106=========
->Pred Code:
os.makedirs(path, exist_ok=True)
->Target Code:
try:
    os.makedirs(path)
except OSError:
    if (not os.path.isdir(path)):
        raise
->Instruction:
check if a directory `path` exists and create it if necessary
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a directory `path` exists and create it if necessary. [/INST] CODE: os.makedirs(path, exist_ok=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a directory `path` exists and create it if necessary. [/INST] CODE: try:
    os.makedirs(path)
except OSError:
    if (not os.path.isdir(path)):
        raise</s>
--


107=========
->Pred Code:
os.makedirs(path, exist_ok=True)
->Target Code:
distutils.dir_util.mkpath(path)
->Instruction:
check if a directory `path` exists and create it if necessary
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a directory `path` exists and create it if necessary. [/INST] CODE: os.makedirs(path, exist_ok=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a directory `path` exists and create it if necessary. [/INST] CODE: distutils.dir_util.mkpath(path)</s>
--


108=========
->Pred Code:
os.makedirs(path, exist_ok=True)
->Target Code:
try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
->Instruction:
check if a directory `path` exists and create it if necessary
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a directory `path` exists and create it if necessary. [/INST] CODE: os.makedirs(path, exist_ok=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a directory `path` exists and create it if necessary. [/INST] CODE: try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise</s>
--


109=========
->Pred Code:
text = re.sub('\\bH3\\b', 'H1', text)
->Target Code:
re.sub('\\bH3\\b', 'H1', text)
->Instruction:
Replace a separate word 'H3' by 'H1' in a string 'text'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Replace a separate word 'H3' by 'H1' in a string 'text'. [/INST] CODE: text = re.sub('\\bH3\\b', 'H1', text)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Replace a separate word 'H3' by 'H1' in a string 'text'. [/INST] CODE: re.sub('\\bH3\\b', 'H1', text)</s>
--


110=========
->Pred Code:
re.sub('[a-zA-Z]', '', 'aas30dsa20')
->Target Code:
re.sub('\\D', '', 'aas30dsa20')
->Instruction:
substitute ASCII letters in string 'aas30dsa20' with empty string ''
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: substitute ASCII letters in string 'aas30dsa20' with empty string ''. [/INST] CODE: re.sub('[a-zA-Z]', '', 'aas30dsa20')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: substitute ASCII letters in string 'aas30dsa20' with empty string ''. [/INST] CODE: re.sub('\\D', '', 'aas30dsa20')</s>
--


111=========
->Pred Code:
print(lambda aas30dsa20: ''.join(c for c in aas30dsa20 if c.isdigit()))
->Target Code:
"""""".join([x for x in 'aas30dsa20' if x.isdigit()])
->Instruction:
get digits only from a string `aas30dsa20` using lambda function
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get digits only from a string `aas30dsa20` using lambda function. [/INST] CODE: print(lambda aas30dsa20: ''.join(c for c in aas30dsa20 if c.isdigit()))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get digits only from a string `aas30dsa20` using lambda function. [/INST] CODE: """""".join([x for x in 'aas30dsa20' if x.isdigit()])</s>
--


112=========
->Pred Code:
print(soup.find('name').text)
->Target Code:
print(soup.find('name').string)
->Instruction:
access a tag called "name" in beautifulsoup `soup`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: access a tag called "name" in beautifulsoup `soup`. [/INST] CODE: print(soup.find('name').text)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: access a tag called "name" in beautifulsoup `soup`. [/INST] CODE: print(soup.find('name').string)</s>
--


113=========
->Pred Code:
records = {str(d['_id']): d for d in cursor}
->Target Code:
records = dict((record['_id'], record) for record in cursor)
->Instruction:
get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`. [/INST] CODE: records = {str(d['_id']): d for d in cursor}
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`. [/INST] CODE: records = dict((record['_id'], record) for record in cursor)</s>
--


114=========
->Pred Code:
numpy.concatenate([A, B], axis=0)
->Target Code:
np.concatenate((A, B))
->Instruction:
Create new matrix object  by concatenating data from matrix A and matrix B
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create new matrix object  by concatenating data from matrix A and matrix B. [/INST] CODE: numpy.concatenate([A, B], axis=0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create new matrix object  by concatenating data from matrix A and matrix B. [/INST] CODE: np.concatenate((A, B))</s>
--


115=========
->Pred Code:
numpy.concatenate((A, B), axis=0)
->Target Code:
np.vstack((A, B))
->Instruction:
concat two matrices `A` and `B` in numpy
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concat two matrices `A` and `B` in numpy. [/INST] CODE: numpy.concatenate((A, B), axis=0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concat two matrices `A` and `B` in numpy. [/INST] CODE: np.vstack((A, B))</s>
--


116=========
->Pred Code:
return len(open(filepath).read())
->Target Code:
os.stat(filepath).st_size
->Instruction:
Get the characters count in a file `filepath`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the characters count in a file `filepath`. [/INST] CODE: return len(open(filepath).read())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the characters count in a file `filepath`. [/INST] CODE: os.stat(filepath).st_size</s>
--


117=========
->Pred Code:
l.count('a')
->Target Code:
l.count('a')
->Instruction:
count the occurrences of item "a" in list `l`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of item "a" in list `l`. [/INST] CODE: l.count('a')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of item "a" in list `l`. [/INST] CODE: l.count('a')</s>
--


118=========
->Pred Code:
Counter(l)
->Target Code:
Counter(l)
->Instruction:
count the occurrences of items in list `l`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of items in list `l`. [/INST] CODE: Counter(l)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of items in list `l`. [/INST] CODE: Counter(l)</s>
--


119=========
->Pred Code:
Counter(l)
->Target Code:
[[x, l.count(x)] for x in set(l)]
->Instruction:
count the occurrences of items in list `l`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of items in list `l`. [/INST] CODE: Counter(l)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of items in list `l`. [/INST] CODE: [[x, l.count(x)] for x in set(l)]</s>
--


120=========
->Pred Code:
Counter(l)
->Target Code:
dict(((x, l.count(x)) for x in set(l)))
->Instruction:
count the occurrences of items in list `l`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of items in list `l`. [/INST] CODE: Counter(l)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of items in list `l`. [/INST] CODE: dict(((x, l.count(x)) for x in set(l)))</s>
--


121=========
->Pred Code:
l.count('b')
->Target Code:
l.count('b')
->Instruction:
count the occurrences of item "b" in list `l`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of item "b" in list `l`. [/INST] CODE: l.count('b')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the occurrences of item "b" in list `l`. [/INST] CODE: l.count('b')</s>
--


122=========
->Pred Code:
shutil.copy2(srcfile, dstdir)
->Target Code:
shutil.copy(srcfile, dstdir)
->Instruction:
copy file `srcfile` to directory `dstdir`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: copy file `srcfile` to directory `dstdir`. [/INST] CODE: shutil.copy2(srcfile, dstdir)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: copy file `srcfile` to directory `dstdir`. [/INST] CODE: shutil.copy(srcfile, dstdir)</s>
--


123=========
->Pred Code:
max(x, key=x.get)
->Target Code:
max(k for k, v in x.items() if v != 0)
->Instruction:
find the key associated with the largest value in dictionary `x` whilst key is non-zero value
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the key associated with the largest value in dictionary `x` whilst key is non-zero value. [/INST] CODE: max(x, key=x.get)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the key associated with the largest value in dictionary `x` whilst key is non-zero value. [/INST] CODE: max(k for k, v in x.items() if v != 0)</s>
--


124=========
->Pred Code:
max(k for k, v in x.items() if v)
->Target Code:
(k for k, v in x.items() if v != 0)
->Instruction:
get the largest key whose not associated with value of 0 in dictionary `x`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the largest key whose not associated with value of 0 in dictionary `x`. [/INST] CODE: max(k for k, v in x.items() if v)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the largest key whose not associated with value of 0 in dictionary `x`. [/INST] CODE: (k for k, v in x.items() if v != 0)</s>
--


125=========
->Pred Code:
max(k for k, v in x.items() if v)
->Target Code:
max(k for k, v in x.items() if v != 0)
->Instruction:
get the largest key in a dictionary `x` with non-zero value
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the largest key in a dictionary `x` with non-zero value. [/INST] CODE: max(k for k, v in x.items() if v)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the largest key in a dictionary `x` with non-zero value. [/INST] CODE: max(k for k, v in x.items() if v != 0)</s>
--


126=========
->Pred Code:
f.seek(0)
->Target Code:
file.seek(0)
->Instruction:
Put the curser at beginning of the file
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Put the curser at beginning of the file. [/INST] CODE: f.seek(0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Put the curser at beginning of the file. [/INST] CODE: file.seek(0)</s>
--


127=========
->Pred Code:
df['c'] = df['b'] + df['a'].astype(str)
->Target Code:
df['c'] = np.where(df['a'].isnull, df['b'], df['a'])
->Instruction:
combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`. [/INST] CODE: df['c'] = df['b'] + df['a'].astype(str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`. [/INST] CODE: df['c'] = np.where(df['a'].isnull, df['b'], df['a'])</s>
--


128=========
->Pred Code:
del d['ele']
->Target Code:
del d['ele']
->Instruction:
remove key 'ele' from dictionary `d`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove key 'ele' from dictionary `d`. [/INST] CODE: del d['ele']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove key 'ele' from dictionary `d`. [/INST] CODE: del d['ele']</s>
--


129=========
->Pred Code:
MyModel.objects.update(timestamp=F('timestamp') + datetime.timedelta(100 * 365))
->Target Code:
MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))
->Instruction:
Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years. [/INST] CODE: MyModel.objects.update(timestamp=F('timestamp') + datetime.timedelta(100 * 365))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years. [/INST] CODE: MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))</s>
--


130=========
->Pred Code:
[['it'], ['was'], ['annoying']].insert(1, 's')
->Target Code:
['it'] + ['was'] + ['annoying']
->Instruction:
merge list `['it']` and list `['was']` and list `['annoying']` into one list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: merge list `['it']` and list `['was']` and list `['annoying']` into one list. [/INST] CODE: [['it'], ['was'], ['annoying']].insert(1, 's')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: merge list `['it']` and list `['was']` and list `['annoying']` into one list. [/INST] CODE: ['it'] + ['was'] + ['annoying']</s>
--


131=========
->Pred Code:
str(int(x) + 1).zfill(2)
->Target Code:
str(int(x) + 1).zfill(len(x))
->Instruction:
increment a value with leading zeroes in a number `x`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: increment a value with leading zeroes in a number `x`. [/INST] CODE: str(int(x) + 1).zfill(2)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: increment a value with leading zeroes in a number `x`. [/INST] CODE: str(int(x) + 1).zfill(len(x))</s>
--


132=========
->Pred Code:
df.index.is_monotonic_increasing
->Target Code:
all(df.index[:-1] <= df.index[1:])
->Instruction:
check if a pandas dataframe `df`'s index is sorted
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a pandas dataframe `df`'s index is sorted. [/INST] CODE: df.index.is_monotonic_increasing
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if a pandas dataframe `df`'s index is sorted. [/INST] CODE: all(df.index[:-1] <= df.index[1:])</s>
--


133=========
->Pred Code:
list(t)
->Target Code:
list(t)
->Instruction:
Convert tuple `t` to list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert tuple `t` to list. [/INST] CODE: list(t)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert tuple `t` to list. [/INST] CODE: list(t)</s>
--


134=========
->Pred Code:
tuple(zip(*[iter(t)] * 2))
->Target Code:
tuple(l)
->Instruction:
Convert list `t` to tuple
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert list `t` to tuple. [/INST] CODE: tuple(zip(*[iter(t)] * 2))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert list `t` to tuple. [/INST] CODE: tuple(l)</s>
--


135=========
->Pred Code:
[list(x) for x in level1]
->Target Code:
level1 = map(list, level1)
->Instruction:
Convert tuple `level1` to list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert tuple `level1` to list. [/INST] CODE: [list(x) for x in level1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert tuple `level1` to list. [/INST] CODE: level1 = map(list, level1)</s>
--


136=========
->Pred Code:
log.info('Data: %s', pformat(dataobject))
->Target Code:
pprint.pprint(dataobject, logFile)
->Instruction:
send the output of pprint object `dataobject` to file `logFile`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: send the output of pprint object `dataobject` to file `logFile`. [/INST] CODE: log.info('Data: %s', pformat(dataobject))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: send the output of pprint object `dataobject` to file `logFile`. [/INST] CODE: pprint.pprint(dataobject, logFile)</s>
--


137=========
->Pred Code:
df.loc[df['BoolCol'], 'A']
->Target Code:
df.loc[df['BoolCol']]
->Instruction:
get index of rows in column 'BoolCol'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get index of rows in column 'BoolCol'. [/INST] CODE: df.loc[df['BoolCol'], 'A']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get index of rows in column 'BoolCol'. [/INST] CODE: df.loc[df['BoolCol']]</s>
--


138=========
->Pred Code:
df.loc[df.BoolCol == True, 'Name']
->Target Code:
df.iloc[np.flatnonzero(df['BoolCol'])]
->Instruction:
Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True. [/INST] CODE: df.loc[df.BoolCol == True, 'Name']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True. [/INST] CODE: df.iloc[np.flatnonzero(df['BoolCol'])]</s>
--


139=========
->Pred Code:
df.loc[df.BoolCol == True].index.tolist()
->Target Code:
df[df['BoolCol'] == True].index.tolist()
->Instruction:
get list of indexes of rows where column 'BoolCol' values match True
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get list of indexes of rows where column 'BoolCol' values match True. [/INST] CODE: df.loc[df.BoolCol == True].index.tolist()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get list of indexes of rows where column 'BoolCol' values match True. [/INST] CODE: df[df['BoolCol'] == True].index.tolist()</s>
--


140=========
->Pred Code:
df.loc[df.BoolCol == True].index
->Target Code:
df[df['BoolCol']].index.tolist()
->Instruction:
get index of rows in dataframe `df` which column 'BoolCol' matches value True
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get index of rows in dataframe `df` which column 'BoolCol' matches value True. [/INST] CODE: df.loc[df.BoolCol == True].index
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get index of rows in dataframe `df` which column 'BoolCol' matches value True. [/INST] CODE: df[df['BoolCol']].index.tolist()</s>
--


141=========
->Pred Code:
os.chdir(owd)
->Target Code:
os.chdir(owd)
->Instruction:
change working directory to the directory `owd`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: change working directory to the directory `owd`. [/INST] CODE: os.chdir(owd)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: change working directory to the directory `owd`. [/INST] CODE: os.chdir(owd)</s>
--


142=========
->Pred Code:
c.execute('INSERT INTO table VALUES (?)', ['testfield'])
->Target Code:
c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))
->Instruction:
insert data from a string `testfield` to sqlite db `c`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: insert data from a string `testfield` to sqlite db `c`. [/INST] CODE: c.execute('INSERT INTO table VALUES (?)', ['testfield'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: insert data from a string `testfield` to sqlite db `c`. [/INST] CODE: c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))</s>
--


143=========
->Pred Code:
"""\\x89\\n""".decode('string_escape')
->Target Code:
"""\\x89\\n""".decode('string_escape')
->Instruction:
decode string "\\x89\\n" into a normal string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: decode string "\\x89\\n" into a normal string. [/INST] CODE: """\\x89\\n""".decode('string_escape')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: decode string "\\x89\\n" into a normal string. [/INST] CODE: """\\x89\\n""".decode('string_escape')</s>
--


144=========
->Pred Code:
print(str(raw_string))
->Target Code:
raw_string.decode('string_escape')
->Instruction:
convert a raw string `raw_string` into a normal string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a raw string `raw_string` into a normal string. [/INST] CODE: print(str(raw_string))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a raw string `raw_string` into a normal string. [/INST] CODE: raw_string.decode('string_escape')</s>
--


145=========
->Pred Code:
"""""".join(chr(int(b)) for b in raw_byte_string.split())
->Target Code:
raw_byte_string.decode('unicode_escape')
->Instruction:
convert a raw string `raw_byte_string` into a normal string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a raw string `raw_byte_string` into a normal string. [/INST] CODE: """""".join(chr(int(b)) for b in raw_byte_string.split())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a raw string `raw_byte_string` into a normal string. [/INST] CODE: raw_byte_string.decode('unicode_escape')</s>
--


146=========
->Pred Code:
[x[0] for x in re.split('(.)\\1+', s)]
->Target Code:
[m.group(0) for m in re.finditer('(\\d)\\1*', s)]
->Instruction:
split a string `s` with into all strings of repeated characters
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a string `s` with into all strings of repeated characters. [/INST] CODE: [x[0] for x in re.split('(.)\\1+', s)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a string `s` with into all strings of repeated characters. [/INST] CODE: [m.group(0) for m in re.finditer('(\\d)\\1*', s)]</s>
--


147=========
->Pred Code:
plt.scatter(np.random.randn(100), np.random.randn(100), s=40, color='none', edgecolor='black')
->Target Code:
plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')
->Instruction:
scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none. [/INST] CODE: plt.scatter(np.random.randn(100), np.random.randn(100), s=40, color='none', edgecolor='black')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none. [/INST] CODE: plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')</s>
--


148=========
->Pred Code:
plt.scatter(x, y, s=50, color='black', marker='o')
->Target Code:
plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')
->Instruction:
do a scatter plot with empty circles
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: do a scatter plot with empty circles. [/INST] CODE: plt.scatter(x, y, s=50, color='black', marker='o')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: do a scatter plot with empty circles. [/INST] CODE: plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')</s>
--


149=========
->Pred Code:
soup.body.find('div', id='main-content').clear()
->Target Code:
soup.find('div', id='main-content').decompose()
->Instruction:
remove a div with a id `main-content` using beautifulsoup
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove a div with a id `main-content` using beautifulsoup. [/INST] CODE: soup.body.find('div', id='main-content').clear()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove a div with a id `main-content` using beautifulsoup. [/INST] CODE: soup.find('div', id='main-content').decompose()</s>
--


150=========
->Pred Code:
df.loc[df['ids'].str.contains('ball')]
->Target Code:
df[df['ids'].str.contains('ball')]
->Instruction:
filter rows containing key word `ball` in column `ids`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: filter rows containing key word `ball` in column `ids`. [/INST] CODE: df.loc[df['ids'].str.contains('ball')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: filter rows containing key word `ball` in column `ids`. [/INST] CODE: df[df['ids'].str.contains('ball')]</s>
--


151=========
->Pred Code:
df.set_index('0', append=True)
->Target Code:
df.reset_index(level=0, inplace=True)
->Instruction:
convert index at level 0 into a column in dataframe `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert index at level 0 into a column in dataframe `df`. [/INST] CODE: df.set_index('0', append=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert index at level 0 into a column in dataframe `df`. [/INST] CODE: df.reset_index(level=0, inplace=True)</s>
--


152=========
->Pred Code:
df.insert(0, 'index1', df.index)
->Target Code:
df['index1'] = df.index
->Instruction:
Add indexes in a data frame `df` to a column `index1`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add indexes in a data frame `df` to a column `index1`. [/INST] CODE: df.insert(0, 'index1', df.index)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add indexes in a data frame `df` to a column `index1`. [/INST] CODE: df['index1'] = df.index</s>
--


153=========
->Pred Code:
df.reset_index(inplace=True)
->Target Code:
df.reset_index(level=['tick', 'obs'])
->Instruction:
convert pandas index in a dataframe to columns
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert pandas index in a dataframe to columns. [/INST] CODE: df.reset_index(inplace=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert pandas index in a dataframe to columns. [/INST] CODE: df.reset_index(level=['tick', 'obs'])</s>
--


154=========
->Pred Code:
b[(-1):(-3)-1:-1]
->Target Code:
[x[::-1] for x in b]
->Instruction:
Get reverse of list items from list 'b' using extended slicing
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get reverse of list items from list 'b' using extended slicing. [/INST] CODE: b[(-1):(-3)-1:-1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get reverse of list items from list 'b' using extended slicing. [/INST] CODE: [x[::-1] for x in b]</s>
--


155=========
->Pred Code:
print((x, y) for x, y in zip(a, b))
->Target Code:
np.array([zip(x, y) for x, y in zip(a, b)])
->Instruction:
join each element in array `a` with element at the same index in array `b` as a tuple
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: join each element in array `a` with element at the same index in array `b` as a tuple. [/INST] CODE: print((x, y) for x, y in zip(a, b))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: join each element in array `a` with element at the same index in array `b` as a tuple. [/INST] CODE: np.array([zip(x, y) for x, y in zip(a, b)])</s>
--


156=========
->Pred Code:
zip(*[list(x) for x in zip(a, b)])
->Target Code:
np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)
->Instruction:
zip two 2-d arrays `a` and `b`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: zip two 2-d arrays `a` and `b`. [/INST] CODE: zip(*[list(x) for x in zip(a, b)])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: zip two 2-d arrays `a` and `b`. [/INST] CODE: np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)</s>
--


157=========
->Pred Code:
print(',','.'.join(map(str, list_of_ints)))
->Target Code:
""",""".join([str(i) for i in list_of_ints])
->Instruction:
convert list `list_of_ints` into a comma separated string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list `list_of_ints` into a comma separated string. [/INST] CODE: print(',','.'.join(map(str, list_of_ints)))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list `list_of_ints` into a comma separated string. [/INST] CODE: """,""".join([str(i) for i in list_of_ints])</s>
--


158=========
->Pred Code:
r = requests.post(url, data=DATA, auth=HTTPBasicAuth(username, password))
->Target Code:
requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))
->Instruction:
Send a post request with raw data `DATA` and basic authentication with `username` and `password`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Send a post request with raw data `DATA` and basic authentication with `username` and `password`. [/INST] CODE: r = requests.post(url, data=DATA, auth=HTTPBasicAuth(username, password))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Send a post request with raw data `DATA` and basic authentication with `username` and `password`. [/INST] CODE: requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))</s>
--


159=========
->Pred Code:
re.findall('\\}', 'abcd}def}')[(-1)]
->Target Code:
'abcd}def}'.rfind('}')
->Instruction:
Find last occurrence of character '}' in string "abcd}def}"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find last occurrence of character '}' in string "abcd}def}". [/INST] CODE: re.findall('\\}', 'abcd}def}')[(-1)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find last occurrence of character '}' in string "abcd}def}". [/INST] CODE: 'abcd}def}'.rfind('}')</s>
--


160=========
->Pred Code:
{(i, j): (i * j) for i in range(1, 3) for j in range(1, 3)}
->Target Code:
print([item for item in [1, 2, 3]])
->Instruction:
Iterate ove list `[1, 2, 3]` using list comprehension
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Iterate ove list `[1, 2, 3]` using list comprehension. [/INST] CODE: {(i, j): (i * j) for i in range(1, 3) for j in range(1, 3)}
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Iterate ove list `[1, 2, 3]` using list comprehension. [/INST] CODE: print([item for item in [1, 2, 3]])</s>
--


161=========
->Pred Code:
[(i['x'], i['y']) for i in d]
->Target Code:
[(x['x'], x['y']) for x in d]
->Instruction:
extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples. [/INST] CODE: [(i['x'], i['y']) for i in d]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples. [/INST] CODE: [(x['x'], x['y']) for x in d]</s>
--


162=========
->Pred Code:
os.path.splitext('hemanth.txt')[0]
->Target Code:
print(os.path.splitext(os.path.basename('hemanth.txt'))[0])
->Instruction:
get the filename without the extension from file 'hemanth.txt'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the filename without the extension from file 'hemanth.txt'. [/INST] CODE: os.path.splitext('hemanth.txt')[0]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the filename without the extension from file 'hemanth.txt'. [/INST] CODE: print(os.path.splitext(os.path.basename('hemanth.txt'))[0])</s>
--


163=========
->Pred Code:
dict(zip(zip(x, x[1:]), zip(x[1:], x[2:])))
->Target Code:
dict(x[i:i + 2] for i in range(0, len(x), 2))
->Instruction:
create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it. [/INST] CODE: dict(zip(zip(x, x[1:]), zip(x[1:], x[2:])))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it. [/INST] CODE: dict(x[i:i + 2] for i in range(0, len(x), 2))</s>
--


164=========
->Pred Code:
[list(i) for i in zip(*[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']])]
->Target Code:
values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])
->Instruction:
create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`. [/INST] CODE: [list(i) for i in zip(*[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']])]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`. [/INST] CODE: values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])</s>
--


165=========
->Pred Code:
df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]
->Target Code:
df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]
->Instruction:
select rows in a dataframe `df` column 'closing_price' between two values 99 and 101
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: select rows in a dataframe `df` column 'closing_price' between two values 99 and 101. [/INST] CODE: df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: select rows in a dataframe `df` column 'closing_price' between two values 99 and 101. [/INST] CODE: df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]</s>
--


166=========
->Pred Code:
df.replace('\n', '<br>', regex=True)
->Target Code:
df.replace({'\n': '<br>'}, regex=True)
->Instruction:
replace all occurences of newlines `\n` with `<br>` in dataframe `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace all occurences of newlines `\n` with `<br>` in dataframe `df`. [/INST] CODE: df.replace('\n', '<br>', regex=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace all occurences of newlines `\n` with `<br>` in dataframe `df`. [/INST] CODE: df.replace({'\n': '<br>'}, regex=True)</s>
--


167=========
->Pred Code:
df.replace('\n', '<br>')
->Target Code:
df.replace({'\n': '<br>'}, regex=True)
->Instruction:
replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`. [/INST] CODE: df.replace('\n', '<br>')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`. [/INST] CODE: df.replace({'\n': '<br>'}, regex=True)</s>
--


168=========
->Pred Code:
[word[i:i + 2] for i in range(0, len(word), 2)]
->Target Code:
[(x + y) for x, y in zip(word, word[1:])]
->Instruction:
create a list containing each two adjacent letters in string `word` as its elements
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a list containing each two adjacent letters in string `word` as its elements. [/INST] CODE: [word[i:i + 2] for i in range(0, len(word), 2)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a list containing each two adjacent letters in string `word` as its elements. [/INST] CODE: [(x + y) for x, y in zip(word, word[1:])]</s>
--


169=========
->Pred Code:
print(list(map(lambda x, y: (x, y), word, word[1:])))
->Target Code:
list(map(lambda x, y: x + y, word[:-1], word[1:]))
->Instruction:
Get a list of pairs from a string `word` using lambda function
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a list of pairs from a string `word` using lambda function. [/INST] CODE: print(list(map(lambda x, y: (x, y), word, word[1:])))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a list of pairs from a string `word` using lambda function. [/INST] CODE: list(map(lambda x, y: x + y, word[:-1], word[1:]))</s>
--


170=========
->Pred Code:
re.findall('http://[^\\s]*', myString)
->Target Code:
print(re.findall('(https?://[^\\s]+)', myString))
->Instruction:
extract a url from a string `myString`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract a url from a string `myString`. [/INST] CODE: re.findall('http://[^\\s]*', myString)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract a url from a string `myString`. [/INST] CODE: print(re.findall('(https?://[^\\s]+)', myString))</s>
--


171=========
->Pred Code:
re.findall('http://[^\\s]*', myString)
->Target Code:
print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))
->Instruction:
extract a url from a string `myString`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract a url from a string `myString`. [/INST] CODE: re.findall('http://[^\\s]*', myString)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract a url from a string `myString`. [/INST] CODE: print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))</s>
--


172=========
->Pred Code:
re.sub('[^a-zA-Z0-9_]+', '', mystring, re.UNICODE)
->Target Code:
re.sub('[^A-Za-z0-9]+', '', mystring)
->Instruction:
remove all special characters, punctuation and spaces from a string `mystring` using regex
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove all special characters, punctuation and spaces from a string `mystring` using regex. [/INST] CODE: re.sub('[^a-zA-Z0-9_]+', '', mystring, re.UNICODE)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove all special characters, punctuation and spaces from a string `mystring` using regex. [/INST] CODE: re.sub('[^A-Za-z0-9]+', '', mystring)</s>
--


173=========
->Pred Code:
pd.date_range('2016-01-01', periods=13, freq='M2MFRI')
->Target Code:
pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)
->Instruction:
create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'. [/INST] CODE: pd.date_range('2016-01-01', periods=13, freq='M2MFRI')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'. [/INST] CODE: pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)</s>
--


174=========
->Pred Code:
matrix = [([0, 0], [0, 0]), ([0, 0], [0, 0]), ([0, 0], [0, 0])]
->Target Code:
matrix = [[a, b], [c, d], [e, f]]
->Instruction:
Create multidimensional array `matrix` with 3 rows and 2 columns in python
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create multidimensional array `matrix` with 3 rows and 2 columns in python. [/INST] CODE: matrix = [([0, 0], [0, 0]), ([0, 0], [0, 0]), ([0, 0], [0, 0])]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create multidimensional array `matrix` with 3 rows and 2 columns in python. [/INST] CODE: matrix = [[a, b], [c, d], [e, f]]</s>
--


175=========
->Pred Code:
name.replace(' ', '_')
->Target Code:
mystring.replace(' ', '_')
->Instruction:
replace spaces with underscore
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace spaces with underscore. [/INST] CODE: name.replace(' ', '_')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace spaces with underscore. [/INST] CODE: mystring.replace(' ', '_')</s>
--


176=========
->Pred Code:
os.path.join(os.path.dirname(__file__), 'mydir/myfile.txt')
->Target Code:
os.path.abspath('mydir/myfile.txt')
->Instruction:
get an absolute file path of file 'mydir/myfile.txt'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get an absolute file path of file 'mydir/myfile.txt'. [/INST] CODE: os.path.join(os.path.dirname(__file__), 'mydir/myfile.txt')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get an absolute file path of file 'mydir/myfile.txt'. [/INST] CODE: os.path.abspath('mydir/myfile.txt')</s>
--


177=========
->Pred Code:
my_string.split()
->Target Code:
""" """.join(my_string.split())
->Instruction:
split string `my_string` on white spaces
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `my_string` on white spaces. [/INST] CODE: my_string.split()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `my_string` on white spaces. [/INST] CODE: """ """.join(my_string.split())</s>
--


178=========
->Pred Code:
os.path.splitext(filename)[0]
->Target Code:
os.path.splitext(filename)[0]
->Instruction:
get filename without extension from file `filename`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get filename without extension from file `filename`. [/INST] CODE: os.path.splitext(filename)[0]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get filename without extension from file `filename`. [/INST] CODE: os.path.splitext(filename)[0]</s>
--


179=========
->Pred Code:
[sum(l[i:]) for i in range(len(l))]
->Target Code:
[sum(l[:i]) for i, _ in enumerate(l)]
->Instruction:
get a list containing the sum of each element `i` in list `l` plus the previous elements
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a list containing the sum of each element `i` in list `l` plus the previous elements. [/INST] CODE: [sum(l[i:]) for i in range(len(l))]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a list containing the sum of each element `i` in list `l` plus the previous elements. [/INST] CODE: [sum(l[:i]) for i, _ in enumerate(l)]</s>
--


180=========
->Pred Code:
"""Docs/src/Scripts/temp""".split('/', 1)
->Target Code:
"""Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')
->Instruction:
split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result. [/INST] CODE: """Docs/src/Scripts/temp""".split('/', 1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result. [/INST] CODE: """Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')</s>
--


181=========
->Pred Code:
np.random.shuffle(r.T).T
->Target Code:
np.random.shuffle(np.transpose(r))
->Instruction:
shuffle columns of an numpy array 'r'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: shuffle columns of an numpy array 'r'. [/INST] CODE: np.random.shuffle(r.T).T
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: shuffle columns of an numpy array 'r'. [/INST] CODE: np.random.shuffle(np.transpose(r))</s>
--


182=========
->Pred Code:
df['D'] = df['B'].copy()
->Target Code:
df['D'] = df['B']
->Instruction:
copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'. [/INST] CODE: df['D'] = df['B'].copy()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'. [/INST] CODE: df['D'] = df['B']</s>
--


183=========
->Pred Code:
print(next(iter(item['data'].values() for item in j if item['B'] == 1)))
->Target Code:
list(data['A']['B'].values())[0]['maindata'][0]['Info']
->Instruction:
find a value within nested json 'data' where the key inside another key 'B' is unknown.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find a value within nested json 'data' where the key inside another key 'B' is unknown.. [/INST] CODE: print(next(iter(item['data'].values() for item in j if item['B'] == 1)))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find a value within nested json 'data' where the key inside another key 'B' is unknown.. [/INST] CODE: list(data['A']['B'].values())[0]['maindata'][0]['Info']</s>
--


184=========
->Pred Code:
all(predicate(c) for c in string)
->Target Code:
all(predicate(x) for x in string)
->Instruction:
check characters of string `string` are true predication of function `predicate`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check characters of string `string` are true predication of function `predicate`. [/INST] CODE: all(predicate(c) for c in string)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check characters of string `string` are true predication of function `predicate`. [/INST] CODE: all(predicate(x) for x in string)</s>
--


185=========
->Pred Code:
len(os.listdir(os.getcwd()))
->Target Code:
os.statvfs('/').f_files - os.statvfs('/').f_ffree
->Instruction:
determine number of files on a drive with python
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine number of files on a drive with python. [/INST] CODE: len(os.listdir(os.getcwd()))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine number of files on a drive with python. [/INST] CODE: os.statvfs('/').f_files - os.statvfs('/').f_ffree</s>
--


186=========
->Pred Code:
user_list = [int(x) for x in user_input.split()]
->Target Code:
user_list = [int(number) for number in user_input.split(',')]
->Instruction:
convert string `user_input` into a list of integers `user_list`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert string `user_input` into a list of integers `user_list`. [/INST] CODE: user_list = [int(x) for x in user_input.split()]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert string `user_input` into a list of integers `user_list`. [/INST] CODE: user_list = [int(number) for number in user_input.split(',')]</s>
--


187=========
->Pred Code:
[int(i) for i in user.split(',')]
->Target Code:
[int(s) for s in user.split(',')]
->Instruction:
Get a list of integers by splitting  a string `user` with comma
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a list of integers by splitting  a string `user` with comma. [/INST] CODE: [int(i) for i in user.split(',')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a list of integers by splitting  a string `user` with comma. [/INST] CODE: [int(s) for s in user.split(',')]</s>
--


188=========
->Pred Code:
ut.sort(key=cmpfun, reverse=True)
->Target Code:
ut.sort(key=cmpfun, reverse=True)
->Instruction:
sort a list of objects `ut`, based on a function `cmpfun` in descending order
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of objects `ut`, based on a function `cmpfun` in descending order. [/INST] CODE: ut.sort(key=cmpfun, reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of objects `ut`, based on a function `cmpfun` in descending order. [/INST] CODE: ut.sort(key=cmpfun, reverse=True)</s>
--


189=========
->Pred Code:
ut.sort(key=lambda x: x['count'], reverse=True)
->Target Code:
ut.sort(key=lambda x: x.count, reverse=True)
->Instruction:
reverse list `ut` based on the `count` attribute of each object
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse list `ut` based on the `count` attribute of each object. [/INST] CODE: ut.sort(key=lambda x: x['count'], reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse list `ut` based on the `count` attribute of each object. [/INST] CODE: ut.sort(key=lambda x: x.count, reverse=True)</s>
--


190=========
->Pred Code:
ut.sort(key=lambda x: x.count, reverse=True)
->Target Code:
ut.sort(key=lambda x: x.count, reverse=True)
->Instruction:
sort a list of objects `ut` in reverse order by their `count` property
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of objects `ut` in reverse order by their `count` property. [/INST] CODE: ut.sort(key=lambda x: x.count, reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of objects `ut` in reverse order by their `count` property. [/INST] CODE: ut.sort(key=lambda x: x.count, reverse=True)</s>
--


191=========
->Pred Code:
driver.find_element_by_css_selector('button[onclick*="Send"]').click()
->Target Code:
driver.find_element_by_partial_link_text('Send').click()
->Instruction:
click a href button 'Send' with selenium
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: click a href button 'Send' with selenium. [/INST] CODE: driver.find_element_by_css_selector('button[onclick*="Send"]').click()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: click a href button 'Send' with selenium. [/INST] CODE: driver.find_element_by_partial_link_text('Send').click()</s>
--


192=========
->Pred Code:
driver.find_element_by_partial_link_text('Send InMail').click()
->Target Code:
driver.findElement(By.linkText('Send InMail')).click()
->Instruction:
click a href button having text `Send InMail` with selenium
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: click a href button having text `Send InMail` with selenium. [/INST] CODE: driver.find_element_by_partial_link_text('Send InMail').click()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: click a href button having text `Send InMail` with selenium. [/INST] CODE: driver.findElement(By.linkText('Send InMail')).click()</s>
--


193=========
->Pred Code:
driver.find_element_by_link_text('Send InMail').click()
->Target Code:
driver.find_element_by_link_text('Send InMail').click()
->Instruction:
click a href button with text 'Send InMail' with selenium
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: click a href button with text 'Send InMail' with selenium. [/INST] CODE: driver.find_element_by_link_text('Send InMail').click()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: click a href button with text 'Send InMail' with selenium. [/INST] CODE: driver.find_element_by_link_text('Send InMail').click()</s>
--


194=========
->Pred Code:
'ME' + str(i)
->Target Code:
'ME' + str(i)
->Instruction:
cast an int `i` to a string and concat to string 'ME'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: cast an int `i` to a string and concat to string 'ME'. [/INST] CODE: 'ME' + str(i)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: cast an int `i` to a string and concat to string 'ME'. [/INST] CODE: 'ME' + str(i)</s>
--


195=========
->Pred Code:
with open('infile', 'r') as inf, open('outfile', 'w') as outf:
    outf.write('#test firstline\n')
    outf.write(inf.read())
->Target Code:
open('outfile', 'w').write('#test firstline\n' + open('infile').read())
->Instruction:
prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'. [/INST] CODE: with open('infile', 'r') as inf, open('outfile', 'w') as outf:
    outf.write('#test firstline\n')
    outf.write(inf.read())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'. [/INST] CODE: open('outfile', 'w').write('#test firstline\n' + open('infile').read())</s>
--


196=========
->Pred Code:
sorted(l, key=lambda x: len(x[1]))
->Target Code:
l.sort(key=lambda t: len(t[1]), reverse=True)
->Instruction:
sort a list `l` by length of value in tuple
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list `l` by length of value in tuple. [/INST] CODE: sorted(l, key=lambda x: len(x[1]))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list `l` by length of value in tuple. [/INST] CODE: l.sort(key=lambda t: len(t[1]), reverse=True)</s>
--


197=========
->Pred Code:
re.split('\\b\\w+d\\b', s)
->Target Code:
re.findall('\\b(\\w+)d\\b', s)
->Instruction:
split string `s` by words that ends with 'd'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `s` by words that ends with 'd'. [/INST] CODE: re.split('\\b\\w+d\\b', s)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `s` by words that ends with 'd'. [/INST] CODE: re.findall('\\b(\\w+)d\\b', s)</s>
--


198=========
->Pred Code:
re.match('ba[rzd]', 'foobarrrr')
->Target Code:
bool(re.search('ba[rzd]', 'foobarrrr'))
->Instruction:
return `True` if string `foobarrrr` contains regex `ba[rzd]`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: return `True` if string `foobarrrr` contains regex `ba[rzd]`. [/INST] CODE: re.match('ba[rzd]', 'foobarrrr')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: return `True` if string `foobarrrr` contains regex `ba[rzd]`. [/INST] CODE: bool(re.search('ba[rzd]', 'foobarrrr'))</s>
--


199=========
->Pred Code:
t = list(dict.fromkeys(t))
->Target Code:
list(set(t))
->Instruction:
Removing duplicates in list `t`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Removing duplicates in list `t`. [/INST] CODE: t = list(dict.fromkeys(t))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Removing duplicates in list `t`. [/INST] CODE: list(set(t))</s>
--


200=========
->Pred Code:
unique_items = list(set(source_list))
->Target Code:
list(set(source_list))
->Instruction:
Removing duplicates in list `source_list`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Removing duplicates in list `source_list`. [/INST] CODE: unique_items = list(set(source_list))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Removing duplicates in list `source_list`. [/INST] CODE: list(set(source_list))</s>
--


201=========
->Pred Code:
list(set(list(abracadabra)))
->Target Code:
list(OrderedDict.fromkeys('abracadabra'))
->Instruction:
Removing duplicates in list `abracadabra`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Removing duplicates in list `abracadabra`. [/INST] CODE: list(set(list(abracadabra)))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Removing duplicates in list `abracadabra`. [/INST] CODE: list(OrderedDict.fromkeys('abracadabra'))</s>
--


202=========
->Pred Code:
a.tolist()
->Target Code:
numpy.array(a).reshape(-1).tolist()
->Instruction:
Convert array `a` into a list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert array `a` into a list. [/INST] CODE: a.tolist()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert array `a` into a list. [/INST] CODE: numpy.array(a).reshape(-1).tolist()</s>
--


203=========
->Pred Code:
a[0].tolist()
->Target Code:
numpy.array(a)[0].tolist()
->Instruction:
Convert the first row of numpy matrix `a` to a list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert the first row of numpy matrix `a` to a list. [/INST] CODE: a[0].tolist()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert the first row of numpy matrix `a` to a list. [/INST] CODE: numpy.array(a)[0].tolist()</s>
--


204=========
->Pred Code:
print(soup.find('td', text='Address:').find_next_sibling().text)
->Target Code:
print(soup.find(text='Address:').findNext('td').contents[0])
->Instruction:
In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`. [/INST] CODE: print(soup.find('td', text='Address:').find_next_sibling().text)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`. [/INST] CODE: print(soup.find(text='Address:').findNext('td').contents[0])</s>
--


205=========
->Pred Code:
['@'.join(e) for e in l]
->Target Code:
""" """.join([('%d@%d' % t) for t in l])
->Instruction:
convert elements of each tuple in list `l` into a string  separated by character `@`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert elements of each tuple in list `l` into a string  separated by character `@`. [/INST] CODE: ['@'.join(e) for e in l]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert elements of each tuple in list `l` into a string  separated by character `@`. [/INST] CODE: """ """.join([('%d@%d' % t) for t in l])</s>
--


206=========
->Pred Code:
"""@""".join(map(str, l))
->Target Code:
""" """.join([('%d@%d' % (t[0], t[1])) for t in l])
->Instruction:
convert each tuple in list `l` to a string with '@' separating the tuples' elements
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert each tuple in list `l` to a string with '@' separating the tuples' elements. [/INST] CODE: """@""".join(map(str, l))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert each tuple in list `l` to a string with '@' separating the tuples' elements. [/INST] CODE: """ """.join([('%d@%d' % (t[0], t[1])) for t in l])</s>
--


207=========
->Pred Code:
driver.page_source
->Target Code:
driver.execute_script('return document.documentElement.outerHTML;')
->Instruction:
get the html from the current web page of a Selenium driver
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the html from the current web page of a Selenium driver. [/INST] CODE: driver.page_source
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the html from the current web page of a Selenium driver. [/INST] CODE: driver.execute_script('return document.documentElement.outerHTML;')</s>
--


208=========
->Pred Code:
[i for i in teststr if re.match('\\d+[xX]', i)]
->Target Code:
[i for i in teststr if re.search('\\d+[xX]', i)]
->Instruction:
Get all matches with regex pattern `\\d+[xX]` in list of string `teststr`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get all matches with regex pattern `\\d+[xX]` in list of string `teststr`. [/INST] CODE: [i for i in teststr if re.match('\\d+[xX]', i)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get all matches with regex pattern `\\d+[xX]` in list of string `teststr`. [/INST] CODE: [i for i in teststr if re.search('\\d+[xX]', i)]</s>
--


209=========
->Pred Code:
df.loc[(df.B > 50) & (df.C == 900), 'A']
->Target Code:
df['A'][(df['B'] > 50) & (df['C'] == 900)]
->Instruction:
select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`. [/INST] CODE: df.loc[(df.B > 50) & (df.C == 900), 'A']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`. [/INST] CODE: df['A'][(df['B'] > 50) & (df['C'] == 900)]</s>
--


210=========
->Pred Code:
sorted(list(o.items()), key=lambda k_v: k_v[1])
->Target Code:
sorted(o.items())
->Instruction:
Sort dictionary `o` in ascending order based on its keys and items
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort dictionary `o` in ascending order based on its keys and items. [/INST] CODE: sorted(list(o.items()), key=lambda k_v: k_v[1])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort dictionary `o` in ascending order based on its keys and items. [/INST] CODE: sorted(o.items())</s>
--


211=========
->Pred Code:
sorted(d, key=d.get)
->Target Code:
sorted(d)
->Instruction:
get sorted list of keys of dict `d`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get sorted list of keys of dict `d`. [/INST] CODE: sorted(d, key=d.get)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get sorted list of keys of dict `d`. [/INST] CODE: sorted(d)</s>
--


212=========
->Pred Code:
int('1')
->Target Code:
int('1')
->Instruction:
convert string "1" into integer
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert string "1" into integer. [/INST] CODE: int('1')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert string "1" into integer. [/INST] CODE: int('1')</s>
--


213=========
->Pred Code:
int()
->Target Code:
int()
->Instruction:
function to convert strings into integers
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: function to convert strings into integers. [/INST] CODE: int()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: function to convert strings into integers. [/INST] CODE: int()</s>
--


214=========
->Pred Code:
T1 = [(x[0], tuple(map(int, x[1:]))) for x in T1]
->Target Code:
T2 = [map(int, x) for x in T1]
->Instruction:
convert items in `T1` to integers
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert items in `T1` to integers. [/INST] CODE: T1 = [(x[0], tuple(map(int, x[1:]))) for x in T1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert items in `T1` to integers. [/INST] CODE: T2 = [map(int, x) for x in T1]</s>
--


215=========
->Pred Code:
subprocess.call('./test.sh', shell=True)
->Target Code:
subprocess.call(['./test.sh'])
->Instruction:
call a shell script `./test.sh` using subprocess
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: call a shell script `./test.sh` using subprocess. [/INST] CODE: subprocess.call('./test.sh', shell=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: call a shell script `./test.sh` using subprocess. [/INST] CODE: subprocess.call(['./test.sh'])</s>
--


216=========
->Pred Code:
subprocess.call('notepad')
->Target Code:
subprocess.call(['notepad'])
->Instruction:
call a shell script `notepad` using subprocess
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: call a shell script `notepad` using subprocess. [/INST] CODE: subprocess.call('notepad')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: call a shell script `notepad` using subprocess. [/INST] CODE: subprocess.call(['notepad'])</s>
--


217=========
->Pred Code:
[j for i in zip(l1, l2) for j in i]
->Target Code:
[val for pair in zip(l1, l2) for val in pair]
->Instruction:
combine lists `l1` and `l2`  by alternating their elements
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine lists `l1` and `l2`  by alternating their elements. [/INST] CODE: [j for i in zip(l1, l2) for j in i]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: combine lists `l1` and `l2`  by alternating their elements. [/INST] CODE: [val for pair in zip(l1, l2) for val in pair]</s>
--


218=========
->Pred Code:
urllib.parse.quote('data to be encoded')
->Target Code:
encoded = base64.b64encode('data to be encoded')
->Instruction:
encode string 'data to be encoded'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode string 'data to be encoded'. [/INST] CODE: urllib.parse.quote('data to be encoded')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode string 'data to be encoded'. [/INST] CODE: encoded = base64.b64encode('data to be encoded')</s>
--


219=========
->Pred Code:
data.encode('ascii', 'ignore')
->Target Code:
encoded = 'data to be encoded'.encode('ascii')
->Instruction:
encode a string `data to be encoded` to `ascii` encoding
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode a string `data to be encoded` to `ascii` encoding. [/INST] CODE: data.encode('ascii', 'ignore')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode a string `data to be encoded` to `ascii` encoding. [/INST] CODE: encoded = 'data to be encoded'.encode('ascii')</s>
--


220=========
->Pred Code:
pandas.read_csv('text.txt', sep='\t')
->Target Code:
lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))
->Instruction:
parse tab-delimited CSV file 'text.txt' into a list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: parse tab-delimited CSV file 'text.txt' into a list. [/INST] CODE: pandas.read_csv('text.txt', sep='\t')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: parse tab-delimited CSV file 'text.txt' into a list. [/INST] CODE: lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))</s>
--


221=========
->Pred Code:
getattr(my_object, my_str)
->Target Code:
getattr(my_object, my_str)
->Instruction:
Get attribute `my_str` of object `my_object`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get attribute `my_str` of object `my_object`. [/INST] CODE: getattr(my_object, my_str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get attribute `my_str` of object `my_object`. [/INST] CODE: getattr(my_object, my_str)</s>
--


222=========
->Pred Code:
{i['key']: i for i in LD}
->Target Code:
print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))
->Instruction:
group a list of dicts `LD` into one dict by key
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: group a list of dicts `LD` into one dict by key. [/INST] CODE: {i['key']: i for i in LD}
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: group a list of dicts `LD` into one dict by key. [/INST] CODE: print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))</s>
--


223=========
->Pred Code:
ast.literal_eval("{'code1':1,'code2':1}")
->Target Code:
d = ast.literal_eval("{'code1':1,'code2':1}")
->Instruction:
convert unicode string u"{'code1':1,'code2':1}" into dictionary
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert unicode string u"{'code1':1,'code2':1}" into dictionary. [/INST] CODE: ast.literal_eval("{'code1':1,'code2':1}")
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert unicode string u"{'code1':1,'code2':1}" into dictionary. [/INST] CODE: d = ast.literal_eval("{'code1':1,'code2':1}")</s>
--


224=========
->Pred Code:
re.findall('\\$([^ ]+)|\\$([^$])', mystring)
->Target Code:
[word for word in mystring.split() if word.startswith('$')]
->Instruction:
find all words in a string `mystring` that start with the `$` sign
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find all words in a string `mystring` that start with the `$` sign. [/INST] CODE: re.findall('\\$([^ ]+)|\\$([^$])', mystring)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find all words in a string `mystring` that start with the `$` sign. [/INST] CODE: [word for word in mystring.split() if word.startswith('$')]</s>
--


225=========
->Pred Code:
re.sub('<a.*?</a>', '', text)
->Target Code:
text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)
->Instruction:
remove any url within string `text`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove any url within string `text`. [/INST] CODE: re.sub('<a.*?</a>', '', text)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove any url within string `text`. [/INST] CODE: text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)</s>
--


226=========
->Pred Code:
B = np.zeros(A.shape)
B[np.in1d(A, (1, 3, 4))] = 1
->Target Code:
np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)
->Instruction:
replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros. [/INST] CODE: B = np.zeros(A.shape)
B[np.in1d(A, (1, 3, 4))] = 1
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros. [/INST] CODE: np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)</s>
--


227=========
->Pred Code:
a = np.mean(a, axis=0)
->Target Code:
np.mean(a, axis=1)
->Instruction:
calculate mean across dimension in a 2d array `a`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: calculate mean across dimension in a 2d array `a`. [/INST] CODE: a = np.mean(a, axis=0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: calculate mean across dimension in a 2d array `a`. [/INST] CODE: np.mean(a, axis=1)</s>
--


228=========
->Pred Code:
subprocess.call(['Rscript', '/pathto/MyrScript.r'])
->Target Code:
subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])
->Instruction:
running r script '/pathto/MyrScript.r' from python
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: running r script '/pathto/MyrScript.r' from python. [/INST] CODE: subprocess.call(['Rscript', '/pathto/MyrScript.r'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: running r script '/pathto/MyrScript.r' from python. [/INST] CODE: subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])</s>
--


229=========
->Pred Code:
os.system('/usr/bin/Rscript --vanilla /pathto/MyrScript.r')
->Target Code:
subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)
->Instruction:
run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'. [/INST] CODE: os.system('/usr/bin/Rscript --vanilla /pathto/MyrScript.r')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'. [/INST] CODE: subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)</s>
--


230=========
->Pred Code:
writer.writeheader()
->Target Code:
writer.writeheader()
->Instruction:
add a header to a csv file
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add a header to a csv file. [/INST] CODE: writer.writeheader()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add a header to a csv file. [/INST] CODE: writer.writeheader()</s>
--


231=========
->Pred Code:
df.fillna(df.mean())
->Target Code:
df.fillna(df.mean(axis=1), axis=1)
->Instruction:
replacing nan in the dataframe `df` with row average
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replacing nan in the dataframe `df` with row average. [/INST] CODE: df.fillna(df.mean())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replacing nan in the dataframe `df` with row average. [/INST] CODE: df.fillna(df.mean(axis=1), axis=1)</s>
--


232=========
->Pred Code:
datetime.datetime.fromtimestamp(1347517370).strftime('%Y-%m-%d %H:%M:%S')
->Target Code:
time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))
->Instruction:
Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'. [/INST] CODE: datetime.datetime.fromtimestamp(1347517370).strftime('%Y-%m-%d %H:%M:%S')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'. [/INST] CODE: time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))</s>
--


233=========
->Pred Code:
super(Derived, self).do()
->Target Code:
super(Derived, cls).do(a)
->Instruction:
Call a base class's class method `do` from derived class `Derived`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Call a base class's class method `do` from derived class `Derived`. [/INST] CODE: super(Derived, self).do()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Call a base class's class method `do` from derived class `Derived`. [/INST] CODE: super(Derived, cls).do(a)</s>
--


234=========
->Pred Code:
a[np.all(a == [0, 1], axis=1)]
->Target Code:
a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]
->Instruction:
selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1. [/INST] CODE: a[np.all(a == [0, 1], axis=1)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1. [/INST] CODE: a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]</s>
--


235=========
->Pred Code:
re.split('\\s+', 'foo bar')
->Target Code:
re.split(' +', 'hello world sample text')
->Instruction:
separate words delimited by one or more spaces into a list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: separate words delimited by one or more spaces into a list. [/INST] CODE: re.split('\\s+', 'foo bar')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: separate words delimited by one or more spaces into a list. [/INST] CODE: re.split(' +', 'hello world sample text')</s>
--


236=========
->Pred Code:
len(max(words, key=len))
->Target Code:
len(max(words, key=len))
->Instruction:
length of longest element in list `words`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: length of longest element in list `words`. [/INST] CODE: len(max(words, key=len))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: length of longest element in list `words`. [/INST] CODE: len(max(words, key=len))</s>
--


237=========
->Pred Code:
result[0]['from_user']
->Target Code:
result[0]['from_user']
->Instruction:
get the value associated with unicode key 'from_user' of first dictionary in list `result`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the value associated with unicode key 'from_user' of first dictionary in list `result`. [/INST] CODE: result[0]['from_user']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the value associated with unicode key 'from_user' of first dictionary in list `result`. [/INST] CODE: result[0]['from_user']</s>
--


238=========
->Pred Code:
[line.rstrip('\n') for line in open('File.txt')]
->Target Code:
[line.split() for line in open('File.txt')]
->Instruction:
Retrieve each line from a file 'File.txt' as a list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Retrieve each line from a file 'File.txt' as a list. [/INST] CODE: [line.rstrip('\n') for line in open('File.txt')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Retrieve each line from a file 'File.txt' as a list. [/INST] CODE: [line.split() for line in open('File.txt')]</s>
--


239=========
->Pred Code:
dict((v, k) for k, v in a.items())
->Target Code:
res = dict((v, k) for k, v in a.items())
->Instruction:
swap keys with values in a dictionary `a`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: swap keys with values in a dictionary `a`. [/INST] CODE: dict((v, k) for k, v in a.items())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: swap keys with values in a dictionary `a`. [/INST] CODE: res = dict((v, k) for k, v in a.items())</s>
--


240=========
->Pred Code:
f = open('path/to/FILE_NAME.ext', 'w')
->Target Code:
new_file = open('path/to/FILE_NAME.ext', 'w')
->Instruction:
Open a file `path/to/FILE_NAME.ext` in write mode
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Open a file `path/to/FILE_NAME.ext` in write mode. [/INST] CODE: f = open('path/to/FILE_NAME.ext', 'w')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Open a file `path/to/FILE_NAME.ext` in write mode. [/INST] CODE: new_file = open('path/to/FILE_NAME.ext', 'w')</s>
--


241=========
->Pred Code:
any(k.startswith('EMP$$') for k in dict1)
->Target Code:
any(key.startswith('EMP$$') for key in dict1)
->Instruction:
Check if any key in the dictionary `dict1` starts with the string `EMP$$`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Check if any key in the dictionary `dict1` starts with the string `EMP$$`. [/INST] CODE: any(k.startswith('EMP$$') for k in dict1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Check if any key in the dictionary `dict1` starts with the string `EMP$$`. [/INST] CODE: any(key.startswith('EMP$$') for key in dict1)</s>
--


242=========
->Pred Code:
[dict1[k] for k in list(dict1.keys()) if k.startswith('EMP$$')]
->Target Code:
[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]
->Instruction:
create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'. [/INST] CODE: [dict1[k] for k in list(dict1.keys()) if k.startswith('EMP$$')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'. [/INST] CODE: [value for key, value in list(dict1.items()) if key.startswith('EMP$$')]</s>
--


243=========
->Pred Code:
df = pd.DataFrame({'email': sf.index, 'list': sf.values})
->Target Code:
pd.DataFrame({'email': sf.index, 'list': sf.values})
->Instruction:
convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`. [/INST] CODE: df = pd.DataFrame({'email': sf.index, 'list': sf.values})
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`. [/INST] CODE: pd.DataFrame({'email': sf.index, 'list': sf.values})</s>
--


244=========
->Pred Code:
print('\t'.join(str(e) for e in list))
->Target Code:
print('\t'.join(map(str, list)))
->Instruction:
print elements of list `list` seperated by tabs `\t`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print elements of list `list` seperated by tabs `\t`. [/INST] CODE: print('\t'.join(str(e) for e in list))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print elements of list `list` seperated by tabs `\t`. [/INST] CODE: print('\t'.join(map(str, list)))</s>
--


245=========
->Pred Code:
print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('utf8'))
->Target Code:
print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))
->Instruction:
print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8. [/INST] CODE: print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('utf8'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8. [/INST] CODE: print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))</s>
--


246=========
->Pred Code:
Sopet\xc3\xb3n.encode('utf8')
->Target Code:
'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')
->Instruction:
Encode a latin character in string `Sopet\xc3\xb3n` properly
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Encode a latin character in string `Sopet\xc3\xb3n` properly. [/INST] CODE: Sopet\xc3\xb3n.encode('utf8')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Encode a latin character in string `Sopet\xc3\xb3n` properly. [/INST] CODE: 'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')</s>
--


247=========
->Pred Code:
image = image.resize((x, y), Image.ANTIALIAS)
->Target Code:
image = image.resize((x, y), Image.ANTIALIAS)
->Instruction:
resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`. [/INST] CODE: image = image.resize((x, y), Image.ANTIALIAS)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`. [/INST] CODE: image = image.resize((x, y), Image.ANTIALIAS)</s>
--


248=========
->Pred Code:
re.findall('(?<=[a-z])n(?=[a-z]|$)', s)
->Target Code:
re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)
->Instruction:
regex, find "n"s only in the middle of string `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: regex, find "n"s only in the middle of string `s`. [/INST] CODE: re.findall('(?<=[a-z])n(?=[a-z]|$)', s)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: regex, find "n"s only in the middle of string `s`. [/INST] CODE: re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)</s>
--


249=========
->Pred Code:
print('%.2f' % (1/3*100))
->Target Code:
print('{0:.0f}%'.format(1.0 / 3 * 100))
->Instruction:
display the float `1/3*100` as a percentage
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: display the float `1/3*100` as a percentage. [/INST] CODE: print('%.2f' % (1/3*100))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: display the float `1/3*100` as a percentage. [/INST] CODE: print('{0:.0f}%'.format(1.0 / 3 * 100))</s>
--


250=========
->Pred Code:
mylist.sort(key=lambda x: x['title'])
->Target Code:
mylist.sort(key=lambda x: x['title'])
->Instruction:
sort a list of dictionary `mylist` by the key `title`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionary `mylist` by the key `title`. [/INST] CODE: mylist.sort(key=lambda x: x['title'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionary `mylist` by the key `title`. [/INST] CODE: mylist.sort(key=lambda x: x['title'])</s>
--


251=========
->Pred Code:
sorted(l, key=lambda x: x['title'])
->Target Code:
l.sort(key=lambda x: x['title'])
->Instruction:
sort a list `l` of dicts by dict value 'title'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list `l` of dicts by dict value 'title'. [/INST] CODE: sorted(l, key=lambda x: x['title'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list `l` of dicts by dict value 'title'. [/INST] CODE: l.sort(key=lambda x: x['title'])</s>
--


252=========
->Pred Code:
sorted(data, key=lambda x: (x['title'], x['title_url'], x['id']))
->Target Code:
l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))
->Instruction:
sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.. [/INST] CODE: sorted(data, key=lambda x: (x['title'], x['title_url'], x['id']))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.. [/INST] CODE: l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))</s>
--


253=========
->Pred Code:
[(abs(x - y) for x in l1 for y in l2)][:10]
->Target Code:
heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
->Instruction:
find 10 largest differences between each respective elements of list `l1` and list `l2`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find 10 largest differences between each respective elements of list `l1` and list `l2`. [/INST] CODE: [(abs(x - y) for x in l1 for y in l2)][:10]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find 10 largest differences between each respective elements of list `l1` and list `l2`. [/INST] CODE: heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))</s>
--


254=========
->Pred Code:
soup.findAll('span', class_='starGryB sp')
->Target Code:
soup.find_all('span', {'class': 'starGryB sp'})
->Instruction:
BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'. [/INST] CODE: soup.findAll('span', class_='starGryB sp')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'. [/INST] CODE: soup.find_all('span', {'class': 'starGryB sp'})</s>
--


255=========
->Pred Code:
df.to_sql('test', engine, schema='a_schema', if_exists='append', index=False)
->Target Code:
df.to_sql('test', engine, schema='a_schema')
->Instruction:
write records in dataframe `df` to table 'test' in schema 'a_schema'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write records in dataframe `df` to table 'test' in schema 'a_schema'. [/INST] CODE: df.to_sql('test', engine, schema='a_schema', if_exists='append', index=False)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write records in dataframe `df` to table 'test' in schema 'a_schema'. [/INST] CODE: df.to_sql('test', engine, schema='a_schema')</s>
--


256=========
->Pred Code:
re.findall('\\[(.*?)\\]', s)
->Target Code:
brackets = re.sub('[^(){}[\\]]', '', s)
->Instruction:
Extract brackets from string `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Extract brackets from string `s`. [/INST] CODE: re.findall('\\[(.*?)\\]', s)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Extract brackets from string `s`. [/INST] CODE: brackets = re.sub('[^(){}[\\]]', '', s)</s>
--


257=========
->Pred Code:
[x for x in set(L)]
->Target Code:
list(dict((x[0], x) for x in L).values())
->Instruction:
remove duplicate elements from list 'L'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove duplicate elements from list 'L'. [/INST] CODE: [x for x in set(L)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove duplicate elements from list 'L'. [/INST] CODE: list(dict((x[0], x) for x in L).values())</s>
--


258=========
->Pred Code:
"""""".join(line.rstrip() for line in file)
->Target Code:
[line.rstrip('\n') for line in file]
->Instruction:
read a file `file` without newlines
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: read a file `file` without newlines. [/INST] CODE: """""".join(line.rstrip() for line in file)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: read a file `file` without newlines. [/INST] CODE: [line.rstrip('\n') for line in file]</s>
--


259=========
->Pred Code:
testlist.index(1)
->Target Code:
[i for (i, x) in enumerate(testlist) if (x == 1)]
->Instruction:
get the position of item 1 in `testlist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: testlist.index(1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: [i for (i, x) in enumerate(testlist) if (x == 1)]</s>
--


260=========
->Pred Code:
testlist.index(1)
->Target Code:
[i for (i, x) in enumerate(testlist) if (x == 1)]
->Instruction:
get the position of item 1 in `testlist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: testlist.index(1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: [i for (i, x) in enumerate(testlist) if (x == 1)]</s>
--


261=========
->Pred Code:
testlist.index(1)
->Target Code:
for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:
    pass
->Instruction:
get the position of item 1 in `testlist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: testlist.index(1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:
    pass</s>
--


262=========
->Pred Code:
testlist.index(1)
->Target Code:
for i in (i for (i, x) in enumerate(testlist) if (x == 1)):
    pass
->Instruction:
get the position of item 1 in `testlist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: testlist.index(1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: for i in (i for (i, x) in enumerate(testlist) if (x == 1)):
    pass</s>
--


263=========
->Pred Code:
testlist.index(1)
->Target Code:
gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass
->Instruction:
get the position of item 1 in `testlist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: testlist.index(1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item 1 in `testlist`. [/INST] CODE: gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass</s>
--


264=========
->Pred Code:
testlist.index(element)
->Target Code:
print(testlist.index(element))
->Instruction:
get the position of item `element` in list `testlist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item `element` in list `testlist`. [/INST] CODE: testlist.index(element)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item `element` in list `testlist`. [/INST] CODE: print(testlist.index(element))</s>
--


265=========
->Pred Code:
testlist.index(element)
->Target Code:
try:
    print(testlist.index(element))
except ValueError:
    pass
->Instruction:
get the position of item `element` in list `testlist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item `element` in list `testlist`. [/INST] CODE: testlist.index(element)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the position of item `element` in list `testlist`. [/INST] CODE: try:
    print(testlist.index(element))
except ValueError:
    pass</s>
--


266=========
->Pred Code:
max(lis, key=lambda x: x[1])
->Target Code:
max(lis, key=lambda item: item[1])[0]
->Instruction:
find the first element of the tuple with the maximum second element in a list of tuples `lis`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the first element of the tuple with the maximum second element in a list of tuples `lis`. [/INST] CODE: max(lis, key=lambda x: x[1])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the first element of the tuple with the maximum second element in a list of tuples `lis`. [/INST] CODE: max(lis, key=lambda item: item[1])[0]</s>
--


267=========
->Pred Code:
max(lis, key=lambda x: x[1]).item[0]
->Target Code:
max(lis, key=itemgetter(1))[0]
->Instruction:
get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`. [/INST] CODE: max(lis, key=lambda x: x[1]).item[0]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`. [/INST] CODE: max(lis, key=itemgetter(1))[0]</s>
--


268=========
->Pred Code:
time.sleep(1)
->Target Code:
time.sleep(1)
->Instruction:
Make a delay of 1 second
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Make a delay of 1 second. [/INST] CODE: time.sleep(1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Make a delay of 1 second. [/INST] CODE: time.sleep(1)</s>
--


269=========
->Pred Code:
"""""".join(map(str, L))
->Target Code:
""", """.join('(' + ', '.join(i) + ')' for i in L)
->Instruction:
convert list of tuples `L` to a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list of tuples `L` to a string. [/INST] CODE: """""".join(map(str, L))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list of tuples `L` to a string. [/INST] CODE: """, """.join('(' + ', '.join(i) + ')' for i in L)</s>
--


270=========
->Pred Code:
default=[{'b': '0000000'}]
->Target Code:
b = models.CharField(max_length=7, default='0000000', editable=False)
->Instruction:
Django set default value of field `b` equal to '0000000'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Django set default value of field `b` equal to '0000000'. [/INST] CODE: default=[{'b': '0000000'}]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Django set default value of field `b` equal to '0000000'. [/INST] CODE: b = models.CharField(max_length=7, default='0000000', editable=False)</s>
--


271=========
->Pred Code:
sorted(list5, key=lambda x: x['degrees'])
->Target Code:
sorted(list5, lambda x: (degree(x), x))
->Instruction:
Sort lis `list5` in ascending order based on the degrees value of its elements
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort lis `list5` in ascending order based on the degrees value of its elements. [/INST] CODE: sorted(list5, key=lambda x: x['degrees'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort lis `list5` in ascending order based on the degrees value of its elements. [/INST] CODE: sorted(list5, lambda x: (degree(x), x))</s>
--


272=========
->Pred Code:
generator = iter([1, 2, 3, 4, 5])
->Target Code:
(n for n in [1, 2, 3, 5])
->Instruction:
convert a list  into a generator object
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a list  into a generator object. [/INST] CODE: generator = iter([1, 2, 3, 4, 5])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a list  into a generator object. [/INST] CODE: (n for n in [1, 2, 3, 5])</s>
--


273=========
->Pred Code:
newlist = [oldlist[i] for i in range(len(oldlist)) if i not in removelist]
->Target Code:
newlist = [v for i, v in enumerate(oldlist) if i not in removelist]
->Instruction:
remove elements from list `oldlist` that have an index number mentioned in list `removelist`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove elements from list `oldlist` that have an index number mentioned in list `removelist`. [/INST] CODE: newlist = [oldlist[i] for i in range(len(oldlist)) if i not in removelist]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove elements from list `oldlist` that have an index number mentioned in list `removelist`. [/INST] CODE: newlist = [v for i, v in enumerate(oldlist) if i not in removelist]</s>
--


274=========
->Pred Code:
f = open('yourfile.txt', 'w')
->Target Code:
f = open('yourfile.txt', 'w')
->Instruction:
Open a file `yourfile.txt` in write mode
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Open a file `yourfile.txt` in write mode. [/INST] CODE: f = open('yourfile.txt', 'w')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Open a file `yourfile.txt` in write mode. [/INST] CODE: f = open('yourfile.txt', 'w')</s>
--


275=========
->Pred Code:
getattr(obj, attr)
->Target Code:
getattr(obj, 'attr')
->Instruction:
get attribute 'attr' from object `obj`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get attribute 'attr' from object `obj`. [/INST] CODE: getattr(obj, attr)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get attribute 'attr' from object `obj`. [/INST] CODE: getattr(obj, 'attr')</s>
--


276=========
->Pred Code:
tuple(x[0] for x in (('aa',), ('bb',), ('cc',)))
->Target Code:
from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))
->Instruction:
convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple. [/INST] CODE: tuple(x[0] for x in (('aa',), ('bb',), ('cc',)))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple. [/INST] CODE: from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))</s>
--


277=========
->Pred Code:
list(map(lambda x: x[0], (('aa',), ('bb',), ('cc',))))
->Target Code:
map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))
->Instruction:
convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line. [/INST] CODE: list(map(lambda x: x[0], (('aa',), ('bb',), ('cc',))))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line. [/INST] CODE: map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))</s>
--


278=========
->Pred Code:
zip(*[('a', 'b'), ('c', 'd')])
->Target Code:
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
->Instruction:
unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`. [/INST] CODE: zip(*[('a', 'b'), ('c', 'd')])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`. [/INST] CODE: zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])</s>
--


279=========
->Pred Code:
zip(*[('a', 'b'), ('c', 'd')])
->Target Code:
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
->Instruction:
unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`. [/INST] CODE: zip(*[('a', 'b'), ('c', 'd')])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`. [/INST] CODE: zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])</s>
--


280=========
->Pred Code:
zip(*original)
->Target Code:
result = ([a for (a, b) in original], [b for (a, b) in original])
->Instruction:
unzip list `original`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `original`. [/INST] CODE: zip(*original)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `original`. [/INST] CODE: result = ([a for (a, b) in original], [b for (a, b) in original])</s>
--


281=========
->Pred Code:
zip(*original)
->Target Code:
result = ((a for (a, b) in original), (b for (a, b) in original))
->Instruction:
unzip list `original` and return a generator
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `original` and return a generator. [/INST] CODE: zip(*original)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `original` and return a generator. [/INST] CODE: result = ((a for (a, b) in original), (b for (a, b) in original))</s>
--


282=========
->Pred Code:
zip(*[['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, None]])
->Target Code:
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
->Instruction:
unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`. [/INST] CODE: zip(*[['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, None]])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`. [/INST] CODE: zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])</s>
--


283=========
->Pred Code:
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
->Target Code:
map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
->Instruction:
unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None. [/INST] CODE: zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None. [/INST] CODE: map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])</s>
--


284=========
->Pred Code:
json.dumps(Decimal('3.9'))
->Target Code:
json.dumps(Decimal('3.9'))
->Instruction:
encode `Decimal('3.9')` to a JSON string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode `Decimal('3.9')` to a JSON string. [/INST] CODE: json.dumps(Decimal('3.9'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: encode `Decimal('3.9')` to a JSON string. [/INST] CODE: json.dumps(Decimal('3.9'))</s>
--


285=========
->Pred Code:
d['mynewkey'] = 'mynewvalue'
->Target Code:
d['mynewkey'] = 'mynewvalue'
->Instruction:
Add key "mynewkey" to dictionary `d` with value "mynewvalue"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key "mynewkey" to dictionary `d` with value "mynewvalue". [/INST] CODE: d['mynewkey'] = 'mynewvalue'
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key "mynewkey" to dictionary `d` with value "mynewvalue". [/INST] CODE: d['mynewkey'] = 'mynewvalue'</s>
--


286=========
->Pred Code:
data['a'] = 1
->Target Code:
data.update({'a': 1, })
->Instruction:
Add key 'a' to dictionary `data` with value 1
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key 'a' to dictionary `data` with value 1. [/INST] CODE: data['a'] = 1
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key 'a' to dictionary `data` with value 1. [/INST] CODE: data.update({'a': 1, })</s>
--


287=========
->Pred Code:
data['a'] = 1
->Target Code:
data.update(dict(a=1))
->Instruction:
Add key 'a' to dictionary `data` with value 1
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key 'a' to dictionary `data` with value 1. [/INST] CODE: data['a'] = 1
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key 'a' to dictionary `data` with value 1. [/INST] CODE: data.update(dict(a=1))</s>
--


288=========
->Pred Code:
data['a'] = 1
->Target Code:
data.update(a=1)
->Instruction:
Add key 'a' to dictionary `data` with value 1
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key 'a' to dictionary `data` with value 1. [/INST] CODE: data['a'] = 1
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Add key 'a' to dictionary `data` with value 1. [/INST] CODE: data.update(a=1)</s>
--


289=========
->Pred Code:
np.max(matrix)
->Target Code:
max([max(i) for i in matrix])
->Instruction:
find maximal value in matrix `matrix`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find maximal value in matrix `matrix`. [/INST] CODE: np.max(matrix)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find maximal value in matrix `matrix`. [/INST] CODE: max([max(i) for i in matrix])</s>
--


290=========
->Pred Code:
print(('%.2f' % round(answer, 2)))
->Target Code:
answer = str(round(answer, 2))
->Instruction:
Round number `answer` to 2 precision after the decimal point
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Round number `answer` to 2 precision after the decimal point. [/INST] CODE: print(('%.2f' % round(answer, 2)))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Round number `answer` to 2 precision after the decimal point. [/INST] CODE: answer = str(round(answer, 2))</s>
--


291=========
->Pred Code:
re.search('<meta name="host" content="(.+)" />', html)
->Target Code:
ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)
->Instruction:
extract ip address from an html string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract ip address from an html string. [/INST] CODE: re.search('<meta name="host" content="(.+)" />', html)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract ip address from an html string. [/INST] CODE: ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)</s>
--


292=========
->Pred Code:
df.groupby('A').filter(lambda x: len(x) > 1)
->Target Code:
df.groupby('A').filter(lambda x: len(x) > 1)
->Instruction:
filter dataframe `df` by values in column `A` that appear more than once
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: filter dataframe `df` by values in column `A` that appear more than once. [/INST] CODE: df.groupby('A').filter(lambda x: len(x) > 1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: filter dataframe `df` by values in column `A` that appear more than once. [/INST] CODE: df.groupby('A').filter(lambda x: len(x) > 1)</s>
--


293=========
->Pred Code:
lines = [line.rstrip('\n') for line in myfile]
->Target Code:
[x for x in myfile.splitlines() if x != '']
->Instruction:
append each line in file `myfile` into a list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append each line in file `myfile` into a list. [/INST] CODE: lines = [line.rstrip('\n') for line in myfile]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append each line in file `myfile` into a list. [/INST] CODE: [x for x in myfile.splitlines() if x != '']</s>
--


294=========
->Pred Code:
lst = [int(x.strip()) for x in open('filename.txt')]
->Target Code:
lst = map(int, open('filename.txt').readlines())
->Instruction:
Get a list of integers `lst` from a file `filename.txt`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a list of integers `lst` from a file `filename.txt`. [/INST] CODE: lst = [int(x.strip()) for x in open('filename.txt')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a list of integers `lst` from a file `filename.txt`. [/INST] CODE: lst = map(int, open('filename.txt').readlines())</s>
--


295=========
->Pred Code:
plt.colorbar(mappable)
->Target Code:
plt.colorbar(mappable=mappable, cax=ax3)
->Instruction:
add color bar with image `mappable` to plot `plt`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add color bar with image `mappable` to plot `plt`. [/INST] CODE: plt.colorbar(mappable)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add color bar with image `mappable` to plot `plt`. [/INST] CODE: plt.colorbar(mappable=mappable, cax=ax3)</s>
--


296=========
->Pred Code:
df['text'].str.split().value_counts().head(100)
->Target Code:
Counter(' '.join(df['text']).split()).most_common(100)
->Instruction:
count most frequent 100 words in column 'text' of dataframe `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count most frequent 100 words in column 'text' of dataframe `df`. [/INST] CODE: df['text'].str.split().value_counts().head(100)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count most frequent 100 words in column 'text' of dataframe `df`. [/INST] CODE: Counter(' '.join(df['text']).split()).most_common(100)</s>
--


297=========
->Pred Code:
list(itertools.combinations((1, 2, 3), 2))
->Target Code:
list(itertools.combinations((1, 2, 3), 2))
->Instruction:
generate all 2-element subsets of tuple `(1, 2, 3)`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: generate all 2-element subsets of tuple `(1, 2, 3)`. [/INST] CODE: list(itertools.combinations((1, 2, 3), 2))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: generate all 2-element subsets of tuple `(1, 2, 3)`. [/INST] CODE: list(itertools.combinations((1, 2, 3), 2))</s>
--


298=========
->Pred Code:
datetime.datetime.now(tz=pytz.utc)
->Target Code:
datetime.now(pytz.utc)
->Instruction:
get a value of datetime.today() in the UTC time zone
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a value of datetime.today() in the UTC time zone. [/INST] CODE: datetime.datetime.now(tz=pytz.utc)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a value of datetime.today() in the UTC time zone. [/INST] CODE: datetime.now(pytz.utc)</s>
--


299=========
->Pred Code:
list2 = [x for x in list1 if x]
->Target Code:
list2 = [x for x in list1 if x != []]
->Instruction:
Get a new list `list2`by removing empty list from a list of lists `list1`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a new list `list2`by removing empty list from a list of lists `list1`. [/INST] CODE: list2 = [x for x in list1 if x]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get a new list `list2`by removing empty list from a list of lists `list1`. [/INST] CODE: list2 = [x for x in list1 if x != []]</s>
--


300=========
->Pred Code:
list2 = [x for x in list1 if x]
->Target Code:
list2 = [x for x in list1 if x]
->Instruction:
Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`. [/INST] CODE: list2 = [x for x in list1 if x]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`. [/INST] CODE: list2 = [x for x in list1 if x]</s>
--


301=========
->Pred Code:
return HttpResponse(json.dumps(data), content_type='application/json')
->Target Code:
return HttpResponse(data, mimetype='application/json')
->Instruction:
Django response with JSON `data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Django response with JSON `data`. [/INST] CODE: return HttpResponse(json.dumps(data), content_type='application/json')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Django response with JSON `data`. [/INST] CODE: return HttpResponse(data, mimetype='application/json')</s>
--


302=========
->Pred Code:
re.findall('[\\w\\s]+(?=[^\\[])', example_str)
->Target Code:
re.findall('(.*?)\\[.*?\\]', example_str)
->Instruction:
get all text that is not enclosed within square brackets in string `example_str`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get all text that is not enclosed within square brackets in string `example_str`. [/INST] CODE: re.findall('[\\w\\s]+(?=[^\\[])', example_str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get all text that is not enclosed within square brackets in string `example_str`. [/INST] CODE: re.findall('(.*?)\\[.*?\\]', example_str)</s>
--


303=========
->Pred Code:
re.findall('\\[[^\\]]*\\]|[^\\[\\]]*', example_str)
->Target Code:
re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)
->Instruction:
Use a regex to get all text in a string `example_str` that is not surrounded by square brackets
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Use a regex to get all text in a string `example_str` that is not surrounded by square brackets. [/INST] CODE: re.findall('\\[[^\\]]*\\]|[^\\[\\]]*', example_str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Use a regex to get all text in a string `example_str` that is not surrounded by square brackets. [/INST] CODE: re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)</s>
--


304=========
->Pred Code:
re.findall('\\[(.*?)\\]|([a-z])', '(zyx)bc')
->Target Code:
re.findall('\\(.+?\\)|\\w', '(zyx)bc')
->Instruction:
get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'. [/INST] CODE: re.findall('\\[(.*?)\\]|([a-z])', '(zyx)bc')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'. [/INST] CODE: re.findall('\\(.+?\\)|\\w', '(zyx)bc')</s>
--


305=========
->Pred Code:
re.match('\\((.*?)\\)|(\\w)', '(zyx)bc').groups()
->Target Code:
re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')
->Instruction:
match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'. [/INST] CODE: re.match('\\((.*?)\\)|(\\w)', '(zyx)bc').groups()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'. [/INST] CODE: re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')</s>
--


306=========
->Pred Code:
re.findall('(zyx)bc', '(zyx)bc')
->Target Code:
re.findall('\\(.*?\\)|\\w', '(zyx)bc')
->Instruction:
match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`. [/INST] CODE: re.findall('(zyx)bc', '(zyx)bc')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`. [/INST] CODE: re.findall('\\(.*?\\)|\\w', '(zyx)bc')</s>
--


307=========
->Pred Code:
print(' '.join(['%{0}%'.format(i) for i in elements]))
->Target Code:
elements = ['%{0}%'.format(element) for element in elements]
->Instruction:
formate each string cin list `elements` into pattern '%{0}%'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: formate each string cin list `elements` into pattern '%{0}%'. [/INST] CODE: print(' '.join(['%{0}%'.format(i) for i in elements]))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: formate each string cin list `elements` into pattern '%{0}%'. [/INST] CODE: elements = ['%{0}%'.format(element) for element in elements]</s>
--


308=========
->Pred Code:
subprocess.Popen(['background-process', 'arguments'])
->Target Code:
subprocess.Popen(['background-process', 'arguments'])
->Instruction:
Open a background process 'background-process' with arguments 'arguments'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Open a background process 'background-process' with arguments 'arguments'. [/INST] CODE: subprocess.Popen(['background-process', 'arguments'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Open a background process 'background-process' with arguments 'arguments'. [/INST] CODE: subprocess.Popen(['background-process', 'arguments'])</s>
--


309=========
->Pred Code:
[mydict.get(k, None) for k in mykeys]
->Target Code:
[mydict[x] for x in mykeys]
->Instruction:
get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'. [/INST] CODE: [mydict.get(k, None) for k in mykeys]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'. [/INST] CODE: [mydict[x] for x in mykeys]</s>
--


310=========
->Pred Code:
dict([('Name', 'Joe'), ('Age', 22)])
->Target Code:
dict([('Name', 'Joe'), ('Age', 22)])
->Instruction:
convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary. [/INST] CODE: dict([('Name', 'Joe'), ('Age', 22)])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary. [/INST] CODE: dict([('Name', 'Joe'), ('Age', 22)])</s>
--


311=========
->Pred Code:
np.average(data, axis=1, weights=np.ones((3, 2)), returned=True)[0]
->Target Code:
data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)
->Instruction:
average each two columns of array `data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: average each two columns of array `data`. [/INST] CODE: np.average(data, axis=1, weights=np.ones((3, 2)), returned=True)[0]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: average each two columns of array `data`. [/INST] CODE: data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)</s>
--


312=========
->Pred Code:
s = s.replace('\\"', '\\\\"*2')
->Target Code:
print(s.encode('unicode-escape').replace('"', '\\"'))
->Instruction:
double backslash escape all double quotes in string `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: double backslash escape all double quotes in string `s`. [/INST] CODE: s = s.replace('\\"', '\\\\"*2')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: double backslash escape all double quotes in string `s`. [/INST] CODE: print(s.encode('unicode-escape').replace('"', '\\"'))</s>
--


313=========
->Pred Code:
re.compile('\\s+')
->Target Code:
re.split('(\\W+)', s)
->Instruction:
split a string into a list of words and whitespace
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a string into a list of words and whitespace. [/INST] CODE: re.compile('\\s+')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a string into a list of words and whitespace. [/INST] CODE: re.split('(\\W+)', s)</s>
--


314=========
->Pred Code:
dict((v, k) for k, v in myDictionary.items())
->Target Code:
{i[1]: i[0] for i in list(myDictionary.items())}
->Instruction:
reverse the keys and values in a dictionary `myDictionary`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse the keys and values in a dictionary `myDictionary`. [/INST] CODE: dict((v, k) for k, v in myDictionary.items())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse the keys and values in a dictionary `myDictionary`. [/INST] CODE: {i[1]: i[0] for i in list(myDictionary.items())}</s>
--


315=========
->Pred Code:
[i for i, s in enumerate(myList) if ('how' in s) and ('what' in s)]
->Target Code:
[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]
->Instruction:
finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.. [/INST] CODE: [i for i, s in enumerate(myList) if ('how' in s) and ('what' in s)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.. [/INST] CODE: [i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]</s>
--


316=========
->Pred Code:
isinstance(obj, str)
->Target Code:
isinstance(obj, str)
->Instruction:
check if object `obj` is a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `obj` is a string. [/INST] CODE: isinstance(obj, str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `obj` is a string. [/INST] CODE: isinstance(obj, str)</s>
--


317=========
->Pred Code:
isinstance(o, str)
->Target Code:
isinstance(o, str)
->Instruction:
check if object `o` is a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `o` is a string. [/INST] CODE: isinstance(o, str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `o` is a string. [/INST] CODE: isinstance(o, str)</s>
--


318=========
->Pred Code:
isinstance(o, str)
->Target Code:
(type(o) is str)
->Instruction:
check if object `o` is a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `o` is a string. [/INST] CODE: isinstance(o, str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `o` is a string. [/INST] CODE: (type(o) is str)</s>
--


319=========
->Pred Code:
isinstance(o, str)
->Target Code:
isinstance(o, str)
->Instruction:
check if object `o` is a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `o` is a string. [/INST] CODE: isinstance(o, str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if object `o` is a string. [/INST] CODE: isinstance(o, str)</s>
--


320=========
->Pred Code:
isinstance(obj_to_test, str)
->Target Code:
isinstance(obj_to_test, str)
->Instruction:
check if `obj_to_test` is a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if `obj_to_test` is a string. [/INST] CODE: isinstance(obj_to_test, str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if `obj_to_test` is a string. [/INST] CODE: isinstance(obj_to_test, str)</s>
--


321=========
->Pred Code:
list2.extend(list1)
->Target Code:
list2.extend(list1)
->Instruction:
append list `list1` to `list2`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append list `list1` to `list2`. [/INST] CODE: list2.extend(list1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append list `list1` to `list2`. [/INST] CODE: list2.extend(list1)</s>
--


322=========
->Pred Code:
list1.append(mylog)
->Target Code:
list1.extend(mylog)
->Instruction:
append list `mylog` to `list1`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append list `mylog` to `list1`. [/INST] CODE: list1.append(mylog)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append list `mylog` to `list1`. [/INST] CODE: list1.extend(mylog)</s>
--


323=========
->Pred Code:
c.append(a)
->Target Code:
c.extend(a)
->Instruction:
append list `a` to `c`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append list `a` to `c`. [/INST] CODE: c.append(a)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append list `a` to `c`. [/INST] CODE: c.extend(a)</s>
--


324=========
->Pred Code:
list1.extend(mylog)
->Target Code:
for line in mylog:
    list1.append(line)
->Instruction:
append items in list `mylog` to `list1`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append items in list `mylog` to `list1`. [/INST] CODE: list1.extend(mylog)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append items in list `mylog` to `list1`. [/INST] CODE: for line in mylog:
    list1.append(line)</s>
--


325=========
->Pred Code:
b.append(tuple(a[0][0], a[0][2]))
->Target Code:
b.append((a[0][0], a[0][2]))
->Instruction:
append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`. [/INST] CODE: b.append(tuple(a[0][0], a[0][2]))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`. [/INST] CODE: b.append((a[0][0], a[0][2]))</s>
--


326=========
->Pred Code:
app.config['SECRET_KEY'] = 'Your_secret_string'
->Target Code:
app.config['SECRET_KEY'] = 'Your_secret_string'
->Instruction:
Initialize `SECRET_KEY` in flask config with `Your_secret_string `
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Initialize `SECRET_KEY` in flask config with `Your_secret_string `. [/INST] CODE: app.config['SECRET_KEY'] = 'Your_secret_string'
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Initialize `SECRET_KEY` in flask config with `Your_secret_string `. [/INST] CODE: app.config['SECRET_KEY'] = 'Your_secret_string'</s>
--


327=========
->Pred Code:
pd.concat(map(pd.DataFrame, zip(*df)), axis=1)
->Target Code:
pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)
->Instruction:
unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'. [/INST] CODE: pd.concat(map(pd.DataFrame, zip(*df)), axis=1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'. [/INST] CODE: pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)</s>
--


328=========
->Pred Code:
stocks_list.index('MSFT')
->Target Code:
[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']
->Instruction:
find the index of an element 'MSFT' in a list `stocks_list`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the index of an element 'MSFT' in a list `stocks_list`. [/INST] CODE: stocks_list.index('MSFT')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the index of an element 'MSFT' in a list `stocks_list`. [/INST] CODE: [x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']</s>
--


329=========
->Pred Code:
ax.set_xticklabels(ax.xaxis.get_major_ticks()[0::20].labels, rotation=45)
->Target Code:
ax.set_xticklabels(labels, rotation=45)
->Instruction:
rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable. [/INST] CODE: ax.set_xticklabels(ax.xaxis.get_major_ticks()[0::20].labels, rotation=45)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable. [/INST] CODE: ax.set_xticklabels(labels, rotation=45)</s>
--


330=========
->Pred Code:
s.translate(None, '!@#$')
->Target Code:
re.sub('[^\\w]', ' ', s)
->Instruction:
remove symbols from a string `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove symbols from a string `s`. [/INST] CODE: s.translate(None, '!@#$')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove symbols from a string `s`. [/INST] CODE: re.sub('[^\\w]', ' ', s)</s>
--


331=========
->Pred Code:
os.path.dirname(__file__)
->Target Code:
os.path.basename(os.path.dirname(os.path.realpath(__file__)))
->Instruction:
Get the current directory of a script
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the current directory of a script. [/INST] CODE: os.path.dirname(__file__)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the current directory of a script. [/INST] CODE: os.path.basename(os.path.dirname(os.path.realpath(__file__)))</s>
--


332=========
->Pred Code:
re.findall('\\\\([0-7]{3})', str)
->Target Code:
print(re.findall("'\\\\[0-7]{1,3}'", str))
->Instruction:
Find octal characters matches from a string `str` using regex
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find octal characters matches from a string `str` using regex. [/INST] CODE: re.findall('\\\\([0-7]{3})', str)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find octal characters matches from a string `str` using regex. [/INST] CODE: print(re.findall("'\\\\[0-7]{1,3}'", str))</s>
--


333=========
->Pred Code:
re.split('[ ](?=[A-Z]+\\b)', input)
->Target Code:
re.split('[ ](?=[A-Z]+\\b)', input)
->Instruction:
split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\b)'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\b)'. [/INST] CODE: re.split('[ ](?=[A-Z]+\\b)', input)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\b)'. [/INST] CODE: re.split('[ ](?=[A-Z]+\\b)', input)</s>
--


334=========
->Pred Code:
re.findall('\\b[A-Z](?=[A-Z])|\\b[A-Z][a-z]', input)
->Target Code:
re.split('[ ](?=[A-Z])', input)
->Instruction:
Split string `input` at every space followed by an upper-case letter
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split string `input` at every space followed by an upper-case letter. [/INST] CODE: re.findall('\\b[A-Z](?=[A-Z])|\\b[A-Z][a-z]', input)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split string `input` at every space followed by an upper-case letter. [/INST] CODE: re.split('[ ](?=[A-Z])', input)</s>
--


335=========
->Pred Code:
r = requests.post(url, headers=headers, files=files, data=data)
->Target Code:
r = requests.post(url, files=files, headers=headers, data=data)
->Instruction:
send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`. [/INST] CODE: r = requests.post(url, headers=headers, files=files, data=data)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`. [/INST] CODE: r = requests.post(url, files=files, headers=headers, data=data)</s>
--


336=========
->Pred Code:
with open(filename, 'wb') as f:
    f.write(bytes_)
->Target Code:
open('filename', 'wb').write(bytes_)
->Instruction:
write bytes `bytes_` to a file `filename` in python 3
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write bytes `bytes_` to a file `filename` in python 3. [/INST] CODE: with open(filename, 'wb') as f:
    f.write(bytes_)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write bytes `bytes_` to a file `filename` in python 3. [/INST] CODE: open('filename', 'wb').write(bytes_)</s>
--


337=========
->Pred Code:
[lst[i] for i in dct]
->Target Code:
[dct[k] for k in lst]
->Instruction:
get a list from a list `lst` with values mapped into a dictionary `dct`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a list from a list `lst` with values mapped into a dictionary `dct`. [/INST] CODE: [lst[i] for i in dct]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a list from a list `lst` with values mapped into a dictionary `dct`. [/INST] CODE: [dct[k] for k in lst]</s>
--


338=========
->Pred Code:
x.groupby('name').filter(lambda x: len(x) > 1)
->Target Code:
x.set_index('name').index.get_duplicates()
->Instruction:
find duplicate names in column 'name' of the dataframe `x`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find duplicate names in column 'name' of the dataframe `x`. [/INST] CODE: x.groupby('name').filter(lambda x: len(x) > 1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find duplicate names in column 'name' of the dataframe `x`. [/INST] CODE: x.set_index('name').index.get_duplicates()</s>
--


339=========
->Pred Code:
'{0:.3f}'.format(1.923328437452)
->Target Code:
round(1.923328437452, 3)
->Instruction:
truncate float 1.923328437452 to 3 decimal places
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: truncate float 1.923328437452 to 3 decimal places. [/INST] CODE: '{0:.3f}'.format(1.923328437452)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: truncate float 1.923328437452 to 3 decimal places. [/INST] CODE: round(1.923328437452, 3)</s>
--


340=========
->Pred Code:
sorted(li, key=lambda x: x[1], reverse=True)
->Target Code:
sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)
->Instruction:
sort list `li` in descending order based on the date value in second element of each list in list `li`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort list `li` in descending order based on the date value in second element of each list in list `li`. [/INST] CODE: sorted(li, key=lambda x: x[1], reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort list `li` in descending order based on the date value in second element of each list in list `li`. [/INST] CODE: sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)</s>
--


341=========
->Pred Code:
ax.set_rticks([135])
->Target Code:
ax.set_rlabel_position(135)
->Instruction:
place the radial ticks in plot `ax` at 135 degrees
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: place the radial ticks in plot `ax` at 135 degrees. [/INST] CODE: ax.set_rticks([135])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: place the radial ticks in plot `ax` at 135 degrees. [/INST] CODE: ax.set_rlabel_position(135)</s>
--


342=========
->Pred Code:
os.path.isabs(my_path)
->Target Code:
os.path.isabs(my_path)
->Instruction:
check if path `my_path` is an absolute path
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if path `my_path` is an absolute path. [/INST] CODE: os.path.isabs(my_path)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: check if path `my_path` is an absolute path. [/INST] CODE: os.path.isabs(my_path)</s>
--


343=========
->Pred Code:
len(yourdict)
->Target Code:
len(list(yourdict.keys()))
->Instruction:
get number of keys in dictionary `yourdict`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get number of keys in dictionary `yourdict`. [/INST] CODE: len(yourdict)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get number of keys in dictionary `yourdict`. [/INST] CODE: len(list(yourdict.keys()))</s>
--


344=========
->Pred Code:
len(yourdictfile)
->Target Code:
len(set(open(yourdictfile).read().split()))
->Instruction:
count the number of keys in dictionary `yourdictfile`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the number of keys in dictionary `yourdictfile`. [/INST] CODE: len(yourdictfile)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count the number of keys in dictionary `yourdictfile`. [/INST] CODE: len(set(open(yourdictfile).read().split()))</s>
--


345=========
->Pred Code:
df.groupby('id').first()
->Target Code:
df.groupby('id').first()
->Instruction:
pandas dataframe get first row of each group by 'id'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: pandas dataframe get first row of each group by 'id'. [/INST] CODE: df.groupby('id').first()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: pandas dataframe get first row of each group by 'id'. [/INST] CODE: df.groupby('id').first()</s>
--


346=========
->Pred Code:
pd.concat([df1, df2], axis=1)
->Target Code:
pd.concat([df[0].apply(pd.Series), df[1]], axis=1)
->Instruction:
split a list in first column  into multiple columns keeping other columns as well in pandas data frame
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a list in first column  into multiple columns keeping other columns as well in pandas data frame. [/INST] CODE: pd.concat([df1, df2], axis=1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split a list in first column  into multiple columns keeping other columns as well in pandas data frame. [/INST] CODE: pd.concat([df[0].apply(pd.Series), df[1]], axis=1)</s>
--


347=========
->Pred Code:
re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)
->Target Code:
re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)
->Instruction:
extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`. [/INST] CODE: re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`. [/INST] CODE: re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)</s>
--


348=========
->Pred Code:
sum(float(i) for i in ['', '3.4', '', '', '1.0'])
->Target Code:
sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])
->Instruction:
Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`. [/INST] CODE: sum(float(i) for i in ['', '3.4', '', '', '1.0'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`. [/INST] CODE: sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])</s>
--


349=========
->Pred Code:
subprocess.call('"c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat" list vms', shell=True)
->Target Code:
subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])
->Instruction:
Call a subprocess with arguments `c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat` that may contain spaces
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Call a subprocess with arguments `c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat` that may contain spaces. [/INST] CODE: subprocess.call('"c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat" list vms', shell=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Call a subprocess with arguments `c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat` that may contain spaces. [/INST] CODE: subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])</s>
--


350=========
->Pred Code:
heapq.heapify(q)[::-1]
->Target Code:
q.put((-n, n))
->Instruction:
reverse a priority queue `q` in python without using classes
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse a priority queue `q` in python without using classes. [/INST] CODE: heapq.heapify(q)[::-1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse a priority queue `q` in python without using classes. [/INST] CODE: q.put((-n, n))</s>
--


351=========
->Pred Code:
df.groupby('group').size().plot(kind='bar', color=color)
->Target Code:
df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])
->Instruction:
make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`. [/INST] CODE: df.groupby('group').size().plot(kind='bar', color=color)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`. [/INST] CODE: df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])</s>
--


352=========
->Pred Code:
re.findall('([a-fA-F\\d]{32})', data)
->Target Code:
re.findall('([a-fA-F\\d]{32})', data)
->Instruction:
find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`. [/INST] CODE: re.findall('([a-fA-F\\d]{32})', data)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`. [/INST] CODE: re.findall('([a-fA-F\\d]{32})', data)</s>
--


353=========
->Pred Code:
len(my_list)
->Target Code:
len(my_list)
->Instruction:
Get the length of list `my_list`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the length of list `my_list`. [/INST] CODE: len(my_list)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the length of list `my_list`. [/INST] CODE: len(my_list)</s>
--


354=========
->Pred Code:
len(l)
->Target Code:
len(l)
->Instruction:
Getting the length of array `l`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of array `l`. [/INST] CODE: len(l)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of array `l`. [/INST] CODE: len(l)</s>
--


355=========
->Pred Code:
len(s)
->Target Code:
len(s)
->Instruction:
Getting the length of array `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of array `s`. [/INST] CODE: len(s)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of array `s`. [/INST] CODE: len(s)</s>
--


356=========
->Pred Code:
len(my_tuple)
->Target Code:
len(my_tuple)
->Instruction:
Getting the length of `my_tuple`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of `my_tuple`. [/INST] CODE: len(my_tuple)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of `my_tuple`. [/INST] CODE: len(my_tuple)</s>
--


357=========
->Pred Code:
len(my_string)
->Target Code:
len(my_string)
->Instruction:
Getting the length of `my_string`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of `my_string`. [/INST] CODE: len(my_string)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Getting the length of `my_string`. [/INST] CODE: len(my_string)</s>
--


358=========
->Pred Code:
"""\\a""".replace('\\', '')
->Target Code:
"""\\a""".decode('string_escape')
->Instruction:
remove escape character from string "\\a"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove escape character from string "\\a". [/INST] CODE: """\\a""".replace('\\', '')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove escape character from string "\\a". [/INST] CODE: """\\a""".decode('string_escape')</s>
--


359=========
->Pred Code:
re.sub('([a])|(b)', '\\1\\2', 'obama')
->Target Code:
"""obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')
->Instruction:
replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.. [/INST] CODE: re.sub('([a])|(b)', '\\1\\2', 'obama')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.. [/INST] CODE: """obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')</s>
--


360=========
->Pred Code:
shutil.rmtree('/folder_name')
->Target Code:
shutil.rmtree('/folder_name')
->Instruction:
remove directory tree '/folder_name'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove directory tree '/folder_name'. [/INST] CODE: shutil.rmtree('/folder_name')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove directory tree '/folder_name'. [/INST] CODE: shutil.rmtree('/folder_name')</s>
--


361=========
->Pred Code:
data['weekday'] = data['my_dt'].dt.weekday_name
->Target Code:
data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())
->Instruction:
create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`. [/INST] CODE: data['weekday'] = data['my_dt'].dt.weekday_name
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`. [/INST] CODE: data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())</s>
--


362=========
->Pred Code:
sorted(x, key=x.get, reverse=True)
->Target Code:
sorted(x, key=x.get, reverse=True)
->Instruction:
reverse sort Counter `x` by values
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse sort Counter `x` by values. [/INST] CODE: sorted(x, key=x.get, reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse sort Counter `x` by values. [/INST] CODE: sorted(x, key=x.get, reverse=True)</s>
--


363=========
->Pred Code:
sorted(list(x.items()), key=lambda k_v: k_v[1], reverse=True)
->Target Code:
sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)
->Instruction:
reverse sort counter `x` by value
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse sort counter `x` by value. [/INST] CODE: sorted(list(x.items()), key=lambda k_v: k_v[1], reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse sort counter `x` by value. [/INST] CODE: sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)</s>
--


364=========
->Pred Code:
numpy.append(a, b)
->Target Code:
np.vstack((a, b))
->Instruction:
append a numpy array 'b' to a numpy array 'a'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append a numpy array 'b' to a numpy array 'a'. [/INST] CODE: numpy.append(a, b)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: append a numpy array 'b' to a numpy array 'a'. [/INST] CODE: np.vstack((a, b))</s>
--


365=========
->Pred Code:
np.concatenate((a, b), axis=0)
->Target Code:
print(concatenate((a, b), axis=0))
->Instruction:
numpy concatenate two arrays `a` and `b` along the first axis
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the first axis. [/INST] CODE: np.concatenate((a, b), axis=0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the first axis. [/INST] CODE: print(concatenate((a, b), axis=0))</s>
--


366=========
->Pred Code:
np.concatenate((a, b), axis=1)
->Target Code:
print(concatenate((a, b), axis=1))
->Instruction:
numpy concatenate two arrays `a` and `b` along the second axis
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the second axis. [/INST] CODE: np.concatenate((a, b), axis=1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the second axis. [/INST] CODE: print(concatenate((a, b), axis=1))</s>
--


367=========
->Pred Code:
np.concatenate((a, b), axis=0)
->Target Code:
c = np.r_[(a[None, :], b[None, :])]
->Instruction:
numpy concatenate two arrays `a` and `b` along the first axis
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the first axis. [/INST] CODE: np.concatenate((a, b), axis=0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the first axis. [/INST] CODE: c = np.r_[(a[None, :], b[None, :])]</s>
--


368=========
->Pred Code:
np.concatenate((a, b), axis=0)
->Target Code:
np.array((a, b))
->Instruction:
numpy concatenate two arrays `a` and `b` along the first axis
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the first axis. [/INST] CODE: np.concatenate((a, b), axis=0)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: numpy concatenate two arrays `a` and `b` along the first axis. [/INST] CODE: np.array((a, b))</s>
--


369=========
->Pred Code:
socket.gethostbyname('google.com')
->Target Code:
print(socket.getaddrinfo('google.com', 80))
->Instruction:
fetch address information for host 'google.com' ion port 80
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: fetch address information for host 'google.com' ion port 80. [/INST] CODE: socket.gethostbyname('google.com')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: fetch address information for host 'google.com' ion port 80. [/INST] CODE: print(socket.getaddrinfo('google.com', 80))</s>
--


370=========
->Pred Code:
df['day'] = 'sat'
->Target Code:
df.xs('sat', level='day', drop_level=False)
->Instruction:
add a column 'day' with value 'sat' to dataframe `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add a column 'day' with value 'sat' to dataframe `df`. [/INST] CODE: df['day'] = 'sat'
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add a column 'day' with value 'sat' to dataframe `df`. [/INST] CODE: df.xs('sat', level='day', drop_level=False)</s>
--


371=========
->Pred Code:
return HttpResponse('Unauthorized', status=401)
->Target Code:
return HttpResponse('Unauthorized', status=401)
->Instruction:
return a 401 unauthorized in django
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: return a 401 unauthorized in django. [/INST] CODE: return HttpResponse('Unauthorized', status=401)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: return a 401 unauthorized in django. [/INST] CODE: return HttpResponse('Unauthorized', status=401)</s>
--


372=========
->Pred Code:
app.jinja_loader = FileSystemLoader(['wherever'])
->Target Code:
Flask(__name__, template_folder='wherever')
->Instruction:
Flask set folder 'wherever' as the default template folder
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Flask set folder 'wherever' as the default template folder. [/INST] CODE: app.jinja_loader = FileSystemLoader(['wherever'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Flask set folder 'wherever' as the default template folder. [/INST] CODE: Flask(__name__, template_folder='wherever')</s>
--


373=========
->Pred Code:
engine.execute('INSERT INTO t1 SELECT * FROM t2')
->Target Code:
session.execute('INSERT INTO t1 (SELECT * FROM t2)')
->Instruction:
How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?. [/INST] CODE: engine.execute('INSERT INTO t1 SELECT * FROM t2')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?. [/INST] CODE: session.execute('INSERT INTO t1 (SELECT * FROM t2)')</s>
--


374=========
->Pred Code:
c2.sort(key=operator.itemgetter(2))
->Target Code:
c2.sort(key=lambda row: row[2])
->Instruction:
sort a list of lists 'c2' such that third row comes first
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of lists 'c2' such that third row comes first. [/INST] CODE: c2.sort(key=operator.itemgetter(2))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of lists 'c2' such that third row comes first. [/INST] CODE: c2.sort(key=lambda row: row[2])</s>
--


375=========
->Pred Code:
plt.rc('font', **{'family': 'sans-serif', 'sans-serif': 'Arial', 'size': 10})
->Target Code:
matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})
->Instruction:
set font `Arial` to display non-ascii characters in matplotlib
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: set font `Arial` to display non-ascii characters in matplotlib. [/INST] CODE: plt.rc('font', **{'family': 'sans-serif', 'sans-serif': 'Arial', 'size': 10})
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: set font `Arial` to display non-ascii characters in matplotlib. [/INST] CODE: matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})</s>
--


376=========
->Pred Code:
df['date'].apply(lambda x: x.date().toordinal())
->Target Code:
df['date'].apply(lambda x: x.toordinal())
->Instruction:
Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal. [/INST] CODE: df['date'].apply(lambda x: x.date().toordinal())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal. [/INST] CODE: df['date'].apply(lambda x: x.toordinal())</s>
--


377=========
->Pred Code:
element.get_attribute('outerHTML')
->Target Code:
element.get_attribute('innerHTML')
->Instruction:
get html source of Selenium WebElement `element`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get html source of Selenium WebElement `element`. [/INST] CODE: element.get_attribute('outerHTML')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get html source of Selenium WebElement `element`. [/INST] CODE: element.get_attribute('innerHTML')</s>
--


378=========
->Pred Code:
df.loc['bob'].values.argmax()
->Target Code:
df.index.get_loc('bob')
->Instruction:
Get the integer location of a key `bob` in a pandas data frame
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the integer location of a key `bob` in a pandas data frame. [/INST] CODE: df.loc['bob'].values.argmax()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get the integer location of a key `bob` in a pandas data frame. [/INST] CODE: df.index.get_loc('bob')</s>
--


379=========
->Pred Code:
os.system('gnome-terminal -x bash -c "sudo apt-get update"')
->Target Code:
os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')
->Instruction:
open a 'gnome' terminal from python script and run  'sudo apt-get update' command.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: open a 'gnome' terminal from python script and run  'sudo apt-get update' command.. [/INST] CODE: os.system('gnome-terminal -x bash -c "sudo apt-get update"')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: open a 'gnome' terminal from python script and run  'sudo apt-get update' command.. [/INST] CODE: os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')</s>
--


380=========
->Pred Code:
my_dict['third_key'] = 1
->Target Code:
my_dict.update({'third_key': 1})
->Instruction:
add an item with key 'third_key' and value 1 to an dictionary `my_dict`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add an item with key 'third_key' and value 1 to an dictionary `my_dict`. [/INST] CODE: my_dict['third_key'] = 1
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add an item with key 'third_key' and value 1 to an dictionary `my_dict`. [/INST] CODE: my_dict.update({'third_key': 1})</s>
--


381=========
->Pred Code:
numpy.zeros((3, 4))
->Target Code:
my_list = []
->Instruction:
declare an array
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: declare an array. [/INST] CODE: numpy.zeros((3, 4))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: declare an array. [/INST] CODE: my_list = []</s>
--


382=========
->Pred Code:
my_list.insert(1, 12)
->Target Code:
my_list.append(12)
->Instruction:
Insert item `12` to a list `my_list`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Insert item `12` to a list `my_list`. [/INST] CODE: my_list.insert(1, 12)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Insert item `12` to a list `my_list`. [/INST] CODE: my_list.append(12)</s>
--


383=========
->Pred Code:
myList.insert(0, 'wuggah')
->Target Code:
myList.insert(0, 'wuggah')
->Instruction:
add an entry 'wuggah' at the beginning of list `myList`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add an entry 'wuggah' at the beginning of list `myList`. [/INST] CODE: myList.insert(0, 'wuggah')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: add an entry 'wuggah' at the beginning of list `myList`. [/INST] CODE: myList.insert(0, 'wuggah')</s>
--


384=========
->Pred Code:
struct.pack('11B', *[ord(c) for c in 'ff00ff'])
->Target Code:
"""\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')
->Instruction:
convert a hex-string representation to actual bytes
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a hex-string representation to actual bytes. [/INST] CODE: struct.pack('11B', *[ord(c) for c in 'ff00ff'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a hex-string representation to actual bytes. [/INST] CODE: """\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')</s>
--


385=========
->Pred Code:
df.ix[:, (-1)]
->Target Code:
df[df.columns[-1]]
->Instruction:
select the last column of dataframe `df`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: select the last column of dataframe `df`. [/INST] CODE: df.ix[:, (-1)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: select the last column of dataframe `df`. [/INST] CODE: df[df.columns[-1]]</s>
--


386=========
->Pred Code:
df.loc[df['Letters'] == 'C'].head(1)
->Target Code:
df.loc[df['Letters'] == 'C', 'Letters'].values[0]
->Instruction:
get the first value from dataframe `df` where column 'Letters' is equal to 'C'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the first value from dataframe `df` where column 'Letters' is equal to 'C'. [/INST] CODE: df.loc[df['Letters'] == 'C'].head(1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the first value from dataframe `df` where column 'Letters' is equal to 'C'. [/INST] CODE: df.loc[df['Letters'] == 'C', 'Letters'].values[0]</s>
--


387=========
->Pred Code:
numpy.array([[1, 2, 3], [4, 5, 6]])
->Target Code:
np.column_stack(([1, 2, 3], [4, 5, 6]))
->Instruction:
converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix. [/INST] CODE: numpy.array([[1, 2, 3], [4, 5, 6]])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix. [/INST] CODE: np.column_stack(([1, 2, 3], [4, 5, 6]))</s>
--


388=========
->Pred Code:
type(i)
->Target Code:
type(i)
->Instruction:
get the type of `i`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the type of `i`. [/INST] CODE: type(i)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the type of `i`. [/INST] CODE: type(i)</s>
--


389=========
->Pred Code:
type(v)
->Target Code:
type(v)
->Instruction:
determine the type of variable `v`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)</s>
--


390=========
->Pred Code:
type(v)
->Target Code:
type(v)
->Instruction:
determine the type of variable `v`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)</s>
--


391=========
->Pred Code:
type(v)
->Target Code:
type(v)
->Instruction:
determine the type of variable `v`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)</s>
--


392=========
->Pred Code:
type(v)
->Target Code:
type(v)
->Instruction:
determine the type of variable `v`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: determine the type of variable `v`. [/INST] CODE: type(v)</s>
--


393=========
->Pred Code:
type(variable_name)
->Target Code:
print(type(variable_name))
->Instruction:
get the type of variable `variable_name`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the type of variable `variable_name`. [/INST] CODE: type(variable_name)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the type of variable `variable_name`. [/INST] CODE: print(type(variable_name))</s>
--


394=========
->Pred Code:
next(iter(range(10), 5))
->Target Code:
next(itertools.islice(range(10), 5, 5 + 1))
->Instruction:
get the 5th item of a generator
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the 5th item of a generator. [/INST] CODE: next(iter(range(10), 5))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the 5th item of a generator. [/INST] CODE: next(itertools.islice(range(10), 5, 5 + 1))</s>
--


395=========
->Pred Code:
print('Word: {0}'.format(word))
->Target Code:
print('"{}"'.format(word))
->Instruction:
Print a string `word` with string format
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Print a string `word` with string format. [/INST] CODE: print('Word: {0}'.format(word))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Print a string `word` with string format. [/INST] CODE: print('"{}"'.format(word))</s>
--


396=========
->Pred Code:
""" """.join(list)
->Target Code:
""" """.join(list)
->Instruction:
join a list of strings `list` using a space ' '
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: join a list of strings `list` using a space ' '. [/INST] CODE: """ """.join(list)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: join a list of strings `list` using a space ' '. [/INST] CODE: """ """.join(list)</s>
--


397=========
->Pred Code:
y = [[] for i in range(2)]
->Target Code:
y = [[] for n in range(2)]
->Instruction:
create list `y` containing two empty lists
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create list `y` containing two empty lists. [/INST] CODE: y = [[] for i in range(2)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create list `y` containing two empty lists. [/INST] CODE: y = [[] for n in range(2)]</s>
--


398=========
->Pred Code:
data = [line.rstrip('\n') for line in open('C:/name/MyDocuments/numbers')]
->Target Code:
data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]
->Instruction:
read a file 'C:/name/MyDocuments/numbers' into a list `data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: read a file 'C:/name/MyDocuments/numbers' into a list `data`. [/INST] CODE: data = [line.rstrip('\n') for line in open('C:/name/MyDocuments/numbers')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: read a file 'C:/name/MyDocuments/numbers' into a list `data`. [/INST] CODE: data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]</s>
--


399=========
->Pred Code:
"""""".join('it is icy'.replace('i', ''))
->Target Code:
"""""".join([char for char in 'it is icy' if char != 'i'])
->Instruction:
delete all occurrences of character 'i' in string 'it is icy'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: delete all occurrences of character 'i' in string 'it is icy'. [/INST] CODE: """""".join('it is icy'.replace('i', ''))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: delete all occurrences of character 'i' in string 'it is icy'. [/INST] CODE: """""".join([char for char in 'it is icy' if char != 'i'])</s>
--


400=========
->Pred Code:
"""""".join('it is icy'.replace('i', ''))
->Target Code:
re.sub('i', '', 'it is icy')
->Instruction:
delete all instances of a character 'i' in a string 'it is icy'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: delete all instances of a character 'i' in a string 'it is icy'. [/INST] CODE: """""".join('it is icy'.replace('i', ''))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: delete all instances of a character 'i' in a string 'it is icy'. [/INST] CODE: re.sub('i', '', 'it is icy')</s>
--


401=========
->Pred Code:
"""""".join("it is icy".replace('i', ''))
->Target Code:
"""it is icy""".replace('i', '')
->Instruction:
delete all characters "i" in string "it is icy"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: delete all characters "i" in string "it is icy". [/INST] CODE: """""".join("it is icy".replace('i', ''))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: delete all characters "i" in string "it is icy". [/INST] CODE: """it is icy""".replace('i', '')</s>
--


402=========
->Pred Code:
df.dropna(how='all', axis=1)
->Target Code:
df.dropna(subset=[1])
->Instruction:
Drop rows of pandas dataframe `df` having NaN in column at index "1"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Drop rows of pandas dataframe `df` having NaN in column at index "1". [/INST] CODE: df.dropna(how='all', axis=1)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Drop rows of pandas dataframe `df` having NaN in column at index "1". [/INST] CODE: df.dropna(subset=[1])</s>
--


403=========
->Pred Code:
[item for item in myList if item['n'] == 30]
->Target Code:
[x for x in myList if x.n == 30]
->Instruction:
get elements from list `myList`, that have a field `n` value 30
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get elements from list `myList`, that have a field `n` value 30. [/INST] CODE: [item for item in myList if item['n'] == 30]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get elements from list `myList`, that have a field `n` value 30. [/INST] CODE: [x for x in myList if x.n == 30]</s>
--


404=========
->Pred Code:
nums = [int(x) for x in intstringlist]
->Target Code:
nums = [int(x) for x in intstringlist]
->Instruction:
converting list of strings `intstringlist` to list of integer `nums`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: converting list of strings `intstringlist` to list of integer `nums`. [/INST] CODE: nums = [int(x) for x in intstringlist]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: converting list of strings `intstringlist` to list of integer `nums`. [/INST] CODE: nums = [int(x) for x in intstringlist]</s>
--


405=========
->Pred Code:
[int(i) for i in '012345']
->Target Code:
map(int, eval(input('Enter the unfriendly numbers: ')))
->Instruction:
convert list of string numbers into list of integers
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list of string numbers into list of integers. [/INST] CODE: [int(i) for i in '012345']
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert list of string numbers into list of integers. [/INST] CODE: map(int, eval(input('Enter the unfriendly numbers: ')))</s>
--


406=========
->Pred Code:
print('.', end='')
->Target Code:
sys.stdout.write('.')
->Instruction:
print "." without newline
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print "." without newline. [/INST] CODE: print('.', end='')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: print "." without newline. [/INST] CODE: sys.stdout.write('.')</s>
--


407=========
->Pred Code:
int(round(2.52 * 100))
->Target Code:
int(round(2.51 * 100))
->Instruction:
round off the float that is the product of `2.52 * 100` and convert it to an int
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: round off the float that is the product of `2.52 * 100` and convert it to an int. [/INST] CODE: int(round(2.52 * 100))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: round off the float that is the product of `2.52 * 100` and convert it to an int. [/INST] CODE: int(round(2.51 * 100))</s>
--


408=========
->Pred Code:
glob.glob('/mydir/*.txt')
->Target Code:
os.chdir('/mydir')
for file in glob.glob('*.txt'):
    pass
->Instruction:
Find all files in directory "/mydir" with extension ".txt"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all files in directory "/mydir" with extension ".txt". [/INST] CODE: glob.glob('/mydir/*.txt')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all files in directory "/mydir" with extension ".txt". [/INST] CODE: os.chdir('/mydir')
for file in glob.glob('*.txt'):
    pass</s>
--


409=========
->Pred Code:
glob.glob('/mydir/*.txt')
->Target Code:
for file in os.listdir('/mydir'):
    if file.endswith('.txt'):
        pass
->Instruction:
Find all files in directory "/mydir" with extension ".txt"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all files in directory "/mydir" with extension ".txt". [/INST] CODE: glob.glob('/mydir/*.txt')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all files in directory "/mydir" with extension ".txt". [/INST] CODE: for file in os.listdir('/mydir'):
    if file.endswith('.txt'):
        pass</s>
--


410=========
->Pred Code:
glob.glob('/mydir/*.txt')
->Target Code:
for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass
->Instruction:
Find all files in directory "/mydir" with extension ".txt"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all files in directory "/mydir" with extension ".txt". [/INST] CODE: glob.glob('/mydir/*.txt')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all files in directory "/mydir" with extension ".txt". [/INST] CODE: for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass</s>
--


411=========
->Pred Code:
df.plot(legend=False)
->Target Code:
df.plot(legend=False)
->Instruction:
plot dataframe `df` without a legend
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: plot dataframe `df` without a legend. [/INST] CODE: df.plot(legend=False)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: plot dataframe `df` without a legend. [/INST] CODE: df.plot(legend=False)</s>
--


412=========
->Pred Code:
for ip in ipaddress.ip_network('192.168.x.x'):
    pass
->Target Code:
for i in range(256):
    for j in range(256):
        ip = ('192.168.%d.%d' % (i, j))
        print(ip)
->Instruction:
loop through the IP address range "192.168.x.x"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop through the IP address range "192.168.x.x". [/INST] CODE: for ip in ipaddress.ip_network('192.168.x.x'):
    pass
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop through the IP address range "192.168.x.x". [/INST] CODE: for i in range(256):
    for j in range(256):
        ip = ('192.168.%d.%d' % (i, j))
        print(ip)</s>
--


413=========
->Pred Code:
for ip in ipaddress.ip_network('192.168.x.x'):
    pass
->Target Code:
for (i, j) in product(list(range(256)), list(range(256))):
    pass
->Instruction:
loop through the IP address range "192.168.x.x"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop through the IP address range "192.168.x.x". [/INST] CODE: for ip in ipaddress.ip_network('192.168.x.x'):
    pass
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop through the IP address range "192.168.x.x". [/INST] CODE: for (i, j) in product(list(range(256)), list(range(256))):
    pass</s>
--


414=========
->Pred Code:
for ip in ipaddress.ip_network('192.168.x.x'):
    pass
->Target Code:
generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)
->Instruction:
loop through the IP address range "192.168.x.x"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop through the IP address range "192.168.x.x". [/INST] CODE: for ip in ipaddress.ip_network('192.168.x.x'):
    pass
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: loop through the IP address range "192.168.x.x". [/INST] CODE: generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)</s>
--


415=========
->Pred Code:
sum(y * 2 ** i for i, y in enumerate(reversed(x)))
->Target Code:
sum(1 << i for i, b in enumerate(x) if b)
->Instruction:
Sum the corresponding decimal values for binary values of each boolean element in list `x`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sum the corresponding decimal values for binary values of each boolean element in list `x`. [/INST] CODE: sum(y * 2 ** i for i, y in enumerate(reversed(x)))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sum the corresponding decimal values for binary values of each boolean element in list `x`. [/INST] CODE: sum(1 << i for i, b in enumerate(x) if b)</s>
--


416=========
->Pred Code:
target.write(line1 + line2 + line3)
->Target Code:
target.write('%r\n%r\n%r\n' % (line1, line2, line3))
->Instruction:
write multiple strings `line1`, `line2` and `line3` in one line in a file `target`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write multiple strings `line1`, `line2` and `line3` in one line in a file `target`. [/INST] CODE: target.write(line1 + line2 + line3)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write multiple strings `line1`, `line2` and `line3` in one line in a file `target`. [/INST] CODE: target.write('%r\n%r\n%r\n' % (line1, line2, line3))</s>
--


417=========
->Pred Code:
[item for sublist in data for item in sublist]
->Target Code:
[y for x in data for y in (x if isinstance(x, list) else [x])]
->Instruction:
Convert list of lists `data` into a flat list
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert list of lists `data` into a flat list. [/INST] CODE: [item for sublist in data for item in sublist]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert list of lists `data` into a flat list. [/INST] CODE: [y for x in data for y in (x if isinstance(x, list) else [x])]</s>
--


418=========
->Pred Code:
print('foo\nbar'.replace('\\n', '\n'))
->Target Code:
print('foo\nbar'.encode('string_escape'))
->Instruction:
Print new line character as `\n` in a string `foo\nbar`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Print new line character as `\n` in a string `foo\nbar`. [/INST] CODE: print('foo\nbar'.replace('\\n', '\n'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Print new line character as `\n` in a string `foo\nbar`. [/INST] CODE: print('foo\nbar'.encode('string_escape'))</s>
--


419=========
->Pred Code:
s[:-1]
->Target Code:
"""""".join(s.rsplit(',', 1))
->Instruction:
remove last comma character ',' in string `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove last comma character ',' in string `s`. [/INST] CODE: s[:-1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: remove last comma character ',' in string `s`. [/INST] CODE: """""".join(s.rsplit(',', 1))</s>
--


420=========
->Pred Code:
np.convolve(x, np.ones(2), mode='same') / 2
->Target Code:
(x[1:] + x[:-1]) / 2
->Instruction:
calculate the mean of each element in array `x` with the element previous to it
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: calculate the mean of each element in array `x` with the element previous to it. [/INST] CODE: np.convolve(x, np.ones(2), mode='same') / 2
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: calculate the mean of each element in array `x` with the element previous to it. [/INST] CODE: (x[1:] + x[:-1]) / 2</s>
--


421=========
->Pred Code:
np.concatenate((np.zeros(1), np.diff(x) / 2, x[-1] / 2)).reshape(-1, 2)
->Target Code:
x[:-1] + (x[1:] - x[:-1]) / 2
->Instruction:
get an array of the mean of each two consecutive values in numpy array `x`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get an array of the mean of each two consecutive values in numpy array `x`. [/INST] CODE: np.concatenate((np.zeros(1), np.diff(x) / 2, x[-1] / 2)).reshape(-1, 2)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get an array of the mean of each two consecutive values in numpy array `x`. [/INST] CODE: x[:-1] + (x[1:] - x[:-1]) / 2</s>
--


422=========
->Pred Code:
arr = np.loadtxt('new.txt', delimiter=' ', dtype='<U8')
->Target Code:
arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')
->Instruction:
load data containing `utf-8` from file `new.txt` into numpy array `arr`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: load data containing `utf-8` from file `new.txt` into numpy array `arr`. [/INST] CODE: arr = np.loadtxt('new.txt', delimiter=' ', dtype='<U8')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: load data containing `utf-8` from file `new.txt` into numpy array `arr`. [/INST] CODE: arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')</s>
--


423=========
->Pred Code:
sorted(l, key=lambda d: d['time'], reverse=True)
->Target Code:
l = sorted(l, key=itemgetter('time'), reverse=True)
->Instruction:
reverse sort list of dicts `l` by value for key `time`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse sort list of dicts `l` by value for key `time`. [/INST] CODE: sorted(l, key=lambda d: d['time'], reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reverse sort list of dicts `l` by value for key `time`. [/INST] CODE: l = sorted(l, key=itemgetter('time'), reverse=True)</s>
--


424=========
->Pred Code:
sorted(l, key=lambda x: x['time'], reverse=True)
->Target Code:
l = sorted(l, key=lambda a: a['time'], reverse=True)
->Instruction:
Sort a list of dictionary `l` based on key `time` in descending order
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort a list of dictionary `l` based on key `time` in descending order. [/INST] CODE: sorted(l, key=lambda x: x['time'], reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort a list of dictionary `l` based on key `time` in descending order. [/INST] CODE: l = sorted(l, key=lambda a: a['time'], reverse=True)</s>
--


425=========
->Pred Code:
df[df.apply(lambda x: any(re.match(pattern, y) for pattern in ('(Hel|Just)', x.values)))]
->Target Code:
df.loc[df[0].str.contains('(Hel|Just)')]
->Instruction:
get rows of dataframe `df` that match regex '(Hel|Just)'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get rows of dataframe `df` that match regex '(Hel|Just)'. [/INST] CODE: df[df.apply(lambda x: any(re.match(pattern, y) for pattern in ('(Hel|Just)', x.values)))]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get rows of dataframe `df` that match regex '(Hel|Just)'. [/INST] CODE: df.loc[df[0].str.contains('(Hel|Just)')]</s>
--


426=========
->Pred Code:
re.findall('\\[(.*?)\\]', your_string)
->Target Code:
re.search('\\[(.*)\\]', your_string).group(1)
->Instruction:
find the string in `your_string` between two special characters "[" and "]"
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the string in `your_string` between two special characters "[" and "]". [/INST] CODE: re.findall('\\[(.*?)\\]', your_string)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: find the string in `your_string` between two special characters "[" and "]". [/INST] CODE: re.search('\\[(.*)\\]', your_string).group(1)</s>
--


427=========
->Pred Code:
"""The big brown fox is brown""".count('brown')
->Target Code:
"""The big brown fox is brown""".count('brown')
->Instruction:
count number of times string 'brown' occurred in string 'The big brown fox is brown'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count number of times string 'brown' occurred in string 'The big brown fox is brown'. [/INST] CODE: """The big brown fox is brown""".count('brown')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: count number of times string 'brown' occurred in string 'The big brown fox is brown'. [/INST] CODE: """The big brown fox is brown""".count('brown')</s>
--


428=========
->Pred Code:
json.loads(request.body)
->Target Code:
json.loads(request.body)
->Instruction:
decode json string `request.body` to python dict
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: decode json string `request.body` to python dict. [/INST] CODE: json.loads(request.body)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: decode json string `request.body` to python dict. [/INST] CODE: json.loads(request.body)</s>
--


429=========
->Pred Code:
urllib.request.urlretrieve(url, file_name)
->Target Code:
urllib.request.urlretrieve(url, file_name)
->Instruction:
download the file from url `url` and save it under file `file_name`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download the file from url `url` and save it under file `file_name`. [/INST] CODE: urllib.request.urlretrieve(url, file_name)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: download the file from url `url` and save it under file `file_name`. [/INST] CODE: urllib.request.urlretrieve(url, file_name)</s>
--


430=========
->Pred Code:
text.split()
->Target Code:
text.split()
->Instruction:
split string `text` by space
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `text` by space. [/INST] CODE: text.split()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `text` by space. [/INST] CODE: text.split()</s>
--


431=========
->Pred Code:
text.split(',')
->Target Code:
text.split(',')
->Instruction:
split string `text` by ","
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `text` by ",". [/INST] CODE: text.split(',')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: split string `text` by ",". [/INST] CODE: text.split(',')</s>
--


432=========
->Pred Code:
fields = line.split()
->Target Code:
line.split()
->Instruction:
Split string `line` into a list by whitespace
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split string `line` into a list by whitespace. [/INST] CODE: fields = line.split()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Split string `line` into a list by whitespace. [/INST] CODE: line.split()</s>
--


433=========
->Pred Code:
"""""".join(map(chr, map(ord, s.split('.'))))
->Target Code:
[re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]
->Instruction:
replace dot characters  '.' associated with ascii letters in list `s` with space ' '
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace dot characters  '.' associated with ascii letters in list `s` with space ' '. [/INST] CODE: """""".join(map(chr, map(ord, s.split('.'))))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: replace dot characters  '.' associated with ascii letters in list `s` with space ' '. [/INST] CODE: [re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]</s>
--


434=========
->Pred Code:
list_of_strings.sort(key=lambda s: int(s.split()[1]))
->Target Code:
sorted(list_of_strings, key=lambda s: s.split(',')[1])
->Instruction:
sort list `list_of_strings` based on second index of each string `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort list `list_of_strings` based on second index of each string `s`. [/INST] CODE: list_of_strings.sort(key=lambda s: int(s.split()[1]))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort list `list_of_strings` based on second index of each string `s`. [/INST] CODE: sorted(list_of_strings, key=lambda s: s.split(',')[1])</s>
--


435=========
->Pred Code:
os.system('vasp | tee tee_output')
->Target Code:
subprocess.check_call('vasp | tee tee_output', shell=True)
->Instruction:
call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’. [/INST] CODE: os.system('vasp | tee tee_output')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’. [/INST] CODE: subprocess.check_call('vasp | tee tee_output', shell=True)</s>
--


436=========
->Pred Code:
[s for s in lst if s]
->Target Code:
[element for element in lst if isinstance(element, int)]
->Instruction:
eliminate all strings from list `lst`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: eliminate all strings from list `lst`. [/INST] CODE: [s for s in lst if s]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: eliminate all strings from list `lst`. [/INST] CODE: [element for element in lst if isinstance(element, int)]</s>
--


437=========
->Pred Code:
[x for x in lst if not isinstance(x, str)]
->Target Code:
[element for element in lst if not isinstance(element, str)]
->Instruction:
get all the elements except strings from the list 'lst'.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get all the elements except strings from the list 'lst'.. [/INST] CODE: [x for x in lst if not isinstance(x, str)]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get all the elements except strings from the list 'lst'.. [/INST] CODE: [element for element in lst if not isinstance(element, str)]</s>
--


438=========
->Pred Code:
sorted(list_to_be_sorted, key=lambda x: x['name'])
->Target Code:
newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])
->Instruction:
Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`. [/INST] CODE: sorted(list_to_be_sorted, key=lambda x: x['name'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`. [/INST] CODE: newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])</s>
--


439=========
->Pred Code:
sorted(l, key=itemgetter('name'), reverse=True)
->Target Code:
newlist = sorted(l, key=itemgetter('name'), reverse=True)
->Instruction:
sort a list of dictionaries `l` by values in key `name` in descending order
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionaries `l` by values in key `name` in descending order. [/INST] CODE: sorted(l, key=itemgetter('name'), reverse=True)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionaries `l` by values in key `name` in descending order. [/INST] CODE: newlist = sorted(l, key=itemgetter('name'), reverse=True)</s>
--


440=========
->Pred Code:
""",""".join([trans[category][item] for item in trans[category]])
->Target Code:
""",""".join(trans['category'])
->Instruction:
join together with "," elements inside a list indexed with 'category' within a dictionary `trans`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: join together with "," elements inside a list indexed with 'category' within a dictionary `trans`. [/INST] CODE: """,""".join([trans[category][item] for item in trans[category]])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: join together with "," elements inside a list indexed with 'category' within a dictionary `trans`. [/INST] CODE: """,""".join(trans['category'])</s>
--


441=========
->Pred Code:
"""""".join(['A', 'B', 'C', 'D'])
->Target Code:
"""""".join(['A', 'B', 'C', 'D'])
->Instruction:
concatenate array of strings `['A', 'B', 'C', 'D']` into a string
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate array of strings `['A', 'B', 'C', 'D']` into a string. [/INST] CODE: """""".join(['A', 'B', 'C', 'D'])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: concatenate array of strings `['A', 'B', 'C', 'D']` into a string. [/INST] CODE: """""".join(['A', 'B', 'C', 'D'])</s>
--


442=========
->Pred Code:
r = requests.get('url', headers={'Content-Type': 'application/json'})
data = r.json()
->Target Code:
json.load(urllib.request.urlopen('url'))
->Instruction:
get json data from restful service 'url'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get json data from restful service 'url'. [/INST] CODE: r = requests.get('url', headers={'Content-Type': 'application/json'})
data = r.json()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get json data from restful service 'url'. [/INST] CODE: json.load(urllib.request.urlopen('url'))</s>
--


443=========
->Pred Code:
sents = [sent for sent in sents if not sent.startswith('@$\t') or not sent.startswith('#')]
->Target Code:
[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
->Instruction:
Remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`. [/INST] CODE: sents = [sent for sent in sents if not sent.startswith('@$\t') or not sent.startswith('#')]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`. [/INST] CODE: [x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]</s>
--


444=========
->Pred Code:
Entry.objects.filter(pub_date__hour=10)
->Target Code:
Entry.objects.filter(pub_date__contains='08:00')
->Instruction:
django filter by hour
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: django filter by hour. [/INST] CODE: Entry.objects.filter(pub_date__hour=10)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: django filter by hour. [/INST] CODE: Entry.objects.filter(pub_date__contains='08:00')</s>
--


445=========
->Pred Code:
sorted(list, key=lambda x: (x['points'], x['time']))
->Target Code:
list.sort(key=lambda item: (item['points'], item['time']))
->Instruction:
sort a list of dictionary `list` first by key `points` and then by `time`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionary `list` first by key `points` and then by `time`. [/INST] CODE: sorted(list, key=lambda x: (x['points'], x['time']))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: sort a list of dictionary `list` first by key `points` and then by `time`. [/INST] CODE: list.sort(key=lambda item: (item['points'], item['time']))</s>
--


446=========
->Pred Code:
((1970, 1, 1)) - datetime.datetime.fromordinal(1).toordinal()
->Target Code:
(t - datetime.datetime(1970, 1, 1)).total_seconds()
->Instruction:
convert datetime object `(1970, 1, 1)` to seconds
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert datetime object `(1970, 1, 1)` to seconds. [/INST] CODE: ((1970, 1, 1)) - datetime.datetime.fromordinal(1).toordinal()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert datetime object `(1970, 1, 1)` to seconds. [/INST] CODE: (t - datetime.datetime(1970, 1, 1)).total_seconds()</s>
--


447=========
->Pred Code:
re.sub('(\\.[^.]+)$', '_suff\\1', 'long.file.name.jpg')
->Target Code:
re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')
->Instruction:
insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.. [/INST] CODE: re.sub('(\\.[^.]+)$', '_suff\\1', 'long.file.name.jpg')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.. [/INST] CODE: re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')</s>
--


448=========
->Pred Code:
reload(module)
->Target Code:
import imp
imp.reload(module)
->Instruction:
reload a module `module`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reload a module `module`. [/INST] CODE: reload(module)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: reload a module `module`. [/INST] CODE: import imp
imp.reload(module)</s>
--


449=========
->Pred Code:
number = int(str(number)[-1])
->Target Code:
struct.unpack('H', struct.pack('h', number))
->Instruction:
Convert integer `number` into an unassigned integer
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert integer `number` into an unassigned integer. [/INST] CODE: number = int(str(number)[-1])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Convert integer `number` into an unassigned integer. [/INST] CODE: struct.unpack('H', struct.pack('h', number))</s>
--


450=========
->Pred Code:
[float(num) for num in numlist]
->Target Code:
numlist = [float(x) for x in numlist]
->Instruction:
convert int values in list `numlist` to float
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert int values in list `numlist` to float. [/INST] CODE: [float(num) for num in numlist]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert int values in list `numlist` to float. [/INST] CODE: numlist = [float(x) for x in numlist]</s>
--


451=========
->Pred Code:
df.to_csv('test.csv', index=False)
->Target Code:
df.to_csv(filename, index=False)
->Instruction:
write dataframe `df`, excluding index, to a csv file
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write dataframe `df`, excluding index, to a csv file. [/INST] CODE: df.to_csv('test.csv', index=False)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write dataframe `df`, excluding index, to a csv file. [/INST] CODE: df.to_csv(filename, index=False)</s>
--


452=========
->Pred Code:
json_data = json.loads(urllib.parse.unquote(unescaped))
->Target Code:
json_data = json.loads(unescaped)
->Instruction:
convert a urllib unquoted string `unescaped` to a json data `json_data`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a urllib unquoted string `unescaped` to a json data `json_data`. [/INST] CODE: json_data = json.loads(urllib.parse.unquote(unescaped))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert a urllib unquoted string `unescaped` to a json data `json_data`. [/INST] CODE: json_data = json.loads(unescaped)</s>
--


453=========
->Pred Code:
list(map(chr, range(128)))
->Target Code:
[chr(i) for i in range(127)]
->Instruction:
Create a list containing all ascii characters as its elements
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create a list containing all ascii characters as its elements. [/INST] CODE: list(map(chr, range(128)))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Create a list containing all ascii characters as its elements. [/INST] CODE: [chr(i) for i in range(127)]</s>
--


454=========
->Pred Code:
newFile.write(newFileBytes)
->Target Code:
newFile.write(struct.pack('5B', *newFileBytes))
->Instruction:
write `newFileBytes` to a binary file `newFile`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write `newFileBytes` to a binary file `newFile`. [/INST] CODE: newFile.write(newFileBytes)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write `newFileBytes` to a binary file `newFile`. [/INST] CODE: newFile.write(struct.pack('5B', *newFileBytes))</s>
--


455=========
->Pred Code:
re.search('[A-Z](?=[A-Z][a-z])', string)
->Target Code:
re.sub('^[A-Z0-9]*(?![a-z])', '', string)
->Instruction:
python regex - check for a capital letter with a following lowercase in string `string`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: python regex - check for a capital letter with a following lowercase in string `string`. [/INST] CODE: re.search('[A-Z](?=[A-Z][a-z])', string)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: python regex - check for a capital letter with a following lowercase in string `string`. [/INST] CODE: re.sub('^[A-Z0-9]*(?![a-z])', '', string)</s>
--


456=========
->Pred Code:
list(dict.keys())[-1]
->Target Code:
list(dict.keys())[-1]
->Instruction:
get the last key of dictionary `dict`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the last key of dictionary `dict`. [/INST] CODE: list(dict.keys())[-1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the last key of dictionary `dict`. [/INST] CODE: list(dict.keys())[-1]</s>
--


457=========
->Pred Code:
f.write('hi there\n')
->Target Code:
print('hi there', file=f)
->Instruction:
write line "hi there" to file `f`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write line "hi there" to file `f`. [/INST] CODE: f.write('hi there\n')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write line "hi there" to file `f`. [/INST] CODE: print('hi there', file=f)</s>
--


458=========
->Pred Code:
myfile.write('hi there\n')
->Target Code:
f = open('myfile', 'w')
f.write('hi there\n')
f.close()
->Instruction:
write line "hi there" to file `myfile`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write line "hi there" to file `myfile`. [/INST] CODE: myfile.write('hi there\n')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write line "hi there" to file `myfile`. [/INST] CODE: f = open('myfile', 'w')
f.write('hi there\n')
f.close()</s>
--


459=========
->Pred Code:
with open('somefile.txt', 'a') as f:
    f.write('Hello')
->Target Code:
with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
->Instruction:
write line "Hello" to file `somefile.txt`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write line "Hello" to file `somefile.txt`. [/INST] CODE: with open('somefile.txt', 'a') as f:
    f.write('Hello')
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: write line "Hello" to file `somefile.txt`. [/INST] CODE: with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')</s>
--


460=========
->Pred Code:
print(s.encode('ascii', 'ignore'))
->Target Code:
s.encode('iso-8859-15')
->Instruction:
convert unicode string `s` to ascii
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert unicode string `s` to ascii. [/INST] CODE: print(s.encode('ascii', 'ignore'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: convert unicode string `s` to ascii. [/INST] CODE: s.encode('iso-8859-15')</s>
--


461=========
->Pred Code:
AuthorizedEmail.objects.all().extra('max', 'added').aggregate(Max('added'))
->Target Code:
AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]
->Instruction:
Django get maximum value associated with field 'added' in model `AuthorizedEmail`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Django get maximum value associated with field 'added' in model `AuthorizedEmail`. [/INST] CODE: AuthorizedEmail.objects.all().extra('max', 'added').aggregate(Max('added'))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Django get maximum value associated with field 'added' in model `AuthorizedEmail`. [/INST] CODE: AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]</s>
--


462=========
->Pred Code:
re.findall('[0-9.]+', text)
->Target Code:
re.findall('Test([0-9.]*[0-9]+)', text)
->Instruction:
Find all numbers and dots from a string `text` using regex
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all numbers and dots from a string `text` using regex. [/INST] CODE: re.findall('[0-9.]+', text)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Find all numbers and dots from a string `text` using regex. [/INST] CODE: re.findall('Test([0-9.]*[0-9]+)', text)</s>
--


463=========
->Pred Code:
re.findall('[0-9.]+', text)
->Target Code:
re.findall('Test([\\d.]*\\d+)', text)
->Instruction:
python regex  to find all numbers and dots from 'text'
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: python regex  to find all numbers and dots from 'text'. [/INST] CODE: re.findall('[0-9.]+', text)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: python regex  to find all numbers and dots from 'text'. [/INST] CODE: re.findall('Test([\\d.]*\\d+)', text)</s>
--


464=========
->Pred Code:
os.system("powershell.exe script.ps1")
->Target Code:
os.system('powershell.exe', 'script.ps1')
->Instruction:
execute script 'script.ps1' using 'powershell.exe' shell
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: execute script 'script.ps1' using 'powershell.exe' shell. [/INST] CODE: os.system("powershell.exe script.ps1")
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: execute script 'script.ps1' using 'powershell.exe' shell. [/INST] CODE: os.system('powershell.exe', 'script.ps1')</s>
--


465=========
->Pred Code:
b.sort(key=lambda x: x[2])
->Target Code:
b.sort(key=lambda x: x[1][2])
->Instruction:
Sort a list of tuples `b` by third item in the tuple
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort a list of tuples `b` by third item in the tuple. [/INST] CODE: b.sort(key=lambda x: x[2])
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Sort a list of tuples `b` by third item in the tuple. [/INST] CODE: b.sort(key=lambda x: x[1][2])</s>
--


466=========
->Pred Code:
rows = list(cf.xrange())
->Target Code:
list(cf.get_range().get_keys())
->Instruction:
get a list of all keys in Cassandra database `cf` with pycassa
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a list of all keys in Cassandra database `cf` with pycassa. [/INST] CODE: rows = list(cf.xrange())
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get a list of all keys in Cassandra database `cf` with pycassa. [/INST] CODE: list(cf.get_range().get_keys())</s>
--


467=========
->Pred Code:
datetime.datetime.now()
->Target Code:
datetime.datetime.now()
->Instruction:
create a datetime with the current date & time
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a datetime with the current date & time. [/INST] CODE: datetime.datetime.now()
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: create a datetime with the current date & time. [/INST] CODE: datetime.datetime.now()</s>
--


468=========
->Pred Code:
[i for i, v in enumerate(lst) if v == 1]
->Target Code:
next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)
->Instruction:
get the index of an integer `1` from a list `lst` if the list also contains boolean items
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the index of an integer `1` from a list `lst` if the list also contains boolean items. [/INST] CODE: [i for i, v in enumerate(lst) if v == 1]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the index of an integer `1` from a list `lst` if the list also contains boolean items. [/INST] CODE: next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)</s>
--


469=========
->Pred Code:
[x - 13 for x in a]
->Target Code:
a[:] = [(x - 13) for x in a]
->Instruction:
subtract 13 from every number in a list `a`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: subtract 13 from every number in a list `a`. [/INST] CODE: [x - 13 for x in a]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: subtract 13 from every number in a list `a`. [/INST] CODE: a[:] = [(x - 13) for x in a]</s>
--


470=========
->Pred Code:
glob.glob('C:\\*')[random.randint(0, (len(glob.glob('C:\\*')) - 1))]
->Target Code:
random.choice(os.listdir('C:\\'))
->Instruction:
choose a random file from the directory contents of the C drive, `C:\\`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: choose a random file from the directory contents of the C drive, `C:\\`. [/INST] CODE: glob.glob('C:\\*')[random.randint(0, (len(glob.glob('C:\\*')) - 1))]
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: choose a random file from the directory contents of the C drive, `C:\\`. [/INST] CODE: random.choice(os.listdir('C:\\'))</s>
--


471=========
->Pred Code:
np.argmax(np.absolute(x))
->Target Code:
max(x.min(), x.max(), key=abs)
->Instruction:
get the highest element in absolute value in a numpy matrix `x`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the highest element in absolute value in a numpy matrix `x`. [/INST] CODE: np.argmax(np.absolute(x))
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: get the highest element in absolute value in a numpy matrix `x`. [/INST] CODE: max(x.min(), x.max(), key=abs)</s>
--


472=========
->Pred Code:
re.findall('http://[^\\s]*', s)
->Target Code:
re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)
->Instruction:
Get all urls within text `s`
->Reconstructed Predication:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get all urls within text `s`. [/INST] CODE: re.findall('http://[^\\s]*', s)
->Raw Input:
[INST] Do not define a function. Do not import anything. Do not write any comments. Generate one line of Python code snippet to satisfy the following description: Get all urls within text `s`. [/INST] CODE: re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)</s>
--

