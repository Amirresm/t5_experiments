{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    return [paren_string[i:j] for i, j in _balanced_parentheses(paren_string)]"}
{"task_id": "HumanEval/1", "completion": "```\ndef separate_paren_groups(paren_string):\n    return paren_string.replace(' ', '').replace('()', '').split('()')\n```\nExplanation:"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number % 1"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "below_zero = lambda operations: any(balance < 0 for balance in map(sum, zip(operations, [0] * len(operations))))"}
{"task_id": "HumanEval/4", "completion": "mean_absolute_deviation = lambda numbers: sum(abs(x - numbers[len(numbers) // 2]) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    return sum(abs(x - numbers[len(numbers)//2]) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "intersperse(numbers: List[int], delimeter: int) -> List[int]: return [delimeter if i < len(numbers) - 1 else numbers[i] for i in range(len(numbers))]"}
{"task_id": "HumanEval/5", "completion": "intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter] + numbers + [delimeter]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string):\n    return [max(map(lambda x: x[0], group)) for group in re.findall(r'\\((?:[^()]|(?R))*\\)', paren_string)]"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(map(len, x.split('('))) for x in paren_string.split()]"}
{"task_id": "HumanEval/7", "completion": "filter_by_substring(strings, substring)"}
{"task_id": "HumanEval/7", "completion": "filter_by_substring(strings, substring)"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_val = 0\n    prod_val = 1\n    for num in numbers:\n        sum_val += num\n        prod_val *= num\n    return sum_val, prod_val"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), prod(numbers)) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers):\n    return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]"}
{"task_id": "HumanEval/11", "completion": "string_xor = lambda a, b: ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(a[i] != b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    return a if b == 0 else greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[0:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/14", "completion": "all_prefixes(string: str) -> List[str]:"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string):\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string]"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    return string.count(substring)"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))"}
{"task_id": "HumanEval/19", "completion": "sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float(\"inf\")\n    min_diff_idx = 0\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_idx = i\n    return (numbers[min_diff_idx], numbers[min_diff_idx + 1])"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float(\"inf\")\n    min_diff_idx = 0\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_idx = i\n    return (numbers[min_diff_idx], numbers[min_diff_idx + 1])"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [i - min(numbers) for i in numbers]"}
{"task_id": "HumanEval/21", "completion": "rescale_to_unit = lambda numbers: [i - min(numbers) for i in numbers] / max(numbers)"}
{"task_id": "HumanEval/22", "completion": "```\nlambda values: [x for x in values if isinstance(x, int)]\n```\nThis code uses a lambda function to filter the input list `values` and return a new list containing only the integers. The lambda function iterates over the input list and uses the `isinstance()` function to check if each element is an integer. If it is, the element is added to the new list. The resulting list is returned by the lambda function."}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "strlen = lambda string: len(string)"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    return [i for i in range(1, n + 1) if n % i == 0]"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    return [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/26", "completion": "```\nnumbers = [1, 2, 3, 2, 4]\n```"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    return string.swapcase()"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/30", "completion": "get_positive = lambda l: [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    return n > 1 and all(n % i for i in range(2, int(n ** 0.5) + 1))"}
{"task_id": "HumanEval/32", "completion": "import math"}
{"task_id": "HumanEval/32", "completion": "import math"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    return [l[i] for i in range(len(l)) if i % 3 != 0] + sorted([l[i] for i in range(len(l)) if i % 3 == 0])"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return sorted(l, key=lambda x: x if x%3 else x%3)"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    return sorted(set(l))"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "max_element(l) = max(l)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/36", "completion": "fizz_buzz(n) = sum(int(7 in str(i)) for i in range(n) if i % 11 == 0 or i % 13 == 0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\nreturn [l[i] if i%2 else sorted(l[i]) for i in range(len(l))]"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    return [l[i] if i % 2 == 0 else sorted(l)[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    return \"\".join(s[3*i:3*i+3] for i in range((len(s)+2)//3))"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "prime_fib = lambda n: (5 ** 0.5 + 1) / 2 ** n * sum(range(n))"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n        if is_prime(a):\n            return a\n    return b"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return int((n * (n - 1)) / 2)"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    return any(i + j == 0 for i in l for j in l)"}
{"task_id": "HumanEval/43", "completion": "pairs_sum_to_zero(l)"}
{"task_id": "HumanEval/44", "completion": "```\ndef change_base(x, base):\n    return bin(x)[2:].zfill(base).replace('0', '1')\n```"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return bin(x)[2:].zfill(base).replace(\"0\", \"1\").replace(\"1\", \"0\")"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return a * h / 2"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return a * h / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    return (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c = 0, 0, 2\n    for _ in range(n-3):\n        a, b, c = b, c, a+b+c"}
{"task_id": "HumanEval/47", "completion": "median = lambda l: sorted(l)[len(l) // 2]"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "```\ndef remove_vowels(text):\n    return ''.join([char for char in text if char not in 'aeiou'])\n```\nThis code defines a function called `remove_vowels` that takes a string as input and returns a new string with all the vowels removed. The function uses a list comprehension to iterate over the characters in the input string and appends each character that is not a vowel to a new string. The resulting string is then returned."}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([char for char in text if char not in 'aeiou'])"}
{"task_id": "HumanEval/52", "completion": "return all(x < t for x in l)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "return all(c in s1 for c in s0) and all(c in s0 for c in s1)"}
{"task_id": "HumanEval/54", "completion": "return all(c in s1 for c in s0) and all(c in s0 for c in s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int): return n if n <= 1 else fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    return n if n <= 1 else fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    return len(brackets) % 2 == 0 and all(brackets.count(c) % 2 == 0 for c in \"<>\")"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1).intersection(set(l2)))"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1).intersection(set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    return next(p for p in range(int(n**0.5), 1, -1) if n % p == 0)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    return len(brackets) % 2 == 0 and brackets.count(\"(\") == brackets.count(\")\")"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "vowels_count = lambda s: len([c for c in s if c in \"aeiouy\" and c != \"y\"])"}
{"task_id": "HumanEval/64", "completion": "vowels_count(s)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return \"\".join(map(str, x%10**shift+10**shift*int(str(x)[:-shift])))"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    return \"\".join(str(x)[shift:] + str(x)[:shift])"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "fruit_distribution(s,n) = n - int(s.split()[0]) - int(s.split()[2])"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    return n - int(s.split()[0]) - int(s.split()[2])"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_index != -1 else []"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] >= lst.count(lst[i]):\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max([i for i in lst if lst.count(i) >= i], default=-1)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: (x, -x))"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x if x != min(lst) else max(lst))"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        return round(math.sqrt(s*(s-a)*(s-b)*(s-c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    return (q == q[::-1] and sum(q) <= w)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    return (q==q[::-1]) and sum(q)<=w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    return min(len(arr), len(arr) // 2)"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    return min(range(len(arr)), key=lambda i: abs(arr[i] - arr[len(arr) - i - 1]))"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return lst1 if sum(len(x) for x in lst1) < sum(len(x) for x in lst2) else lst2"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    return all(i in [2, 3, 5] and a % i == 0 for i in range(2, int(a ** 0.5) + 1))"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    return (a % 2 == 0 and a % 3 == 0 and a % 5 == 0)"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(math.log(x, n))"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(x == n)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a**3 == a"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a**3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABED\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    return sum(int(x) in [2, 3, 5, 7, 11, 13] for x in num)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] for i in range(len(s)-2))"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] or s[i+1] != s[i+2] for i in range(len(s)-2))"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return [grade_letter_map[g] for g in grades]"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    return [grade_map[gpa] for gpa in grades]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return len(string) in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return sum(int(str(i)[0] == \"1\") + int(str(i)[-1] == \"1\") for i in range(10**n))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return sum(int(str(i)[0] == '1') + int(str(i)[-1] == '1') for i in range(10**n))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(N)[2:]"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(N)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[::2])"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2))"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join([sorted(word, key=lambda x: ord(x)) for word in s.split()])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return \"\".join([sorted(word, key=lambda x: ord(x)) for word in s.split()])"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array, key=lambda x: x, reverse=sum(array) % 2 == 0)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    return sorted(array, key=lambda x: x, reverse=sum(array) % 2 == 0)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return \"\".join(chr((ord(c) - ord('a') + 2 * 2) % 26 + ord('a')) for c in s)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return \"\".join(chr((ord(c) - ord('a') + 2 * 2) % 26 + ord('a')) for c in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    return sorted(lst)[1] if len(lst) > 1 else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return sum(1 for c in S if c.startswith(\"I\"))"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S): return S.count(\"I\")"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y + z and isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return (x == y + z) and (type(x) == int) and (type(y) == int) and (type(z) == int)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    return ''.join([chr((ord(c) + 2) % 26 + 65) if c.isalpha() else c for c in message])"}
{"task_id": "HumanEval/93", "completion": "def encode(message): return ''.join([chr((ord(c) + 2) % 26 + 65 if c.isalpha() else c) for c in message])"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_prime = None\n    for i in lst:\n        if is_prime(i) and (largest_prime is None or i > largest_prime):\n            largest_prime = i\n    if largest_prime is not None:\n        return sum(str(largest_prime))\n    else:\n        return None"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    return sum(str(largest_prime)) if largest_prime else 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    return all(type(key) is str and key.islower() for key in dict) or all(type(key) is str and key.isupper() for key in dict)"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    return all(type(key) == str and key.islower() for key in dict) or all(type(key) == str and key.isupper() for key in dict)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    return [x for x in range(2, n+1) if all(x%i for i in range(2, int(x**0.5)+1))]"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    return [x for x in range(2, n+1) if all(x%i for i in range(2, int(x**0.5)+1))]"}
{"task_id": "HumanEval/97", "completion": "multiply(a, b) = a * b"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return a*b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper())"}
{"task_id": "HumanEval/99", "completion": "closest_integer = lambda value: round(float(value)) if abs(round(float(value)) - float(value)) < 0.5 else round(float(value)) // 1 if round(float(value)) // 1 % 2 == 0 else -round(float(value)) // 1"}
{"task_id": "HumanEval/99", "completion": "closest_integer(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n] + [n+2*(i+1) for i in range(n-1)]"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n] + [x for x in range(n+1, n+n, 2)] + [x for x in range(n+1, n+n, 2)]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/101", "completion": "words_string = lambda s: s.split(',') + s.split(' ')"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) // 2\n    return \"0b\" + bin(avg).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(round(avg)).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted(list(set(x)), key=lambda y: y%2==0)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([i for i in x if not any(j % 2 == 0 for j in str(i))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    return [str(i) for i in sorted(arr, reverse=True)]"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    return [f\"{i}\" for i in sorted(arr, reverse=True)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [i if i%2==0 else sum(range(1,i+1)) for i in range(1,n+1)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    return (sum(str(i) == str(i)[::-1] for i in range(1, n+1) if i % 2 == 0),\n            sum(str(i) == str(i)[::-1] for i in range(1, n+1) if i % 2 == 1))"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    return (sum(str(i) == str(i)[::-1] for i in range(1, n+1) if i % 2 == 0),\n            sum(str(i) == str(i)[::-1] for i in range(1, n+1) if i % 2 == 1))"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for i in arr if sum(map(lambda x: abs(x), str(i))) > 0)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum(map(abs, str(num))) > 0)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\nreturn \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\""}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    return \"YES\" if all(n % 2 == 0 for n in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    return {letter: test.count(letter) for letter in set(test)}"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letter_count = {}\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    return letter_count"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\".join(x for x in s if x not in c)\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "odd_count = lambda lst: [sum(int(c) % 2 for c in s) for s in lst]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [len([c for c in s if int(c) % 2]) for s in lst]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    return sum(1 for row in grid for col in row if col == 1 and capacity >= row.count(1))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    return sum(1 for row in grid for col in row if col == 1 and capacity >= row.count(1))"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len([c for c in word if c.islower() and not c.isalpha()]) == n]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    return [word for word in s.split() if len([c for c in word if c not in \"aeiou\"]) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() in \"aeiou\":\n            return word[i]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    for i in range(len(word)-1):\n        if word[i].isalpha() and word[i+1].isalpha() and word[i].islower() and word[i+1].islower():\n            if word[i] in \"aeiou\":\n                return word[i]\n            elif word[i+1] in \"aeiou\":\n                return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return 'Yes' if lst[0] + lst[1] == '()' else 'No'"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return 'Yes' if lst[0] + lst[1] == '()' else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(arr[:k])"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    return sorted([x for x in collatz_sequence(n) if x % 2 != 0])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    return sorted([x for x in collatz_sequence(n) if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date_string):\n    month, day, year = date_string.split('-')\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    return True"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    if date.count('-') != 2:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31 and 2000 <= int(year) <= 2099):\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and not (1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum([1 for i in txt if ord(i) % 2 == 1])"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if txt.isalpha():\n        return [txt]\n    else:\n        return txt.split()\n    return txt.split(\",\")\n    return sum(ord(c) % 2 == 0 for c in txt.lower() if c.isalpha())"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1)) and lst.count(lst[0]) == 1"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length == 1:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length == 1:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for a in arr:\n        product *= 1 if a > 0 else -1 if a < 0 else 0\n    return sum(abs(a) for a in arr) * product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Initialize the minimum path with the first k cells\n    min_path = [grid[0][0]] * k"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Initialize the minimum path length to infinity\n    min_path_length = float('inf')\n    # Initialize the minimum path values to an empty list\n    min_path_values = []\n    # Loop through each cell in the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # Initialize the current path length to 0\n            current_path_length = 0\n            # Initialize the current path values to an empty list\n            current_path_values = []\n            # Loop through each cell in the grid\n            for x in range(len(grid)):\n                for y in range(len(grid[x])):\n                    # If the current cell is the starting cell\n                    if x == i and y == j:\n                        # Add the current cell value to the current path values\n                        current_path_values.append(grid[x][y])\n                        # Increment the current path length\n                        current_path_length += 1\n                    # If the current cell is a neighbor of the starting cell\n                    elif grid[x][y] == grid[i][j]:\n                        # Add the current cell value to the current path values\n                        current_path_values.append(grid[x][y])\n                        # Increment the current path length\n                        current_path_length += 1\n            # If the current path length is less than the minimum path length\n            if current_path_length < min_path_length:\n                # Update the minimum path length\n                min_path_length = current_path_length\n                # Update the minimum path values\n                min_path_values = current_path_values\n    # Return the minimum path values\n    return min_path_values"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    return [1, 3, 2, 8]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\nreturn [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    return n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return True if stack else False"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    return any(string.count(char) % 2 != 0 for char in \"[]\")"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(map(lambda x: int(ceil(x)) ** 2, lst))"}
{"task_id": "HumanEval/133", "completion": "return sum(map(lambda x: int(ceil(x)) ** 2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] != \" \""}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] != \" \""}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    return next((i for i in range(len(arr)-1, -1, -1) if arr[i] > arr[i-1]), -1)"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0 and (largest_neg is None or i > largest_neg):\n            largest_neg = i\n        elif i > 0 and (smallest_pos is None or i < smallest_pos):\n            smallest_pos = i\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0 and (largest_neg is None or i > largest_neg):\n            largest_neg = i\n        elif i > 0 and (smallest_pos is None or i < smallest_pos):\n            smallest_pos = i\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, str):\n        return a if b.startswith(\".\") else float(b)\n    elif isinstance(a, str) and isinstance(b, float):\n        return b if a.startswith(\".\") else float(a)\n    else:\n        return a if a > b else b"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return (n % 2 == 0) and (n % 4 == 0)"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return n * special_factorial(n-1)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return n * special_factorial(n-1) if n > 1 else 1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return re.sub(r' {2,}', '-', text.replace(' ', '_'))"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return re.sub(r'\\s+', lambda m: '-' if len(m.group()) > 2 else '_', text)"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha() and not file_name[0].isdigit():\n        return 'No'\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) > 3 or len(file_name) < 1:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "sum_squares = lambda lst: sum(x**(1 if i%3 else (1 if i%4 else 3)) for i, x in enumerate(lst))"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(x**(3 if i % 3 == 0 else 2) for i, x in enumerate(lst))"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    return \" \".join([word for word in sentence.split() if is_prime(len(word))])"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    return \" \".join(word for word in sentence.split() if is_prime(len(word)))"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    return (int(x_numerator) * int(n_numerator)) % int(x_denominator) == 0"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_numerator, x_denominator = x.split(\"/\")\n    n_numerator, n_denominator = n.split(\"/\")\n    if int(x_numerator) * int(n_denominator) == int(x_denominator) * int(n_numerator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return sum(1 for i in nums if i > 10 and (i % 10) % 2 == 1)"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return sum(1 for i in nums if i > 10 and (i%10)%2 == 1)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    return sum(1 for i in range(n-2) if a[i] + a[i+1] + a[i+2] % 3 == 0)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    return sum(1 for i in range(1, n) if i * i - i + 1 in range(3, 3 * n + 1, 3))"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"] or planet2 not in [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]:\n        return ()\n    else:\n        planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        return tuple(planets[index1+1:index2+1])"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    else:\n        return tuple(planet_names[planet1_index+1:planet2_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0)"}
{"task_id": "HumanEval/151", "completion": "double_the_difference = lambda lst: sum([i**2 for i in lst if i%2!=0])"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Find the strongest extension and return a string in this format: ClassName.StrongestExtensionName\n    \"\"\"\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = extension.count(extension.upper()) - extension.count(extension.lower())\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    return f\"{class_name}.{max(extensions, key=lambda x: (len(x.upper()) - len(x.lower())))}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return b in a or any(b in a[i:] for i in range(len(a)))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(b in a[i:] for i in range(len(a)))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    return (num % 2 == 0, num % 2 != 0)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    return (num//10, num%10)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    return ''.join([\n        'm' * (number // 1000),\n        'cm' * ((number % 1000) // 900),\n        'd' * ((number % 900) // 500),\n        'cd' * ((number % 500) // 400),\n        'c' * ((number % 400) // 100),\n        'xc' * ((number % 100) // 90),\n        'l' * ((number % 90) // 50),\n        'xl' * ((number % 50) // 40),\n        'x' * ((number % 40) // 10),\n        'ix' * ((number % 10) // 9),\n        'v' * ((number % 9) // 5),\n        'iv' * ((number % 5) // 4),\n        'i' * (number % 4)\n    ])"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    return ''.join([\n        'm' * (number // 1000),\n        'cm' * ((number % 1000) // 900),\n        'd' * ((number % 900) // 500),\n        'cd' * ((number % 500) // 400),\n        'c' * ((number % 400) // 100),\n        'xc' * ((number % 100) // 90),\n        'l' * ((number % 90) // 50),\n        'xl' * ((number % 50) // 40),\n        'x' * ((number % 40) // 10),\n        'ix' * ((number % 10) // 9),\n        'v' * ((number % 9) // 5),\n        'iv' * ((number % 5) // 4),\n        'i' * ((number % 4) // 1)\n    ])"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2)"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2)"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda x: len(set(x)))"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return (number + need, remaining - need)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need)]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    return eval(\"\".join([str(operand[i]) + operator[i] + str(operand[i+1]) for i in range(len(operator)-1)]))"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        result = result + operator[i-1] * operand[i]"}
{"task_id": "HumanEval/161", "completion": "```\ndef solve(s):\n    return \"\".join([c.lower() if c.isalpha() else c for c in s])\n```"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    return \"\".join([c.lower() if c.isalpha() else c for c in s])"}
{"task_id": "HumanEval/162", "completion": "import hashlib"}
{"task_id": "HumanEval/162", "completion": "import hashlib"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x%2==0]"}
