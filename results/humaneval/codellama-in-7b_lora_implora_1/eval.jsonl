{"task_id": "HumanEval/0", "completion": "from math import fabs\n    if fabs(numbers[0]-numbers[1]) > threshold:\n        return False\n    if fabs(numbers[1]-numbers[2]) > threshold:\n        return False\n    if fabs(numbers[2]-numbers[0]) > threshold:\n        return False\n    return True"}
{"task_id": "HumanEval/1", "completion": "# Write your code here.\ndef separate_paren_groups(paren_string):\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # list of groups of parentheses\n    groups = []\n    # list of strings\n    strings = []\n    # length of the string\n    length = len(paren_string)\n    # index of the current group\n    index = 0\n    # index of the current string\n    string_index = 0\n    # the current group\n    group = \"\"\n    # the current string\n    string = \"\"\n    # while the index is less than the length of the string\n    while index < length:\n        # if the character is an opening brace"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1)."}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers):\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    return (sum(abs(x - numbers[0])) / len(numbers))"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    res = []\n    for i in range(0, len(numbers), 2):\n        res.append(numbers[i])\n        res.append(delimeter)\n    res.append(numbers[-1])\n    return res"}
{"task_id": "HumanEval/6", "completion": "\"\"\"\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_levels = []\n    for char in paren_string:\n        if char == '(':\n            paren_levels.append(0)\n        elif char == ')':\n            paren_levels.append(paren_levels[-1] + 1)\n    return paren_levels"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n        \"\"\" Filter an input list of strings only for ones that contain given substring\n        Examples:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        \"\"\"\n        filtered_strings = []\n        for string in strings:\n            if substring in string:\n                filtered_strings.append(string)\n        return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"task_id": "HumanEval/9", "completion": "rolling_max = []\n    for i in range(len(numbers)):\n        rolling_max.append(max(numbers[:i+1]))\n    return rolling_max"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string):\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return ''\n    if len(string) == 1:\n        return string\n    if is_palindrome(string):\n        return string\n    prefix = string[:len(string)//2]\n    suffix = string[len(string)//2:]\n    if len(prefix) == 0:\n        return suffix\n    if len(suffix) == 0:\n        return prefix\n    if is_palindrome(prefix):\n        return prefix + suffix\n    if is_"}
{"task_id": "HumanEval/11", "completion": "a = list(map(int, a))\n    b = list(map(int, b))\n    return \"\".join(map(str, list(map(lambda x, y: x ^ y, a, b))))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List"}
{"task_id": "HumanEval/15", "completion": "return \" \".join(map(str, range(n)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string):\n    \"\"\" Find the number of distinct characters in a given string.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string):\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last."}
{"task_id": "HumanEval/18", "completion": "import re\n  return (re.findall(r\"\\b%s\\b\" % substring, string))"}
{"task_id": "HumanEval/19", "completion": "# Split the string into numbers\n    numbers = numbers.split()\n    # Create a dictionary with the number as key and the index as value\n    index_dict = dict(zip(numbers, range(len(numbers))))\n    # Sort the dictionary by the index\n    index_dict = sorted(index_dict.items(), key=lambda x: x[1])\n    # Return the sorted string\n    return ''.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    \"\"\" Find the two closest elements in a given list of numbers.\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    [2.0, 2.2]\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    [2.0, 2.0]\n    \"\"\"\n    return (min(numbers), max(numbers))"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    max_num = max(numbers)\n    min_num = min(numbers)\n    return [num / max_num for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "return list(filter(lambda x: type(x) == int, values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "from math import sqrt\n    n = int(n)\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n // i\n            i += 1\n        else:\n            i += 1\n    return n"}
{"task_id": "HumanEval/25", "completion": "import math\n    from collections import defaultdict\n    \n    def factorize(n):\n        factors = defaultdict(int)\n        for i in range(1,int(math.sqrt(n))+1):\n            if n % i == 0:\n                factors[i] += 1\n                factors[n // i] += 1\n        return factors\n    \n    return factorize(n)"}
{"task_id": "HumanEval/26", "completion": "return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return (string.lower() if string.islower() else string.upper())"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return (filter(lambda x: x.startswith(prefix), strings))"}
{"task_id": "HumanEval/30", "completion": "return list(filter(lambda x: x > 0, l))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n        \"\"\" Return true if a given number is prime, and false otherwise.\n        >>> is_prime(6)\n        False\n        >>> is_prime(101)\n        True\n        >>> is_prime(11)\n        True\n        >>> is_prime(13441)\n        True\n        >>> is_prime(61)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(1)\n        False\n        \"\"\"\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(n)"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    x = 0\n    for i in range(len(xs) - 1):\n        x = x + xs[i] * math.pow(x, i + 1)\n    return x"}
{"task_id": "HumanEval/33", "completion": "l.sort()\n    l.sort(key=lambda x: x % 3)\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    \"\"\" Return sorted unique elements in a list.\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l' = list(l)\n    for i in range(0,len(l)):\n        if (i % 2 == 0):\n            l'[i] = l[i]\n    return l'"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    \"\"\"\n    Returns the nth prime number.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    \"\"\"\n    if n < 2:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    if n % 3 == 0:\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest."}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    \"\"\" Find if there are three distinct elements in the given list that sum to zero.\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    else:\n        for i in range(len(l) - 2):\n            if l[i] + l[i + 1] + l[i + 2] == 0:\n                return True\n        return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n    This function outputs the number of such collisions.\n    \"\"\"\n    cars = [0] * n\n    cars[0] = 1\n    for i in range(1, n):\n        cars[i] = cars[i - 1] + cars[i - 2]\n    return cars[n - 1]"}
{"task_id": "HumanEval/42", "completion": "incr_list = [x+1 for x in l]\n    return incr_list"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    pairs = set()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                pairs.add((l[i], l[j]))\n    return (len(pairs) >"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "completion": "return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    \"\"\" The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    \"\"\"\n    if n < 4:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "return (text == text[::-1])"}
{"task_id": "HumanEval/49", "completion": "from math import log\n    from math import pow\n    from math import sqrt\n    from math import floor\n    from math import ceil\n    from math import fmod\n    from math import gcd\n    from math import isqrt\n    from math import trunc\n    from math import radians\n    from math import degrees\n    from math import sin\n    from math import cos\n    from math import tan\n    from math import asin\n    from math import acos\n    from math import atan\n    from math import hypot\n    from math import hypot2\n    from math import hypot3\n    from math import hypot4\n    from math import hypot5\n    from math import hypot6\n    from math import hypot7\n    from math import hypot8\n    from math import hypot9\n    from math import hypot10\n    from math import hypot11\n    from math import hypot12\n    from math import hypot13\n    from math import hypot14\n    from math import hypot15\n    from math import hypot16\n    from math import hyp"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\" Remove all vowels from a given string.\n    >>> remove_vowels('abcdefghijklmnopqrstuvwxyz')\n    'bcdfghijklmnopqrstuvwxyz'\n    >>> remove_vowels('aBcDeFgHiJkLmNoPqRsTUvWxYz')\n    'bcdefghijklmnopqrstuvwxyz'\n    >>> remove_vowels('abcdefghijklmnopqrstuvwxyz')\n    'bcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    vowels = \"aeiou\"\n    return (re.sub(r\"[%s]\" % vowels, \"\", text))"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all([x < t for x in l])"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n        \"\"\"Add two numbers x and y\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n        \"\"\"\n. [/INST]  CODE:\n \n \n    def add(x: int, y: int):\n        \"\"\"Add two numbers x and y\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n        \"\"\"\n. [/INST]  CODE:\n \n \n    def add(x: int, y: int):\n        \"\"\"Add two numbers x and y\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n        \"\"\"\n. [/INST]  CODE:\n \n \n    def add(x: int, y: int):\n        \"\"\"Add two numbers x and y\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n        \"\"\"\n."}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\" Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabce')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    \"\"\"\n    return (set(s0) == set(s1))"}
{"task_id": "HumanEval/55", "completion": "return fib_iter(n)"}
{"task_id": "HumanEval/56", "completion": "\"\"\"\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    \"\"\"\n    # Find the number of opening brackets\n    opening_brackets = brackets.count(\"<\")\n    # Find the number of closing brackets\n    closing_brackets = brackets.count(\">\")\n    # If the number of opening brackets is equal to the number of closing brackets,\n    # then the brackets are balanced.\n    if opening_brackets == closing_brackets:\n        return True\n    return False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "return (heapq.nlargest(1, list(filter(lambda x: is_not_prime(x), range(1, n + 1))))[0])"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    \"\"\"Sum numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1,n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    Examples:\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    \"\"\"\n    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n     \"\"\" xs represent coefficients of a polynomial.\n     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n     >>> derivative([3, 1, 2, 4, 5])\n     [1, 4, 12, 20]\n     >>> derivative([1, 2, 3])\n     [2, 6]\n     \"\"\"\n     if len(xs) == 1:\n         return [1]\n     else:\n         return [xs[1]] + derivative(xs[1:])\n     return None"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "vowels_count = 0\n    for i in s:\n        if i in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n            vowels_count += 1\n        if i == \"y\":\n            vowels_count += 1\n    return vowels_count"}
{"task_id": "HumanEval/65", "completion": ">>> circular_shift(12, 3)\n  \"123\"\n  >>> circular_shift(12, 4)\n  \"1234\"\n  >>> circular_shift(12, 5)\n  \"12345\"\n  \"\"\"\n  shift = shift % len(str(x))\n  if shift == 0:\n    return str(x)\n  else:\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\" Sum of all upper case characters.\n    >>> digitSum(\"hello\")\n    131\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"helloE\")\n    69\n    \"\"\"\n    return sum(map(ord,s.upper()))"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index."}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    \"\"\" Find the greatest integer greater than 0 that occurs in the given list.\n    Examples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    if count == 0:\n        return -1\n    else:\n        return count"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    \"\"\" Sort the given list in strange order.\n    >>> strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if (len(lst) == 0):\n        return []\n    else:\n        return [lst[0],lst[-1]] + strange_sort_list(lst[1:-1])"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    \"\"\" Return the area of a triangle.\n    >>> triangle_area(3, 4, 5)\n    6.00\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    \"\"\" Write a function that returns True if the object q will fly, and False otherwise.\n    >>> will_it_fly([1, 2], 5)\n    False\n    >>> will_it_fly([3, 2, 3], 1)\n    False\n    >>> will_it_fly([3, 2, 3], 9)\n    True\n    \"\"\"\n    if len(q) == 1:\n        return True\n    if sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\" Find the minimum number of elements that need to be changed to make the array palindromic.\n    >>> smallest_change([1,2,3,5,4,7,9,6])\n    4\n    >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if n == 3:\n        if arr[0] == arr[1] and arr[1] == arr[2]:\n            return 0\n        elif arr[0] == arr[1] and arr[1]!= arr[2]:\n            return 1\n        elif arr[0]!= arr[1] and arr[1] == arr[2]:\n            return"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    \"\"\" Find the total number of characters in the given list of strings.\n    >>> total_match(['hi', 'admin'], ['hI', 'Hi'])\n    ['hI', 'Hi']\n    >>> total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ['hi', 'admin']\n    >>> total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n    ['hI', 'hi', 'hi']\n    >>> total_match(['4'], ['1', '2', '3', '4', '5'])\n    ['4']\n    \"\"\"\n    total_match = []\n    for i in lst1:\n        for j in lst2:\n            if len(i) < len(j):\n                total_match.append(i)\n                break\n            elif len(i) == len(j):\n                total_match.append(i)\n                break\n    return total_match"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\" Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    >>> is_multiply_prime(30)\n    True\n    >>> is_multiply_prime(29)\n    False\n    >>> is_multiply_prime(11)\n    False\n    \"\"\"\n    if a < 100:\n        for i in range(2, int(math.sqrt(a)) + 1):\n            if a % i == 0:\n                return False\n        return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\" Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\" Write a function that takes an integer a and returns True if this ingeger is a cube of some integer number.\n    Examples:\n    >>> iscube(1)\n    True\n    >>> iscube(2)\n    False\n    >>> iscube(-1)\n    True\n    >>> iscube(64)\n    True\n    >>> iscube(0)\n    True\n    >>> iscube(180)\n    False\n    \"\"\"\n    if (a < 0):\n        return False\n    if (a == 0):\n        return True\n    if (a % 3 == 0):\n        return iscube(a / 3)\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\" You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Primes are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\" Convert a decimal number to binary format.\n    Examples:\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(32)\n    '100000'\n    >>> decimal_to_binary(0)\n    '0'\n    \"\"\"\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        remainder = decimal % 2\n        decimal = decimal // 2\n        binary = str(remainder) + binary\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    n = len(s)\n    if n < 3:\n        return False\n    if n % 3 == 0:\n        return False\n    if s[n-1] == s[n-2] == s[n-3]:\n        return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n        GPA       |    Letter grade\n        > 4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\" Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    result = False\n    for i in range(2,int(math.sqrt(len(string)))):\n        if (len(string) % i == 0):\n            result = True\n    return result"}
{"task_id": "HumanEval/83", "completion": "# Write your code here."}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\" Given a positive integer N, return the total sum of its digits in binary.\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \"\"\"\n    return str(bin(N)[2:])"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.."}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(s)):\n        if s[i] == ' ':\n            new_string += ' '\n        else:\n            new_string += chr(ord(s[i]) + 1)\n    return new_string"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    row_coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row_coords.append((i, j))\n    return row_coords"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    >>> sort_array([])\n    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1, 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n    [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if (len(array) == 0):\n        return []\n    elif (len(array) == 1):\n        return [array[0]]\n    else:\n        # Sort the array in ascending order"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\" Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    res = \"\"\n    for i in s:\n        res += chr(ord(i) + 2)\n    return res"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"\n    if len(lst) == 0:\n        return None\n    smallest = heapq.nsmallest(2, lst)[1]\n    return smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \".\" or S[i] == \"?\" or S[i] == \"!\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\" Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    >>> any_int(5, 2, 7)\n    True\n    >>> any_int(3, 2, 2)\n    False\n    >>> any_int(3, -2, 1)\n    True\n    \"\"\"\n    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = \"\"\n    for c in message:\n        if c.isalpha():\n            new_message += c.lower()\n        else:\n            new_message += c\n    return new_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n        \"\"\"You are given a list of integers.\n        You need to find the largest prime value and return the sum of its digits.\n        >>> skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n        10\n        >>> skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n        25\n        >>> skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n        13\n        >>> skjkasdkd([0,724,32,71,99,32,6,0,5,"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\" Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n    True\n    >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n    False\n    >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n    False\n    \"\"\"\n    if dict == {}:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n        if key.islower():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    prime_list = []\n    for i in range(2,n+1):\n        if is_not_prime(i):\n            prime_list.append(i)\n    return prime_list"}
{"task_id": "HumanEval/97", "completion": "return (a * b) % (10**9 + 7)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\" Count the number of uppercase vowels in even indices.\n    >>> count_upper('aBCdEf')\n    1\n    >>> count_upper('abcdefg')\n    0\n    >>> count_upper('dBBE')\n    0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n        \"\"\"\n        Create a function that takes a value (string) representing a number\n        and returns the closest integer to it. If the number is equidistant\n        from two integers, round it away from zero.\n        >>> closest_integer(\"10\")\n        10\n        >>> closest_integer(\"15.3\")\n        15\n        \"\"\"\n        value = float(value)\n        if value % 1 == 0:\n            return int(value)\n        else:\n            return int(value) + (1 if value > 0 else -1)"}
{"task_id": "HumanEval/100", "completion": "pile = []\n    if n % 2 == 1:\n        pile.append(n)\n        n += 1\n    else:\n        pile.append(n)\n        n += 2\n    while n > 1:\n        if n % 2 == 1:\n            pile.append(n)\n            n += 1\n        else:\n            pile.append(n)\n            n += 2\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    >>> words_string(\"Hi, my name is John\")\n    ['Hi', 'my', 'name', 'is', 'John']\n    >>> words_string(\"One, two, three, four, five, six\")\n    ['One', 'two', 'three', 'four', 'five', 'six']\n    \"\"\"\n    return (s.split(','))"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\" Find the biggest even number in the range [x, y] inclusive.\n    >>> choose_num(12, 15)\n    14\n    >>> choose_num(13, 12)\n    -1\n    >>> choose_num(12, 12)\n    12\n    \"\"\"\n    if (x % 2 == 0 and y % 2 == 0): \n        return max(x, y)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\" You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(round(float(n+m)/2))[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\" Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    Note: Returned list should be sorted in increasing order.\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x: \n        if (i % 2 == 0): \n            result.append(i) \n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"."}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return [n] + f(n-1)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n        \"\"\" Find the number of even and odd palindromes within the range(1,n)\n        >>> even_odd_palindrome(3)\n        (1, 2)\n        >>> even_odd_palindrome(12)\n        (4, 6)\n        \"\"\"\n        even_palindrome = 0\n        odd_palindrome = 0\n        for i in range(1, n+1):\n            if (i % 2 == 0):\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n        return (even_palindrome, odd_palindrome)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\" Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\" We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved\n    to the starting position in the array i.e. 0th index.\n    If it is possible to obtain the sorted array by performing the above\n    operation then return True else return False.\n    If the given array is empty then return True.\n    Note: The given list is guaranteed to have unique elements.\n    For Example:\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n    be"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n    \"YES\"\n    >>> exchange([1, 2, 3, 4], [1,"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\" Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    >>> histogram('a b c')\n    {'a': 1, 'b': 1, 'c': 1}\n    >>> histogram('a b b a')\n    {'a': 2, 'b': 2}\n    >>> histogram('a b c a b')\n    {'a': 2, 'b': 2}\n    >>> histogram('b b b b a')\n    {'b': 4}\n    >>> histogram('')\n    {}\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    \"\"\"\n    Reverse and delete the characters in a string.\n    >>> reverse_delete('abcde', 'ae')\n    'bcd'\n    >>> reverse_delete('abcdef', 'b')\n    'acdef'\n    >>> reverse_delete('abcdedcba', 'ab')\n    'cdedc'\n    \"\"\"\n    return (s[::-1],False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for i in lst:\n        res.append(\"the number of odd elements \" + str(len(i)) + \"n the str\" + str(len(i)) + \"ng \" + str(len(i)) + \" of the \" + str"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\" Find the minimum sum of any non-empty sub-array of the given array.\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    >>> minSubArraySum([1, 2, 3])\n    6\n    >>> minSubArraySum([-2, -1, -3, -4, -5])\n    -10\n    \"\"\"\n    sum_nums = sum(nums)\n    min_sum = sum_nums\n    min_start = 0\n    min_end = 0\n    for i in range(len(nums)):\n        sum_nums -= nums[i]\n        if sum_nums < min_sum:\n            min_sum = sum_nums\n            min_start = i + 1\n            min_end = i + 1\n        if sum_nums >= 0:\n            sum_nums = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\" Find the maximum number of times to lower the buckets to empty the wells.\n    >>> max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\n    6\n    >>> max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\n    5\n    >>> max_fill([[0,0,0], [0,0,0]], 5)\n    0\n    \"\"\"\n    # Find the maximum number of times to lower the buckets to empty the wells.\n    # If the wells are not full, then the number of times to lower the buckets is 0.\n    max_fill = 0\n    for i in range(len(grid)):\n        if grid[i][0] == 1:\n            max_fill += capacity\n        else:\n            max_fill += 1\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\" Sort the given array of non-negative integers according to number of ones in their binary representation in ascending order.\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\n    arr.sort(key=lambda x: bin(x).count('1'))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if (s[i] in \"aeiouAEIOU\"):\n            continue\n        else:\n            if (n == 1):"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\" You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n    You may assume that the given string contains English letter only.\n    >>> get_closest_vowel(\"yogurt\")\n    \"u\"\n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"quick\")\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \"\"\"\n    vowels = 'aeiou'\n    vowels_index = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_index = i\n            break\n    if vowels_index == 0:\n        return \"\"\n    if vowels_index == len("}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\" Check if the given list of strings are balanced or not.\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    >>> match_parens(['()', ')'])\n    'No'\n    \"\"\"\n    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": ""}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\" Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    >>> solution([5, 8, 7, 1])\n    12\n    >>> solution([3, 3, 3, 3, 3])\n    9\n    >>> solution([30, 13, 24, 321])\n    0\n    \"\"\"\n    return sum(filter(lambda x: x % 2 == 1, lst))"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\" Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    Examples:\n    >>> add_elements([111,21,3,4000,5,6,7,8,9], 4)\n    24\n    >>> add_elements([111,21,3,4000,5,6,7,8,9], 3)\n    22\n    >>> add_elements([111,21,3,4000,5,6,7,8,9], 2)\n    20\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence."}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\" You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    for example: \n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False"}
{"task_id": "HumanEval/125", "completion": "return (re.split(r\"\\s+\", txt))"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\" Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    >>> is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n    >>> is_sorted([1, 2, 2, 2, 3, 4])"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\" Find the intersection of two intervals.\n    >>> intersection((1, 2), (2, 3))\n    [2, 3]\n    >>> intersection((-1, 1), (0, 4))\n    [0, 1]\n    >>> intersection((-3, -1), (-5, 5))\n    [-3, -1]\n    \"\"\"\n    if (interval1[0] > interval2[1]) or (interval1[1] < interval2[0]):\n        return []\n    return [max(interval1[0], interval2[0]), min(interval1[1], interval2[1])]"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    >>> prod_signs([1, 2, 2, -4])\n    -9\n    >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    None\n    \"\"\"\n    if not arr:\n        return None\n    res = 0\n    for i in arr:\n        res += i * (i > 0) * (i < 0)\n    return res"}
{"task_id": "HumanEval/129", "completion": "def min_path(grid, k):\n    \"\"\" Find the minimum path of length k in the given grid.\n    >>> min_path([[1,2,3], [4,5,6], [7,8,9]], 3)\n    [1, 2, 1]\n    >>> min_path([[5,9,3], [4,1,6], [7,8,2]], 1)\n    [1]\n    \"\"\"\n    # Create a matrix to keep track of the minimum path\n    min_path = [[0] * len(grid[0]) for i in range(len(grid))]\n    # Set the initial values\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if i == 0 and j == 0:\n                min_path[i][j] = grid[i][j]\n            elif i == 0:\n                min_path[i][j] = min_path[i][j-1] + grid[i][j]\n            elif j == 0:\n                min_path["}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\" Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n            = 2 + 3 + 3 = 8 \n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1,3]\n    else:\n        return [1,3] + tri(n-2) + tri(n-1)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return digits(n/2) * 2\n    else:\n        return digits(n/2) * 2 + 1"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    \"\"\" Check if a string is nested or not.\n    Examples:\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[][]')\n    True\n    >>> is_nested('[]')\n    False\n    \"\"\"\n    if (string.count('[')!= string.count(']')):\n        return False\n    if (string.count('[')) == 0:\n        return True\n    if (string.count(']')) == 0:\n        return True\n    return is_nested(string[1:-1])"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n        \"\"\"You are given a list of numbers.\n        You need to return the sum of squared numbers in the given list,\n        round each element in the list to the upper int(Ceiling) first.\n        Examples:\n        For lst = [1,2,3] the output should be 14\n        For lst = [1,4,9] the output should be 98\n        For lst = [1,3,5,7] the output should be 84\n        For lst = [1.4,4.2,0] the output should be 29\n        For lst = [-2.4,1,1] the output should be 6\n        \"\"\"\n        return sum(map(lambda x: x**2, lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\" Check if the last character of a given string is an alphabetical character.\n    >>> check_if_last_char_is_a_letter(\"apple pie\")\n    False\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    True\n    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    False\n    \"\"\"\n    return (txt[-1] not in 'aeiouAEIOU')"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\" Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    >>> can_arrange([1,2,4,3,5])\n    3\n    >>> can_arrange([1,2,3])\n    -1\n    \"\"\"\n    max_index = 0\n    for i in range(1,len(arr)):\n        if arr[i] > arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\" Find the largest and smallest integers in a given list.\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (7, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if (len(lst) == 0): \n        return (None, None)\n    largest = max(lst)\n    smallest = min(lst)\n    if (largest > 0): \n        return (largest, smallest)\n    else:\n        return (smallest, largest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\" Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    >>> is_equal_to_sum_even(4)\n    False\n    >>> is_equal_to_sum_even(6)\n    False\n    >>> is_equal_to_sum_even(8)\n    True\n    \"\"\"\n    return (n % 2 == 0 and n % 4 == 0)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\" The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 1\n    return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Replace all spaces in a string with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -.\n    >>> fix_spaces(\"Example\")\n    \"Example\"\n    >>> fix_spaces(\"Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example   3\")\n    \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    if text.count(\"_\") > 2:\n        text = text.replace(\"_\", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\" Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3:\n        return \"No\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\" Sum the squares of all integers in a given list.\n    >>> sum_squares([1,2,3])\n    6\n    >>> sum_squares([1,2,3,4])\n    24\n    >>> sum_squares([-1,-5,2,-1,-5])\n    -126\n    \"\"\"\n    sum_squares = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum_squares += i ** 2\n        elif i % 4 == 0:\n            sum_squares += i ** 3\n    return sum_squares"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one."}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers."}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list."}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n        \"\"\"Write a function that takes an array of numbers as input and returns \n        the number of elements in the array that are greater than 10 and both \n        first and last digits of a number are odd (1, 3, 5, 7, 9).\n        For example:\n        specialFilter([15, -73, 14, -15]) => 1 \n        specialFilter([33, -2, -3, 45, 21, 109]) => 2\n        \"\"\"\n        count = 0\n        for i in nums:\n            if (i > 10 and (i % 10 == 1 or i % 10 == 3 or i % 10 == 5 or i % 10 == 7 or i % 10 == 9)):\n                count += 1\n        return count\n    \n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return (sum(a) % 3)"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    \"\"\" Find all planets whose orbits are located between the orbit of planet1 and the orbit of planet2.\n    Examples:\n    >>> bf(\"Jupiter\", \"Neptune\")\n    (\"Saturn\", \"Uranus\")\n    >>> bf(\"Earth\", \"Mercury\")\n    (\"Venus\")\n    >>> bf(\"Mercury\", \"Uranus\")\n    (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    if planet1 in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] and planet2 in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return (planet1, planet2)\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\" Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    new_lst.sort()\n    return"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise."}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\" Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers.\n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    \"\"\"\n    if (not lst):\n        return 0\n    res = 0\n    for i in lst:\n        if (i % 2 == 1):\n            res += i ** 2\n    return res"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a,b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if (a == b):\n        return True\n    if (b in a):\n        return True\n    if (len(a)!= len(b)):\n        return False\n    for i in range(len(a)):\n        if (a[i] == b[i]):\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively."}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral = ''\n    while number >= 1000:\n        roman_numeral += 'M'\n        number -= 1000\n    while number >= 500:\n        roman_numeral += 'D'\n        number -= 500\n    while number >= 100:\n        roman_numeral += 'C'\n        number -= 100\n    while number >= 50:\n        roman_numeral += 'L'\n        number -= 50\n    while"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\" Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\" Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    >>> find_max([\"name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])\n    \"\"aaaaaaa\"\n    \"\"\"\n    max_words = \"\"\n    max_char = 0\n    for word in words:\n        char = len(set(word))\n        if char > max_char:\n            max_words = word\n            max_char = char\n    return max_words"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\" You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    >>> eat(5, 6, 10)\n    [11, 4]\n    >>> eat(4, 8, 9)\n    [12, 1]\n    >>> eat(1, 10, 10)\n    [11, 0]\n    >>> eat(2, 11, 5)\n    [7, 0]\n    \"\"\"\n    if number > need:\n        return [number - need, remaining]\n    else:\n        return [number, remaining - number]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression."}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"Reverse the case of each letter in a given string.\n    >>> solve(\"1234\")\n    \"4321\"\n    >>> solve(\"ab\")\n    \"AB\"\n    >>> solve(\"#a@C\")\n    \"#A@c\"\n    \"\"\"\n    return (s.replace(\"a\",\"A\").replace(\"b\",\"B\").replace(\"c\",\"C\").replace(\"d\",\"D\").replace(\"e\",\"E\").replace(\"f\",\"F\").replace(\"g\",\"G\").replace(\"h\",\"H\").replace(\"i\",\"I\").replace(\"j\",\"J\").replace(\"k\",\"K\").replace(\"l\",\"L\").replace(\"m\",\"M\").replace(\"n\",\"N\").replace(\"o\",\"O\").replace(\"p\",\"P\").replace(\"q\",\"Q\").replace(\"r\",\"R\").replace(\"s\",\"S\").replace(\"t\",\"T\").replace(\"u\",\"U\").replace(\"v\",\"V\").replace(\"w\",\"W\").replace(\"x\",\"X\").replace(\"y\",\"Y\").replace(\"z\",\"Z\"))"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "import itertools\n  return list(itertools.islice(itertools.cycle(range(a, b+1)), 0, b-a+1))"}
