{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "re.findall('\\\\(((?:[^()]|\\\\([^()]\\\\))*)\\\\)', '( ) (()) (( )( ))')"}
{"task_id": "HumanEval/2", "completion": "truncate_number(3.5)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    balance = 0\n    for x in operations:\n        balance -= x\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "sum(map(lambda x: abs(x - 2.5), [1.0, 2.0, 3.0, 4.0])) * 1.0 / 3"}
{"task_id": "HumanEval/5", "completion": "[a for pair in zip(numbers, iter([delimiter] * (len(numbers) - 1))) for a in pair]"}
{"task_id": "HumanEval/6", "completion": "[len(item) for item in re.findall('\\\\([^()]+\\\\)', '(()()) ((())) () ((())()())')]"}
{"task_id": "HumanEval/7", "completion": "[s for s in ['abc', 'bacd', 'cde', 'array'] if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    return (sum(numbers), prod(numbers))"}
{"task_id": "HumanEval/9", "completion": "[max(numbers[i:]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string):\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    while not is_palindrome(string):\n        string += string[0]\n    return string"}
{"task_id": "HumanEval/11", "completion": "bin(int(a, 2) ^ int(b, 2))[2:]"}
{"task_id": "HumanEval/12", "completion": "longest = lambda strings: max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    return a if not b else greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "return [string[0:i] for i in range(1, len(string))]"}
{"task_id": "HumanEval/15", "completion": "print(' '.join(str(i) for i in range(n)))"}
{"task_id": "HumanEval/16", "completion": "len(set(string.upper()))"}
{"task_id": "HumanEval/17", "completion": "[int(x.split('|')[0]) for x in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "sorted(['three', 'one', 'five'])"}
{"task_id": "HumanEval/20", "completion": "min(zip(abs(2 - list(range(2, 5))), list(range(2, 5))))"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "[x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "len(string)"}
{"task_id": "HumanEval/24", "completion": "int(math.sqrt(n))"}
{"task_id": "HumanEval/25", "completion": "def factorize(n):\n    factors = [i for i in range(1, int(n ** 0.5) + 1) if n % i == 0]\n    return [factor for factor in factors for i in range(factors.count(factor))]"}
{"task_id": "HumanEval/26", "completion": "list(OrderedDict.fromkeys([2, 3, 2, 4]))"}
{"task_id": "HumanEval/27", "completion": "string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "\"\"\"\"\"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "[s for s in ['abc', 'bcd', 'cde', 'array'] if s.startswith('a')]"}
{"task_id": "HumanEval/30", "completion": "[x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number `n` is prime, and false otherwise.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "round(poly([-6, 11, -6, 1], 1), 2)"}
{"task_id": "HumanEval/33", "completion": "sorted(l, key=lambda x, i, l, f=lambda i, x, l, g=lambda i, x, l, n=lambda i, x, l, n, g=lambda i, x, l, n, g, f=lambda i, x, l, n, g: g(i, x, l, n): f(i, x, l, g)])"}
{"task_id": "HumanEval/34", "completion": "sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "max(l)"}
{"task_id": "HumanEval/36", "completion": "sum(int(x) % 10 == 7 for x in str(n))"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    l[1::2].sort()\n    return l"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    def cycle(c):\n        return c[1:] + c[0]\n    return ''.join(cycle(s[i:i + 3]) for i in range(0, len(s), 3))"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n        if a % 2 == 0:\n            return prime_fib(n)\n    return a"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    s = set()\n    for x in l:\n        for y in s:\n            if x + y == 0:\n                return True\n        s.add(x)\n    return False"}
{"task_id": "HumanEval/41", "completion": "(n * (n - 1)) // 2"}
{"task_id": "HumanEval/42", "completion": "[x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    s = set()\n    for x in l:\n        if x in s:\n            return True\n        s.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "str(int(bin(x)[2:])[::-1])"}
{"task_id": "HumanEval/45", "completion": "return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return a + b + c + d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) / 2]\n    return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text):\n    return text.lower().split()[0] == text[::-1].lower().split()[0]"}
{"task_id": "HumanEval/49", "completion": "(2 ** n) % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr(((ord(ch) - 5 + 26) % 26) + ord('a')) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "text.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '')"}
{"task_id": "HumanEval/52", "completion": "all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "print((x + y))"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0, s1):\n    return all(c in s1 for c in s0)"}
{"task_id": "HumanEval/55", "completion": "def fib(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    return all(l[i] >= l[i - 1] for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "set(l1).intersection(set(l2))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n            break"}
{"task_id": "HumanEval/60", "completion": "sum(i for i in range(n))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [sum(x[i] for x in xs[1:]) for i in range(len(xs) - 1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    a, b = 0, 0\n    for i in range(n):\n        a, b = b, a + b + fibfib(n - 1 - i)\n    return a"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = set('aeiou')\n    return sum(c in vowels for c in s.upper())"}
{"task_id": "HumanEval/65", "completion": "str(x)[(shift % len(str(x))) - 1] + str(x)[:(shift % len(str(x))) - 1]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) - ord('A') for c in s if ord(c) > ord('A'))"}
{"task_id": "HumanEval/67", "completion": "fruit_distribution('5 apples and 6 oranges', 19)"}
{"task_id": "HumanEval/68", "completion": "min([(x, y) for y, x in enumerate(filter(lambda x: x % 2 == 0, [4, 2, 3]))])"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    return max(i for i in set(lst) if lst.count(i) >= i)"}
{"task_id": "HumanEval/70", "completion": "sorted(lst, key=lambda x: (x % 2, x // 2))"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides `a`, `b`, and `c` of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1.\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (X + Y)) ** 0.5\n    return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return (sum(q) <= w) and (len(set(str(q))) == len(q))"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    return sum(abs(x - y) for x, y in zip(arr, arr[::-1]))"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return sorted(lst1, key=lambda x: (-len(x), lst2.index(x)))"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    \"\"\"\n    return str(a).split('*') == ['2', '3', '5']"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n ** int(log(x, n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(n):\n    return n ** (1 / 3) % 1 == 0"}
{"task_id": "HumanEval/78", "completion": "hex(int('ABED1A33', 16))"}
{"task_id": "HumanEval/79", "completion": "\"\"\"db\"\"\" + bin(decimal)[2:] + \"\"\"db\"\"\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"Check if string `s` is happy."}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grade):\n    \"\"\"Return the letter grade associated with the numerical score 'grade'.\"\"\"\n    switch = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    return switch.get(grade)"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    return (len(string) > 0) and (len(string) % 2 == 1)"}
{"task_id": "HumanEval/83", "completion": "len(str(i)) == n and str(i)[0] in ('1', '1') for i in range(1000000)"}
{"task_id": "HumanEval/84", "completion": "str(bin(N))"}
{"task_id": "HumanEval/85", "completion": "sum(x for x in [4, 2, 6, 7] if x % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "completion": "[(y, x) for x in range(len(y)) for y in range(len(y))]"}
{"task_id": "HumanEval/88", "completion": "sorted([2, 4, 3, 0, 1, 5, 6], key=lambda x: (-x, x))"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function to encrypt string 's' by shifting each character down by two multiplied to the power of two. \"\"\"\n    return ''.join(chr(ord('a') + ((ord(c) - ord('a') + 2) % 26)) for c in s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "len(re.split('\\\\.|\\\\?|!', S)) - 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return ((x + y) == z) and (type(x) == int and type(y) == int and type(z) == int)"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encode a message by replacing vowels with the character that appears 2 places ahead of that vowel in the english alphabet.\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_alphabet = list(alphabet)\n    for i in range(len(alphabet)):\n        if 'aeiou'.find(alphabet[i]) != -1:\n            if i < 2:\n                continue\n            else:\n                encoded_alphabet[i] = encoded_alphabet[i - 2]\n    return ''.join([encoded_alphabet.index(c) for c in message.lower()])"}
{"task_id": "HumanEval/94", "completion": "sum(map(int, str(81)))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    return all(k.upper() == k for k in dict) or all(k.lower() == k for k in dict)"}
{"task_id": "HumanEval/96", "completion": "[x for x in range(2, 18) if is_prime(x)]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a // 10) * (b // 10)"}
{"task_id": "HumanEval/98", "completion": "sum(1 for c in 'dBBE' if c.isupper() and not c.isdigit())"}
{"task_id": "HumanEval/99", "completion": "round(float('10'))"}
{"task_id": "HumanEval/100", "completion": "[x + 1 if x % 2 else x + 2 for x in range(n)]"}
{"task_id": "HumanEval/101", "completion": "re.split('[ ,]', s)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for i in range(x, y + 1, 2):\n        return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "bin(int(np.round((m + n) / 2)))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers `x`. return a sorted list of all \n    elements that hasn't any even digit."}
{"task_id": "HumanEval/105", "completion": "['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [1 if i % 2 else 2 for i in range(n)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 == 1:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "sum(1 for x in (-1, 11, -11))"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    return True if it is possible to get non-decreasing order for the given array by performing any number of right shift operations.\n    \"\"\"\n    arr.sort()\n    return (arr == [1, 2, 3, 4, 5])"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if set(lst1).issubset(set(lst2)):\n        return 'YES'\n    else:\n        return 'NO'"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    hist = {}\n    for c in test.lower():\n        if c not in hist:\n            hist[c] = 0\n        hist[c] += 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings `s` and `c`, you have to deleted all the characters in `s` that are equal to any character in `c`\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "['the number of odd elements {}n the str{}n the {} of the {}nput.'\n                   .format(i, i, i, i) for i in ['4', '8']]"}
{"task_id": "HumanEval/114", "completion": "sum(max(0, x - y) for x, y in zip(nums, reversed(nums)))"}
{"task_id": "HumanEval/115", "completion": "sum(map(lambda x: math.ceil(x / capacity), chain(*grid)))"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def get_ones_in_binary(n):\n        return bin(n).count('1')\n    arr.sort(key=lambda x: (get_ones_in_binary(x), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "re.findall('\\\\b(?:s?[aeiou]){0,3}\\\\b', 'Uncle sam')"}
{"task_id": "HumanEval/118", "completion": "re.search('[Aa][Mm]{2}([Aa][Mm]|[Bb][Bb])', 'AMBB')"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for elem in lst:\n        if elem == '(':\n            stack.append(elem)\n        elif elem == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "heapq.nlargest(k, arr, key=abs)"}
{"task_id": "HumanEval/121", "completion": "sum(x for x in lst if (num % 2) == 1)"}
{"task_id": "HumanEval/122", "completion": "sum(x for x in [21, 3, 4000, 5, 6, 7, 8, 9] if x <= 8)"}
{"task_id": "HumanEval/123", "completion": "sorted(list(set(map(lambda x: x % 2, collatz(5)))))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Check if date is in the format of MM-DD-YYYY.\n    \"\"\"\n    return date.split('-') == [str(i) for i in range(1, 13)]"}
{"task_id": "HumanEval/125", "completion": "re.split('\\\\s+|,', 'Hello world!')"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return all(x < y for x, y in zip(lst, lst[1:]))"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return 'NO'\n    else:\n        return 'YES'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    return sum(abs(x) for x in itertools.product(*arr))"}
{"task_id": "HumanEval/129", "completion": "minPath = []\nk = 3\nfor i in range(k):\n    minPath.append(min(grid[j][i] for j in range(len(grid))))\nreturn minPath"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    a, b, c = 0, 1, 1\n    for i in range(n):\n        if (n % 2 == 0):\n            a, b, c = b, c, a + (b + c) / 2\n        else:\n            a, b, c = a + (b + c) / 2, b, c\n    return a"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    s = str(n)\n    return int((''.join([c for c in s if int(c) % 2 == 1])) or '0')"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "sum(x * x for x in lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    return re.match('.*[a-zA-Z]', txt) is not None"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] >= arr[i + 1]:\n            return -1\n        i += 1\n    return i"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    \"\"\"\n    a = None\n    b = None\n    for i in lst:\n        if i > 0 and b == None:\n            b = i\n        elif i < 0 and a == None:\n            a = i\n        elif i > 0 and b > i:\n            b = i\n        elif i < 0 and a < i:\n            a = i\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return (n - sum(list(set(range(n, 0, -1)))[0:4])) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    return (n * (n - 1) * (n - 2) * (n - 3) * (n - 4)) % 1000000007"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string `text`, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with -\n    \"\"\"\n    text = text.replace(' ', '_')\n    text = re.sub('_+', '-', text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "re.match('[a-zA-Z]\\\\w+\\\\.(?:txt|exe|dll)$', file_name)"}
{"task_id": "HumanEval/142", "completion": "sum([(x ** y) for x, y in zip([1, 2, 3], [3, 4, 3])])"}
{"task_id": "HumanEval/143", "completion": "\"\"\" \"\"\".join(word for word in sentence.split() if len(word) % 2 == 1)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    return int(n) == int(float(x) * float(n))"}
{"task_id": "HumanEval/145", "completion": "sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return len([x for x in nums if ((x > 10) and (str(x)[0] % 2 == 1) and (str(x)[1] % 2 == 1))])"}
{"task_id": "HumanEval/147", "completion": "print(len([i for i in range(n) if (i * 3) % 3 == 0]))"}
{"task_id": "HumanEval/148", "completion": "sorted(('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uran', 'Neptune'), key=lambda x: (x == planet1, x == planet2))"}
{"task_id": "HumanEval/149", "completion": "def list_sort(lst):\n    return sorted(sorted(lst), key=lambda x: (-len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \"\"\"\n    return sum(x * x for x in lst if x % 2 != 0) * 2"}
{"task_id": "HumanEval/152", "completion": "np.abs(np.subtract.outer(guess, game))"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The strength of an extension is given by the sum of the difference\n    between the uppercase and lowercase letters in the extension's name.\n    \"\"\"\n    strongest = 0\n    best_ext = None\n    for e in extensions:\n        [A, B] = difflib.ndiff(null, e)\n        if (len(A) + len(B)) > strongest:\n            strongest = (len(A) + len(B))\n            best_ext = e\n    return class_name + '.' + best_ext"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(a.find(b) != -1 for b in [b] + [b[i:] + b[:i] for i in range(len(b))])"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    s = str(abs(num))\n    return (s.count('0'), s.count('1'))"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, return its roman numeral equivalent as a string.\n    \"\"\"\n    if number < 1 or number > 1000:\n        raise ValueError('Only [1, 1000] are supported.')\n    if number == 4:\n        return 'iv'\n    if number == 9:\n        return 'ix'\n    if number == 40:\n        return 'xl'\n    if number == 90:\n        return 'xcix'\n    if number == 50:\n        return 'l'\n    if number == 400:\n        return 'cd'\n    if number == 900:\n        return 'cm'\n    if number == 500:\n        return 'd'\n    if number == 4000:\n        return 'mxxliv'\n    if number == 9000:\n        return 'mmiix'\n    if number == 40000:\n        return 'mcdxl'\n    if"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (abs(a ** 2 + b ** 2 - c ** 2) < 0.000001) or (abs(a ** 2 + b ** 2 - c ** 2) < 0.000001)"}
{"task_id": "HumanEval/158", "completion": "print(find_max(['name', 'of', 'string']))"}
{"task_id": "HumanEval/159", "completion": "return [remaining + number, remaining]"}
{"task_id": "HumanEval/160", "completion": "eval(' + '.join([str(i) for i in array]))"}
{"task_id": "HumanEval/161", "completion": "s[::(-1)]"}
{"task_id": "HumanEval/162", "completion": "hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "[x for x in range(a, b + 1) if x % 2 == 0]"}
